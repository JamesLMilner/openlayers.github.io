{"version":3,"sources":["webpack:///../src/ol/source/TileDebug.js","webpack:///./canvas-tiles.js"],"names":["LabeledTile","tileCoord","tileSize","text","super","TileState","this","tileSize_","text_","canvas_","getImage","const","context","strokeStyle","strokeRect","fillStyle","textAlign","textBaseline","font","lineWidth","strokeText","fillText","canvas","load","opt_options","options","opaque","projection","tileGrid","wrapX","undefined","zDirection","getTile","z","x","y","tileCoordKey","tileCache","containsKey","get","getTileSize","textTileCoord","getTileCoordForTileUrlFunction","tile","set","XYZ","Map","layers","Tile","source","OSM","target","view","View","center","zoom"],"mappings":"uLAWMA,EAAwB,YAM5B,WAAYC,EAAWC,EAAUC,GAC/BC,OAAM,KAAAH,EAAWI,EAAA,UAMjBC,KAAKC,EAAYL,EAMjBI,KAAKE,EAAQL,EAMbG,KAAKG,EAAU,K,8FAOjB,EAAF,UAAEC,SAAA,WACE,GAAIJ,KAAKG,EACP,OAAOH,KAAKG,EAEZE,IAAMT,EAAWI,KAAKC,EAChBK,GAAU,QAAsBV,EAAS,GAAIA,EAAS,IAyB5D,OAvBAU,EAAQC,YAAc,OACtBD,EAAQE,WAAW,GAAK,GAAKZ,EAAS,GAAK,GAAKA,EAAS,GAAK,IAE9DU,EAAQG,UAAY,OACpBH,EAAQC,YAAc,QACtBD,EAAQI,UAAY,SACpBJ,EAAQK,aAAe,SACvBL,EAAQM,KAAO,kBACfN,EAAQO,UAAY,EACpBP,EAAQQ,WACNd,KAAKE,EACLN,EAAS,GAAK,EACdA,EAAS,GAAK,EACdA,EAAS,IAEXU,EAAQS,SACNf,KAAKE,EACLN,EAAS,GAAK,EACdA,EAAS,GAAK,EACdA,EAAS,IAGXI,KAAKG,EAAUG,EAAQU,OAChBV,EAAQU,QAInB,EAAF,UAAEC,KAAA,a,EAlE4B,CAAJ,KA8I1B,EApD2B,YAIzB,WAAYC,GAIVb,IAAMc,EAAUD,GAAe,GAE/BpB,OAAM,MACJsB,QAAQ,EACRC,WAAYF,EAAQE,WACpBC,SAAUH,EAAQG,SAClBC,WAAyBC,IAAlBL,EAAQI,OAAsBJ,EAAQI,MAC7CE,WAAYN,EAAQM,a,8FAUxB,EAAF,UAAEC,QAAA,SAAQC,EAAGC,EAAGC,GACZxB,IAAMyB,GAAe,QAAUH,EAAGC,EAAGC,GACrC,GAAI7B,KAAK+B,UAAUC,YAAYF,GAC7B,OAAoC9B,KAAK+B,UAAUE,IAAIH,GAEvDzB,IAGIR,EAHED,GAAW,QAAOI,KAAKsB,SAASY,YAAYP,IAC5ChC,EAAY,CAACgC,EAAGC,EAAGC,GACnBM,EAAgBnC,KAAKoC,+BAA+BzC,GAGxDE,EADEsC,EAEA,KACAA,EAAc,GACd,MACAA,EAAc,GACd,MACAA,EAAc,GAET,OAET9B,IAAMgC,EAAO,IAAI3C,EAAYC,EAAWC,EAAUC,GAElD,OADAG,KAAK+B,UAAUO,IAAIR,EAAcO,GAC1BA,G,EA/Cc,CAAHE,EAAA,G,UChGZ,IAAIC,EAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAA,EAAU,CACZC,OAAQ,IAAIC,EAAA,IAEd,IAAIF,EAAA,EAAU,CACZC,OAAQ,IAAI,KAGhBE,OAAQ,MACRC,KAAM,IAAIC,EAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,Q","file":"canvas-tiles.js","sourcesContent":["/**\n * @module ol/source/TileDebug\n */\n\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport XYZ from './XYZ.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {toSize} from '../size.js';\n\nclass LabeledTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {string} text Text.\n   */\n  constructor(tileCoord, tileSize, text) {\n    super(tileCoord, TileState.LOADED);\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tileSize_ = tileSize;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = text;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement} Image.\n   */\n  getImage() {\n    if (this.canvas_) {\n      return this.canvas_;\n    } else {\n      const tileSize = this.tileSize_;\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n\n      context.strokeStyle = 'grey';\n      context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n\n      context.fillStyle = 'grey';\n      context.strokeStyle = 'white';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.font = '24px sans-serif';\n      context.lineWidth = 4;\n      context.strokeText(\n        this.text_,\n        tileSize[0] / 2,\n        tileSize[1] / 2,\n        tileSize[0]\n      );\n      context.fillText(\n        this.text_,\n        tileSize[0] / 2,\n        tileSize[1] / 2,\n        tileSize[0]\n      );\n\n      this.canvas_ = context.canvas;\n      return context.canvas;\n    }\n  }\n\n  load() {}\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [zDirection=0] Set to `1` when debugging `VectorTile` sources with\n * a default configuration. Indicates which resolution should be used by a renderer if\n * the view resolution does not match any resolution of the tile source. If 0, the nearest\n * resolution will be used. If 1, the nearest lower resolution will be used. If -1, the\n * nearest higher resolution will be used.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n *\n * Uses Canvas context2d, so requires Canvas support.\n * @api\n */\nclass TileDebug extends XYZ {\n  /**\n   * @param {Options} [opt_options] Debug tile options.\n   */\n  constructor(opt_options) {\n    /**\n     * @type {Options}\n     */\n    const options = opt_options || {};\n\n    super({\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection,\n    });\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {!LabeledTile} Tile.\n   */\n  getTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return /** @type {!LabeledTile} */ (this.tileCache.get(tileCoordKey));\n    } else {\n      const tileSize = toSize(this.tileGrid.getTileSize(z));\n      const tileCoord = [z, x, y];\n      const textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);\n      let text;\n      if (textTileCoord) {\n        text =\n          'z:' +\n          textTileCoord[0] +\n          ' x:' +\n          textTileCoord[1] +\n          ' y:' +\n          textTileCoord[2];\n      } else {\n        text = 'none';\n      }\n      const tile = new LabeledTile(tileCoord, tileSize, text);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  }\n}\n\nexport default TileDebug;\n","import Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport {OSM, TileDebug} from '../src/ol/source.js';\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n    new TileLayer({\n      source: new TileDebug(),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n"],"sourceRoot":""}