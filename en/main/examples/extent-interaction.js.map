{"version":3,"sources":["webpack:///../src/ol/interaction/Extent.js","webpack:///./extent-interaction.js"],"names":["ExtentEventType","ExtentEvent","extent","super","this","Event","getDefaultPointerStyleFunction","const","style","feature","resolution","GeometryType","getPointHandler","fixedPoint","point","getEdgeHandler","fixedP1","fixedP2","opt_options","options","condition_","condition","extent_","pointerHandler_","pixelTolerance_","undefined","pixelTolerance","snappedToVertex_","extentFeature_","vertexFeature_","extentOverlay_","Vector","source","useSpatialIndex","wrapX","boxStyle","updateWhileAnimating","updateWhileInteracting","vertexOverlay_","pointerStyle","setExtent","snapToVertex_","pixel","map","pixelCoordinate","getCoordinateFromPixelInternal","getExtentInternal","segments","getSegments","sort","a","b","closestSegment","vertex","vertexPixel","getPixelFromCoordinateInternal","coordinate","pixel1","pixel2","squaredDist1","squaredDist2","dist","Math","sqrt","min","handlePointerMove_","mapBrowserEvent","createOrUpdatePointerFeature_","createOrUpdateExtentFeature_","let","extentFeature","setGeometry","Feature","getSource","addFeature","vertexFeature","getGeometry","setCoordinates","Point","handleEvent","originalEvent","type","MapBrowserEventType","handlingDownUpSequence","handleDownEvent","getOpposingPoint","x_","y_","x","y","handleDragEvent","handleUpEvent","setMap","getExtent","getMap","getView","getProjection","dispatchEvent","Pointer","vectorSource","url","format","GeoJSON","Map","layers","Tile","OSM","target","view","View","center","zoom","addInteraction"],"mappings":"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","file":"extent-interaction.js","sourcesContent":["/**\n * @module ol/interaction/Extent\n */\nimport Event from '../events/Event.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {always} from '../events/condition.js';\nimport {boundingExtent, getArea} from '../extent.js';\nimport {\n  closestOnSegment,\n  distance as coordinateDistance,\n  squaredDistance as squaredCoordinateDistance,\n  squaredDistanceToSegment,\n} from '../coordinate.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport {toUserExtent} from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~always}.\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\n * Style for the drawn extent box. Defaults to\n * {@link module:ol/style/Style~createEditing()['Polygon']}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to\n * {@link module:ol/style/Style~createEditing()['Point']}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n/**\n * @enum {string}\n */\nconst ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event ExtentEvent#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are\n * instances of this type.\n */\nexport class ExtentEvent extends Event {\n  /**\n   * @param {import(\"../extent.js\").Extent} extent the new extent\n   */\n  constructor(extent) {\n    super(ExtentEventType.EXTENTCHANGED);\n\n    /**\n     * The current extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = extent;\n  }\n}\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires ExtentEvent\n * @api\n */\nclass Extent extends PointerInteraction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /**\n     * Condition\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.condition_ = options.condition ? options.condition : always;\n\n    /**\n     * Extent of the drawn box\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.extent_ = null;\n\n    /**\n     * Handler for pointer move events\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\n     * @private\n     */\n    this.pointerHandler_ = null;\n\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ =\n      options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Feature for displaying the visible extent\n     * @type {Feature}\n     * @private\n     */\n    this.extentFeature_ = null;\n\n    /**\n     * Feature for displaying the visible pointer\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    if (!opt_options) {\n      opt_options = {};\n    }\n\n    /**\n     * Layer for the extentFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX,\n      }),\n      style: opt_options.boxStyle\n        ? opt_options.boxStyle\n        : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * Layer for the vertexFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX,\n      }),\n      style: opt_options.pointerStyle\n        ? opt_options.pointerStyle\n        : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    if (opt_options.extent) {\n      this.setExtent(opt_options.extent);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\n   * @param {import(\"../PluggableMap.js\").default} map map\n   * @return {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\n   * @private\n   */\n  snapToVertex_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);\n    const sortByDistance = function (a, b) {\n      return (\n        squaredDistanceToSegment(pixelCoordinate, a) -\n        squaredDistanceToSegment(pixelCoordinate, b)\n      );\n    };\n    const extent = this.getExtentInternal();\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      const segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      const closestSegment = segments[0];\n\n      let vertex = closestOnSegment(pixelCoordinate, closestSegment);\n      const vertexPixel = map.getPixelFromCoordinateInternal(vertex);\n\n      //if the distance is within tolerance, snap to the segment\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        const pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);\n        const pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex =\n            squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n        }\n        return vertex;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\n   * @private\n   */\n  handlePointerMove_(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    let vertex = this.snapToVertex_(pixel, map);\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n    }\n    this.createOrUpdatePointerFeature_(vertex);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent extent\n   * @return {Feature} extent as featrue\n   * @private\n   */\n  createOrUpdateExtentFeature_(extent) {\n    let extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n      this.extentFeature_ = extentFeature;\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n    return extentFeature;\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\n   * @return {Feature} vertex as feature\n   * @private\n   */\n  createOrUpdatePointerFeature_(vertex) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(vertex);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent || !this.condition_(mapBrowserEvent)) {\n      return true;\n    }\n    //display pointer (if not dragging)\n    if (\n      mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n      !this.handlingDownUpSequence\n    ) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    //call pointer to determine up/down/drag\n    super.handleEvent(mapBrowserEvent);\n    //return false to stop propagation\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    const extent = this.getExtentInternal();\n    let vertex = this.snapToVertex_(pixel, map);\n\n    //find the extent corner opposite the passed corner\n    const getOpposingPoint = function (point) {\n      let x_ = null;\n      let y_ = null;\n      if (point[0] == extent[0]) {\n        x_ = extent[2];\n      } else if (point[0] == extent[2]) {\n        x_ = extent[0];\n      }\n      if (point[1] == extent[1]) {\n        y_ = extent[3];\n      } else if (point[1] == extent[3]) {\n        y_ = extent[1];\n      }\n      if (x_ !== null && y_ !== null) {\n        return [x_, y_];\n      }\n      return null;\n    };\n    if (vertex && extent) {\n      const x =\n        vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;\n      const y =\n        vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null;\n\n      //snap to point\n      if (x !== null && y !== null) {\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n        //snap to edge\n      } else if (x !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([x, extent[1]]),\n          getOpposingPoint([x, extent[3]])\n        );\n      } else if (y !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([extent[0], y]),\n          getOpposingPoint([extent[2], y])\n        );\n      }\n      //no snap - new bbox\n    } else {\n      vertex = map.getCoordinateFromPixelInternal(pixel);\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n      this.pointerHandler_ = getPointHandler(vertex);\n    }\n    return true; //event handled; start downup sequence\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (this.pointerHandler_) {\n      const pixelCoordinate = mapBrowserEvent.coordinate;\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    this.pointerHandler_ = null;\n    //If bbox is zero area, set to null;\n    const extent = this.getExtentInternal();\n    if (!extent || getArea(extent) === 0) {\n      this.setExtent(null);\n    }\n    return false; //Stop handling downup sequence\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection (or user projection if set)\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtent() {\n    return toUserExtent(\n      this.getExtentInternal(),\n      this.getMap().getView().getProjection()\n    );\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtentInternal() {\n    return this.extent_;\n  }\n\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent\n   * @api\n   */\n  setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentEvent(this.extent_));\n  }\n}\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POLYGON];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @return {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function (point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @return {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function (point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent extent\n * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [\n    [\n      [extent[0], extent[1]],\n      [extent[0], extent[3]],\n    ],\n    [\n      [extent[0], extent[3]],\n      [extent[2], extent[3]],\n    ],\n    [\n      [extent[2], extent[3]],\n      [extent[2], extent[1]],\n    ],\n    [\n      [extent[2], extent[1]],\n      [extent[0], extent[1]],\n    ],\n  ];\n}\n\nexport default Extent;\n","import ExtentInteraction from '../src/ol/interaction/Extent.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {shiftKeyOnly} from '../src/ol/events/condition.js';\n\nconst vectorSource = new VectorSource({\n  url: 'data/geojson/countries.geojson',\n  format: new GeoJSON(),\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n    new VectorLayer({\n      source: vectorSource,\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nconst extent = new ExtentInteraction({condition: shiftKeyOnly});\nmap.addInteraction(extent);\n"],"sourceRoot":""}