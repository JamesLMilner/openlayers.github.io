webpackJsonp([83],{472:function(a,b,c){"use strict";Object.defineProperty(b,"__esModule",{value:!0});var d=c(2),e=c(1),f=c(26),g=c(34),h=c(25),i=c(12),j=c(9);const k=function(){const a={},b=new j.b({radius:5,fill:null,stroke:new j.f({color:"orange",width:2})});return a.Point=new j.g({image:b}),a.Polygon=new j.g({stroke:new j.f({color:"blue",width:3}),fill:new j.c({color:"rgba(0, 0, 255, 0.1)"})}),a.MultiLineString=new j.g({stroke:new j.f({color:"green",width:3})}),a.MultiPolygon=new j.g({stroke:new j.f({color:"yellow",width:1}),fill:new j.c({color:"rgba(255, 255, 0, 0.1)"})}),a["default"]=new j.g({stroke:new j.f({color:"red",width:3}),fill:new j.c({color:"rgba(255, 0, 0, 0.1)"}),image:b}),function(b){return a[b.getGeometry().getType()]||a["default"]}}(),l=new i.b({features:new f.a().readFeatures({type:"FeatureCollection",crs:{type:"name",properties:{name:"EPSG:3857"}},features:[{type:"Feature",geometry:{type:"Point",coordinates:[0,0]}},{type:"Feature",geometry:{type:"MultiPoint",coordinates:[[-2e6,0],[0,-2e6]]}},{type:"Feature",geometry:{type:"LineString",coordinates:[[4e6,-2e6],[8e6,2e6],[9e6,2e6]]}},{type:"Feature",geometry:{type:"LineString",coordinates:[[4e6,-2e6],[8e6,2e6],[8e6,3e6]]}},{type:"Feature",geometry:{type:"Polygon",coordinates:[[[-5e6,-1e6],[-4e6,1e6],[-3e6,-1e6],[-5e6,-1e6]],[[-45e5,-5e5],[-35e5,-5e5],[-4e6,5e5],[-45e5,-5e5]]]}},{type:"Feature",geometry:{type:"MultiLineString",coordinates:[[[-1e6,-75e4],[-1e6,75e4]],[[-1e6,-75e4],[-1e6,75e4],[-5e5,0],[-1e6,-75e4]],[[1e6,-75e4],[15e5,0],[15e5,0],[1e6,75e4]],[[-75e4,-1e6],[75e4,-1e6]],[[-75e4,1e6],[75e4,1e6]]]}},{type:"Feature",geometry:{type:"MultiPolygon",coordinates:[[[[-5e6,6e6],[-5e6,8e6],[-3e6,8e6],[-3e6,6e6],[-5e6,6e6]]],[[[-3e6,6e6],[-2e6,8e6],[0,8e6],[0,6e6],[-3e6,6e6]]],[[[1e6,6e6],[1e6,8e6],[3e6,8e6],[3e6,6e6],[1e6,6e6]]]]}},{type:"Feature",geometry:{type:"GeometryCollection",geometries:[{type:"LineString",coordinates:[[-5e6,-5e6],[0,-5e6]]},{type:"Point",coordinates:[4e6,-5e6]},{type:"Polygon",coordinates:[[[1e6,-6e6],[2e6,-4e6],[3e6,-6e6],[1e6,-6e6]]]}]}}]})}),m=new h.a({source:l,style:k}),n=function(){const a={};return a.Polygon=[new j.g({fill:new j.c({color:[255,255,255,.5]})}),new j.g({stroke:new j.f({color:[255,255,255,1],width:5})}),new j.g({stroke:new j.f({color:[0,153,255,1],width:3})})],a.MultiPolygon=a.Polygon,a.LineString=[new j.g({stroke:new j.f({color:[255,255,255,1],width:5})}),new j.g({stroke:new j.f({color:[0,153,255,1],width:3})})],a.MultiLineString=a.LineString,a.Point=[new j.g({image:new j.b({radius:7,fill:new j.c({color:[0,153,255,1]}),stroke:new j.f({color:[255,255,255,.75],width:1.5})}),zIndex:1e5})],a.MultiPoint=a.Point,a.GeometryCollection=a.Polygon.concat(a.Point),function(b){return a[b.getGeometry().getType()]}}(),o=new g.i({style:n}),p=new g.e({features:o.getFeatures(),style:n,insertVertexCondition:function(){return!o.getFeatures().getArray().every(function(a){return a.getGeometry().getType().match(/Polygon/)})}}),q=new d.a({interactions:Object(g.l)().extend([o,p]),layers:[m],target:"map",view:new e.a({center:[0,1e6],zoom:2})})}},[472]);