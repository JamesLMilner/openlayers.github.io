{"version":3,"sources":["webpack:///./icon-sprite-webgl.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_source_TileJSON__WEBPACK_IMPORTED_MODULE_3__","_src_ol_Feature__WEBPACK_IMPORTED_MODULE_4__","_src_ol_geom_Point__WEBPACK_IMPORTED_MODULE_5__","_src_ol_layer_Vector__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source__WEBPACK_IMPORTED_MODULE_7__","_src_ol_proj__WEBPACK_IMPORTED_MODULE_8__","_src_ol_renderer_webgl_PointsLayer__WEBPACK_IMPORTED_MODULE_9__","_src_ol_math__WEBPACK_IMPORTED_MODULE_10__","features","vectorSource","attributions","texture","document","createElement","src","const","client","shapeTextureCoords","light","sphere","circle","disc","oval","triangle","fireball","default","oldColor","newColor","WebglPointsLayer","VectorLayer","createRenderer","this","colorCallback","feature","vertex","component","ratio","get","Object","texCoordCallback","let","coords","sizeCallback","XMLHttpRequest","open","onload","curIndex","line","csv","responseText","prevIndex","indexOf","substr","split","parseFloat","isNaN","push","datetime","year","parseInt","exec","shape","duration","geometry","addFeatures","send","layers","source","url","crossOrigin","target","getElementById","view","center","zoom"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,GAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,IAYMc,EAAW,GACXC,EAAe,IAAIL,EAAA,EAAO,CAC9BI,SAAU,GACVE,aAAc,kCAGVC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,IAAM,sBAIdC,IA6CQC,EA7CFC,EAAqB,CACzBC,MAAS,CAAC,EAAG,GAAK,IAAM,GACxBC,OAAU,CAAC,IAAM,GAAK,GAAK,GAC3BC,OAAU,CAAC,IAAM,GAAK,GAAK,GAC3BC,KAAQ,CAAC,GAAK,GAAK,IAAM,GACzBC,KAAQ,CAAC,GAAK,GAAK,IAAM,GACzBC,SAAY,CAAC,IAAM,GAAK,EAAG,GAC3BC,SAAY,CAAC,EAAG,EAAG,IAAM,IACzBC,QAAW,CAAC,IAAM,EAAG,EAAG,KAGpBC,EAAW,CAAC,IAAK,IAAK,KACtBC,EAAW,CAAC,IAAK,IAAK,KAEtBC,EAAoC,SAAAC,kJACxCC,eAAA,WACE,OAAO,IAAIxB,EAAA,EAAyByB,KAAM,CACxCpB,QAASA,EACTqB,cAAe,SAASC,EAASC,EAAQC,GAEvC,GAAkB,IAAdA,EACF,OAAO,EAKTpB,IAAMqB,GAASH,EAAQI,IAAI,QAAU,MAAQ,GAC7C,OAAOC,OAAA/B,EAAA,EAAA+B,CAAKZ,EAASS,GAAYR,EAASQ,GAAYC,EAAQA,GAAS,KAEzEG,iBAAkB,SAASN,EAASE,GAClCK,IAAIC,EAASxB,EAAmBgB,EAAQI,IAAI,UAI5C,OAHKI,IACHA,EAASxB,EAA4B,SAEhCwB,EAAON,IAEhBO,aAAc,WACZ,OAAO,SAvB2B,CAAXvC,EAAA,IA+BvBa,EAAS,IAAI2B,gBACZC,KAAK,MAAO,kCACnB5B,EAAO6B,OAAS,WAKd,IAJA9B,IACI+B,EAEAC,EAHEC,EAAMhC,EAAOiC,aAEfC,EAAY,GAERJ,EAAWE,EAAIG,QAAQ,KAAMD,IAAc,GAKjD,GAJAH,EAAOC,EAAII,OAAOF,EAAWJ,EAAWI,GAAWG,MAAM,KAIvC,KAHlBH,EAAYJ,EAAW,GAGvB,CAIA/B,IAAM0B,EAASH,OAAAjC,EAAA,EAAAiC,CAAW,CAACgB,WAAWP,EAAK,IAAKO,WAAWP,EAAK,MAG5DQ,MAAMd,EAAO,KAAOc,MAAMd,EAAO,KAIrCjC,EAASgD,KAAK,IAAIvD,EAAA,EAAQ,CACxBwD,SAAUV,EAAK,GACfW,KAAMC,SAAS,WAAWC,KAAKb,EAAK,IAAI,IACxCc,MAAOd,EAAK,GACZe,SAAUf,EAAK,GACfgB,SAAU,IAAI7D,EAAA,EAAMuC,MAGxBhC,EAAauD,YAAYxD,IAE3BQ,EAAOiD,OAKT,IAAIpE,EAAA,EAAI,CACNqE,OAAQ,CACN,IAAInE,EAAA,EAAU,CACZoE,OAAQ,IAAInE,EAAA,EAAS,CACnBoE,IAAK,gEACLC,YAAa,gBAGjB,IAAIzC,EAAiB,CACnBuC,OAAQ1D,KAGZ6D,OAAQ1D,SAAS2D,eAAe,OAChCC,KAAM,IAAI1E,EAAA,EAAK,CACb2E,OAAQ,CAAC,EAAG,KACZC,KAAM","file":"icon-sprite-webgl.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport TileJSON from '../src/ol/source/TileJSON';\nimport Feature from '../src/ol/Feature';\nimport Point from '../src/ol/geom/Point';\nimport VectorLayer from '../src/ol/layer/Vector';\nimport {Vector} from '../src/ol/source';\nimport {fromLonLat} from '../src/ol/proj';\nimport WebGLPointsLayerRenderer from '../src/ol/renderer/webgl/PointsLayer';\nimport {lerp} from '../src/ol/math';\n\nconst features = [];\nconst vectorSource = new Vector({\n  features: [],\n  attributions: 'National UFO Reporting Center'\n});\n\nconst texture = document.createElement('img');\ntexture.src = 'data/ufo_shapes.png';\n\n// This describes the content of the associated sprite sheet\n// coords are u0, v0, u1, v1 for a given shape\nconst shapeTextureCoords = {\n  'light': [0, 0.5, 0.25, 0],\n  'sphere': [0.25, 0.5, 0.5, 0],\n  'circle': [0.25, 0.5, 0.5, 0],\n  'disc': [0.5, 0.5, 0.75, 0],\n  'oval': [0.5, 0.5, 0.75, 0],\n  'triangle': [0.75, 0.5, 1, 0],\n  'fireball': [0, 1, 0.25, 0.5],\n  'default': [0.75, 1, 1, 0.5]\n};\n\nconst oldColor = [255, 160, 110];\nconst newColor = [180, 255, 200];\n\nclass WebglPointsLayer extends VectorLayer {\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      texture: texture,\n      colorCallback: function(feature, vertex, component) {\n        // component at index 3 is alpha\n        if (component === 3) {\n          return 1;\n        }\n\n        // color is interpolated based on year (min is 1910, max is 2013)\n        // please note: most values are between 2000-2013\n        const ratio = (feature.get('year') - 1950) / (2013 - 1950);\n        return lerp(oldColor[component], newColor[component], ratio * ratio) / 255;\n      },\n      texCoordCallback: function(feature, component) {\n        let coords = shapeTextureCoords[feature.get('shape')];\n        if (!coords) {\n          coords = shapeTextureCoords['default'];\n        }\n        return coords[component];\n      },\n      sizeCallback: function() {\n        return 16;\n      }\n    });\n  }\n}\n\n\nfunction loadData() {\n  const client = new XMLHttpRequest();\n  client.open('GET', 'data/csv/ufo_sighting_data.csv');\n  client.onload = function() {\n    const csv = client.responseText;\n    let curIndex;\n    let prevIndex = 0;\n    let line;\n    while ((curIndex = csv.indexOf('\\n', prevIndex)) > 0) {\n      line = csv.substr(prevIndex, curIndex - prevIndex).split(',');\n      prevIndex = curIndex + 1;\n\n      // skip header\n      if (prevIndex === 0) {\n        continue;\n      }\n\n      const coords = fromLonLat([parseFloat(line[5]), parseFloat(line[4])]);\n\n      // only keep valid points\n      if (isNaN(coords[0]) || isNaN(coords[1])) {\n        continue;\n      }\n\n      features.push(new Feature({\n        datetime: line[0],\n        year: parseInt(/[0-9]{4}/.exec(line[0])[0]), // extract the year as int\n        shape: line[2],\n        duration: line[3],\n        geometry: new Point(coords)\n      }));\n    }\n    vectorSource.addFeatures(features);\n  };\n  client.send();\n}\n\nloadData();\n\nnew Map({\n  layers: [\n    new TileLayer({\n      source: new TileJSON({\n        url: 'https://api.tiles.mapbox.com/v3/mapbox.world-dark.json?secure',\n        crossOrigin: 'anonymous'\n      })\n    }),\n    new WebglPointsLayer({\n      source: vectorSource\n    })\n  ],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 4000000],\n    zoom: 2\n  })\n});\n"],"sourceRoot":""}