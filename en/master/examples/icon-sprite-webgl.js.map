{"version":3,"sources":["webpack:///./icon-sprite-webgl.js"],"names":["client","vectorSource","features","attributions","style","symbol","symbolType","src","size","color","rotateWithView","offset","textureCoord","XMLHttpRequest","open","onload","const","curIndex","csv","responseText","prevIndex","indexOf","line","substr","split","coords","parseFloat","isNaN","push","datetime","year","parseInt","exec","shape","duration","geometry","addFeatures","send","map","layers","source","url","crossOrigin","target","document","getElementById","view","center","zoom","info","on","evt","getView","getInteracting","pixel","innerText","forEachFeatureAtPixel","feature","get"],"mappings":"2FAAA,WAsDQA,EAtDR,qEAYMC,EAAe,IAAI,IAAO,CAC9BC,SAAU,GACVC,aAAc,kCAOVC,EAAQ,CACZC,OAAQ,CACNC,WAAY,QACZC,IAAK,sBACLC,KANS,GAOTC,MAAO,CACL,cACA,CAAC,UACD,CAAC,MAAO,QACR,KAbW,CAAC,IAAK,IAAK,KActB,KAbW,CAAC,IAAK,IAAK,MAexBC,gBAAgB,EAChBC,OAAQ,CACN,EACA,GAEFC,aAAc,CACZ,QACA,CAAC,MAAO,SACR,QAAS,CAAC,EAAG,EAAG,IAAM,IACtB,SAAU,CAAC,IAAM,EAAG,GAAK,IACzB,SAAU,CAAC,IAAM,EAAG,GAAK,IACzB,OAAQ,CAAC,GAAK,EAAG,IAAM,IACvB,OAAQ,CAAC,GAAK,EAAG,IAAM,IACvB,WAAY,CAAC,IAAM,EAAG,EAAG,IACzB,WAAY,CAAC,EAAG,GAAK,IAAM,GAC3B,CAAC,IAAM,GAAK,EAAG,OAMbZ,EAAS,IAAIa,gBACZC,KAAK,MAAO,kCACnBd,EAAOe,OAAS,WAOd,IANAC,IAKIC,EALEC,EAAMlB,EAAOmB,aACbjB,EAAW,GAEbkB,EAAYF,EAAIG,QAAQ,MAAQ,GAGiB,IAA7CJ,EAAWC,EAAIG,QAAQ,KAAMD,KAAmB,CACtDJ,IAAMM,EAAOJ,EAAIK,OAAOH,EAAWH,EAAWG,GAAWI,MAAM,KAC/DJ,EAAYH,EAAW,EAEvBD,IAAMS,EAAS,YAAW,CAACC,WAAWJ,EAAK,IAAKI,WAAWJ,EAAK,MAG5DK,MAAMF,EAAO,KAAOE,MAAMF,EAAO,KAIrCvB,EAAS0B,KAAK,IAAI,IAAQ,CACxBC,SAAUP,EAAK,GACfQ,KAAMC,SAAS,WAAWC,KAAKV,EAAK,IAAI,IACxCW,MAAOX,EAAK,GACZY,SAAUZ,EAAK,GACfa,SAAU,IAAI,IAAMV,MAGxBxB,EAAamC,YAAYlC,IAE3BF,EAAOqC,OAKTrB,IAAMsB,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,IAAS,CACnBC,IAAK,uKACLC,YAAa,gBAGjB,IAAI,IAAiB,CACnBF,OAAQvC,EACRG,MAAOA,KAGXuC,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAI,IAAK,CACbC,OAAQ,CAAC,EAAG,KACZC,KAAM,MAIJC,EAAOL,SAASC,eAAe,QACrCP,EAAIY,GAAG,cAAe,SAASC,GAC7B,IAAIb,EAAIc,UAAUC,iBAAlB,CAGArC,IAAMsC,EAAQH,EAAIG,MAClBL,EAAKM,UAAY,GACjBjB,EAAIkB,sBAAsBF,EAAO,SAASG,GACxCzC,IAAMa,EAAW4B,EAAQC,IAAI,YACvBxB,EAAWuB,EAAQC,IAAI,YACvBzB,EAAQwB,EAAQC,IAAI,SAC1BT,EAAKM,UAAY,MAAQ1B,EAAW,YAAcK,EAAW,uBAAyBD,EAAQ,kB","file":"icon-sprite-webgl.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport TileJSON from '../src/ol/source/TileJSON.js';\nimport Feature from '../src/ol/Feature.js';\nimport Point from '../src/ol/geom/Point.js';\nimport {Vector} from '../src/ol/source.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport WebGLPointsLayer from '../src/ol/layer/WebGLPoints.js';\n\nconst key = 'pk.eyJ1IjoidHNjaGF1YiIsImEiOiJjaW5zYW5lNHkxMTNmdWttM3JyOHZtMmNtIn0.CDIBD8H-G2Gf-cPkIuWtRg';\n\nconst vectorSource = new Vector({\n  features: [],\n  attributions: 'National UFO Reporting Center'\n});\n\nconst oldColor = [255, 160, 110];\nconst newColor = [180, 255, 200];\nconst size = 16;\n\nconst style = {\n  symbol: {\n    symbolType: 'image',\n    src: 'data/ufo_shapes.png',\n    size: size,\n    color: [\n      'interpolate',\n      ['linear'],\n      ['get', 'year'],\n      1950, oldColor,\n      2013, newColor\n    ],\n    rotateWithView: false,\n    offset: [\n      0,\n      9\n    ],\n    textureCoord: [\n      'match',\n      ['get', 'shape'],\n      'light', [0, 0, 0.25, 0.5],\n      'sphere', [0.25, 0, 0.5, 0.5],\n      'circle', [0.25, 0, 0.5, 0.5],\n      'disc', [0.5, 0, 0.75, 0.5],\n      'oval', [0.5, 0, 0.75, 0.5],\n      'triangle', [0.75, 0, 1, 0.5],\n      'fireball', [0, 0.5, 0.25, 1],\n      [0.75, 0.5, 1, 1]\n    ]\n  }\n};\n\nfunction loadData() {\n  const client = new XMLHttpRequest();\n  client.open('GET', 'data/csv/ufo_sighting_data.csv');\n  client.onload = function() {\n    const csv = client.responseText;\n    const features = [];\n\n    let prevIndex = csv.indexOf('\\n') + 1; // scan past the header line\n\n    let curIndex;\n    while ((curIndex = csv.indexOf('\\n', prevIndex)) != -1) {\n      const line = csv.substr(prevIndex, curIndex - prevIndex).split(',');\n      prevIndex = curIndex + 1;\n\n      const coords = fromLonLat([parseFloat(line[5]), parseFloat(line[4])]);\n\n      // only keep valid points\n      if (isNaN(coords[0]) || isNaN(coords[1])) {\n        continue;\n      }\n\n      features.push(new Feature({\n        datetime: line[0],\n        year: parseInt(/[0-9]{4}/.exec(line[0])[0]), // extract the year as int\n        shape: line[2],\n        duration: line[3],\n        geometry: new Point(coords)\n      }));\n    }\n    vectorSource.addFeatures(features);\n  };\n  client.send();\n}\n\nloadData();\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new TileJSON({\n        url: 'https://api.tiles.mapbox.com/v4/mapbox.world-dark.json?secure&access_token=' + key,\n        crossOrigin: 'anonymous'\n      })\n    }),\n    new WebGLPointsLayer({\n      source: vectorSource,\n      style: style\n    })\n  ],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 4000000],\n    zoom: 2\n  })\n});\n\nconst info = document.getElementById('info');\nmap.on('pointermove', function(evt) {\n  if (map.getView().getInteracting()) {\n    return;\n  }\n  const pixel = evt.pixel;\n  info.innerText = '';\n  map.forEachFeatureAtPixel(pixel, function(feature) {\n    const datetime = feature.get('datetime');\n    const duration = feature.get('duration');\n    const shape = feature.get('shape');\n    info.innerText = 'On ' + datetime + ', lasted ' + duration + ' seconds and had a \"' + shape + '\" shape.';\n  });\n});\n"],"sourceRoot":""}