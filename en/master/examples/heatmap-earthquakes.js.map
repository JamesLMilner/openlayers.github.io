{"version":3,"sources":["webpack:///../src/ol/layer/Heatmap.js","webpack:///./heatmap-earthquakes.js"],"names":["Property","BLUR","GRADIENT","RADIUS","DEFAULT_GRADIENT","layer_Heatmap","VectorLayer","Heatmap","opt_options","const","options","baseOptions","Object","obj","gradient","radius","blur","weight","super","this","gradient_","events","ol_Object","handleGradientChanged_","setGradient","setBlur","undefined","setRadius","weightFunction_","feature","get","setRenderOrder","getBlur","getGradient","getRadius","colors","context","dom","createLinearGradient","step","length","i","ii","addColorStop","fillStyle","fillRect","canvas","createGradient","set","createRenderer","PointsLayer","vertexShader","fragmentShader","uniforms","u_size","bind","u_blurSlope","Math","max","u_resolution","frameState","viewState","resolution","postProcesses","u_gradientTexture","opacityCallback","Vector","heatmap_earthquakes_blur","document","getElementById","vector","source","source_Vector","url","format","KML","extractStyles","parseInt","value","getSource","on","event","name","magnitude","parseFloat","substr","raster","Tile","Stamen","layer","blurHandler","Map","layers","target","view","View","center","zoom","addEventListener","radiusHandler"],"mappings":"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","file":"heatmap-earthquakes.js","sourcesContent":["/**\n * @module ol/layer/Heatmap\n */\nimport {listen} from '../events.js';\nimport {getChangeEventType} from '../Object.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport VectorLayer from './Vector.js';\nimport {assign} from '../obj.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"../source/Vector.js\").default} [source] Source.\n */\n\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius'\n};\n\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nclass Heatmap extends VectorLayer {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const baseOptions = assign({}, options);\n\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.gradient_ = null;\n\n    listen(this,\n      getChangeEventType(Property.GRADIENT),\n      this.handleGradientChanged_, this);\n\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n\n    const weight = options.weight ? options.weight : 'weight';\n    if (typeof weight === 'string') {\n      this.weightFunction_ = function(feature) {\n        return feature.get(weight);\n      };\n    } else {\n      this.weightFunction_ = weight;\n    }\n\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  getBlur() {\n    return /** @type {number} */ (this.get(Property.BLUR));\n  }\n\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  getGradient() {\n    return /** @type {Array<string>} */ (this.get(Property.GRADIENT));\n  }\n\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  getRadius() {\n    return /** @type {number} */ (this.get(Property.RADIUS));\n  }\n\n  /**\n   * @private\n   */\n  handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  }\n\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  }\n\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  }\n\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      vertexShader: `\n        precision mediump float;\n        attribute vec2 a_position;\n        attribute vec2 a_texCoord;\n        attribute float a_rotateWithView;\n        attribute vec2 a_offsets;\n        attribute float a_opacity;\n\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform mat4 u_offsetRotateMatrix;\n        uniform float u_size;\n\n        varying vec2 v_texCoord;\n        varying float v_opacity;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          if (a_rotateWithView == 1.0) {\n            offsetMatrix = u_offsetScaleMatrix * u_offsetRotateMatrix;\n          }\n          vec4 offsets = offsetMatrix * vec4(a_offsets, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets * u_size;\n          v_texCoord = a_texCoord;\n          v_opacity = a_opacity;\n        }`,\n      fragmentShader: `\n        precision mediump float;\n        uniform float u_resolution;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_opacity;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_opacity;\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\n        }`,\n      uniforms: {\n        u_size: function() {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        }.bind(this),\n        u_blurSlope: function() {\n          return this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR));\n        }.bind(this),\n        u_resolution: function(frameState) {\n          return frameState.viewState.resolution;\n        }\n      },\n      postProcesses: [\n        {\n          fragmentShader: `\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n\n            varying vec2 v_texCoord;\n            varying vec2 v_screenCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }`,\n          uniforms: {\n            u_gradientTexture: this.gradient_\n          }\n        }\n      ],\n      opacityCallback: this.weightFunction_\n    });\n  }\n}\n\n\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\nfunction createGradient(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n\n  return context.canvas;\n}\n\n\nexport default Heatmap;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport KML from '../src/ol/format/KML.js';\nimport {Heatmap as HeatmapLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport VectorSource from '../src/ol/source/Vector.js';\n\nconst blur = document.getElementById('blur');\nconst radius = document.getElementById('radius');\n\nconst vector = new HeatmapLayer({\n  source: new VectorSource({\n    url: 'data/kml/2012_Earthquakes_Mag5.kml',\n    format: new KML({\n      extractStyles: false\n    })\n  }),\n  blur: parseInt(blur.value, 10),\n  radius: parseInt(radius.value, 10)\n});\n\nvector.getSource().on('addfeature', function(event) {\n  // 2012_Earthquakes_Mag5.kml stores the magnitude of each earthquake in a\n  // standards-violating <magnitude> tag in each Placemark.  We extract it from\n  // the Placemark's name instead.\n  const name = event.feature.get('name');\n  const magnitude = parseFloat(name.substr(2));\n  event.feature.set('weight', magnitude - 5);\n});\n\nconst raster = new TileLayer({\n  source: new Stamen({\n    layer: 'toner'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst blurHandler = function() {\n  vector.setBlur(parseInt(blur.value, 10));\n};\nblur.addEventListener('input', blurHandler);\nblur.addEventListener('change', blurHandler);\n\nconst radiusHandler = function() {\n  vector.setRadius(parseInt(radius.value, 10));\n};\nradius.addEventListener('input', radiusHandler);\nradius.addEventListener('change', radiusHandler);\n"],"sourceRoot":""}