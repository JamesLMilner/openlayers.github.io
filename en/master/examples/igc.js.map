{"version":3,"sources":["webpack:///./igc.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_format_IGC_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_source_OSM_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_11__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_12__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_13__","_src_ol_render_js__WEBPACK_IMPORTED_MODULE_14__","colors","Clement Latour","Damien de Baesnt","Sylvain Dhonneur","Tom Payne","Ulrich Prinz","styleCache","vectorSource","igcUrls","get","url","callback","const","client","XMLHttpRequest","open","onload","responseText","send","igcFormat","i","length","data","features","readFeatures","featureProjection","addFeatures","time","start","Infinity","stop","duration","on","event","geometry","feature","getGeometry","Math","min","getFirstCoordinate","max","getLastCoordinate","vectorLayer","source","style","color","stroke","width","map","layers","attributions","target","view","center","zoom","point","line","displaySnap","coordinate","closestFeature","getClosestFeatureToCoordinate","info","document","getElementById","innerHTML","closestPoint","getClosestPoint","setCoordinates","date","Date","toUTCString","coordinates","render","evt","dragging","getEventCoordinate","originalEvent","image","radius","fill","vectorContext","Object","setStyle","drawGeometry","featureOverlay","addEventListener","value","parseInt","this","m","forEachFeature","getCoordinateAtM","highlight","undefined","set","getSource","addFeature"],"mappings":"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","file":"igc.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport IGC from '../src/ol/format/IGC.js';\nimport {LineString, Point} from '../src/ol/geom.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport OSM, {ATTRIBUTION} from '../src/ol/source/OSM.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\nimport {getVectorContext} from '../src/ol/render.js';\n\n\nconst colors = {\n  'Clement Latour': 'rgba(0, 0, 255, 0.7)',\n  'Damien de Baesnt': 'rgba(0, 215, 255, 0.7)',\n  'Sylvain Dhonneur': 'rgba(0, 165, 255, 0.7)',\n  'Tom Payne': 'rgba(0, 255, 255, 0.7)',\n  'Ulrich Prinz': 'rgba(0, 215, 255, 0.7)'\n};\n\nconst styleCache = {};\nconst styleFunction = function(feature) {\n  const color = colors[feature.get('PLT')];\n  let style = styleCache[color];\n  if (!style) {\n    style = new Style({\n      stroke: new Stroke({\n        color: color,\n        width: 3\n      })\n    });\n    styleCache[color] = style;\n  }\n  return style;\n};\n\nconst vectorSource = new VectorSource();\n\nconst igcUrls = [\n  'data/igc/Clement-Latour.igc',\n  'data/igc/Damien-de-Baenst.igc',\n  'data/igc/Sylvain-Dhonneur.igc',\n  'data/igc/Tom-Payne.igc',\n  'data/igc/Ulrich-Prinz.igc'\n];\n\nfunction get(url, callback) {\n  const client = new XMLHttpRequest();\n  client.open('GET', url);\n  client.onload = function() {\n    callback(client.responseText);\n  };\n  client.send();\n}\n\nconst igcFormat = new IGC();\nfor (let i = 0; i < igcUrls.length; ++i) {\n  get(igcUrls[i], function(data) {\n    const features = igcFormat.readFeatures(data,\n      {featureProjection: 'EPSG:3857'});\n    vectorSource.addFeatures(features);\n  });\n}\n\nconst time = {\n  start: Infinity,\n  stop: -Infinity,\n  duration: 0\n};\nvectorSource.on('addfeature', function(event) {\n  const geometry = event.feature.getGeometry();\n  time.start = Math.min(time.start, geometry.getFirstCoordinate()[2]);\n  time.stop = Math.max(time.stop, geometry.getLastCoordinate()[2]);\n  time.duration = time.stop - time.start;\n});\n\nconst vectorLayer = new VectorLayer({\n  source: vectorSource,\n  style: styleFunction\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM({\n        attributions: [\n          'All maps Â© <a href=\"https://www.opencyclemap.org/\">OpenCycleMap</a>',\n          ATTRIBUTION\n        ],\n        url: 'https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png' +\n            '?apikey=0e6fc415256d4fbb9b5166a718591d71'\n      })\n    }),\n    vectorLayer\n  ],\n  target: 'map',\n  view: new View({\n    center: [703365.7089403362, 5714629.865071137],\n    zoom: 9\n  })\n});\n\n\nlet point = null;\nlet line = null;\nconst displaySnap = function(coordinate) {\n  const closestFeature = vectorSource.getClosestFeatureToCoordinate(coordinate);\n  const info = document.getElementById('info');\n  if (closestFeature === null) {\n    point = null;\n    line = null;\n    info.innerHTML = '&nbsp;';\n  } else {\n    const geometry = closestFeature.getGeometry();\n    const closestPoint = geometry.getClosestPoint(coordinate);\n    if (point === null) {\n      point = new Point(closestPoint);\n    } else {\n      point.setCoordinates(closestPoint);\n    }\n    const date = new Date(closestPoint[2] * 1000);\n    info.innerHTML =\n        closestFeature.get('PLT') + ' (' + date.toUTCString() + ')';\n    const coordinates = [coordinate, [closestPoint[0], closestPoint[1]]];\n    if (line === null) {\n      line = new LineString(coordinates);\n    } else {\n      line.setCoordinates(coordinates);\n    }\n  }\n  map.render();\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const coordinate = map.getEventCoordinate(evt.originalEvent);\n  displaySnap(coordinate);\n});\n\nmap.on('click', function(evt) {\n  displaySnap(evt.coordinate);\n});\n\nconst stroke = new Stroke({\n  color: 'rgba(255,0,0,0.9)',\n  width: 1\n});\nconst style = new Style({\n  stroke: stroke,\n  image: new CircleStyle({\n    radius: 5,\n    fill: null,\n    stroke: stroke\n  })\n});\nvectorLayer.on('postrender', function(evt) {\n  const vectorContext = getVectorContext(evt);\n  vectorContext.setStyle(style);\n  if (point !== null) {\n    vectorContext.drawGeometry(point);\n  }\n  if (line !== null) {\n    vectorContext.drawGeometry(line);\n  }\n});\n\nconst featureOverlay = new VectorLayer({\n  source: new VectorSource(),\n  map: map,\n  style: new Style({\n    image: new CircleStyle({\n      radius: 5,\n      fill: new Fill({\n        color: 'rgba(255,0,0,0.9)'\n      })\n    })\n  })\n});\n\ndocument.getElementById('time').addEventListener('input', function() {\n  const value = parseInt(this.value, 10) / 100;\n  const m = time.start + (time.duration * value);\n  vectorSource.forEachFeature(function(feature) {\n    const geometry = /** @type {import(\"../src/ol/geom/LineString.js\").default} */ (feature.getGeometry());\n    const coordinate = geometry.getCoordinateAtM(m, true);\n    let highlight = feature.get('highlight');\n    if (highlight === undefined) {\n      highlight = new Feature(new Point(coordinate));\n      feature.set('highlight', highlight);\n      featureOverlay.getSource().addFeature(highlight);\n    } else {\n      highlight.getGeometry().setCoordinates(coordinate);\n    }\n  });\n  map.render();\n});\n"],"sourceRoot":""}