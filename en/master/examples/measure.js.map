{"version":3,"sources":["webpack:///./measure.js"],"names":["__webpack_require__","r","__webpack_exports__","sketch","helpTooltipElement","helpTooltip","measureTooltipElement","measureTooltip","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_Observable_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_Overlay_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_sphere_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_geom_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_interaction_Draw_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_11__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_12__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_13__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_14__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_15__","raster","source","vector","style","fill","color","stroke","width","image","radius","map","layers","target","view","center","zoom","on","evt","dragging","let","helpMsg","const","geom","getGeometry","innerHTML","setPosition","coordinate","classList","remove","getViewport","addEventListener","add","draw","typeSelect","document","getElementById","formatLength","line","length","Object","Math","round","formatArea","polygon","area","addInteraction","listener","type","value","lineDash","createMeasureTooltip","parentNode","removeChild","createElement","className","element","offset","positioning","addOverlay","createHelpTooltip","feature","tooltipCoord","output","getInteriorPoint","getCoordinates","getLastCoordinate","this","setOffset","onchange","removeInteraction"],"mappings":"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","file":"measure.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport {unByKey} from '../src/ol/Observable.js';\nimport Overlay from '../src/ol/Overlay.js';\nimport {getArea, getLength} from '../src/ol/sphere.js';\nimport View from '../src/ol/View.js';\nimport {LineString, Polygon} from '../src/ol/geom.js';\nimport Draw from '../src/ol/interaction/Draw.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\n\nconst raster = new TileLayer({\n  source: new OSM()\n});\n\nconst source = new VectorSource();\n\nconst vector = new VectorLayer({\n  source: source,\n  style: new Style({\n    fill: new Fill({\n      color: 'rgba(255, 255, 255, 0.2)'\n    }),\n    stroke: new Stroke({\n      color: '#ffcc33',\n      width: 2\n    }),\n    image: new CircleStyle({\n      radius: 7,\n      fill: new Fill({\n        color: '#ffcc33'\n      })\n    })\n  })\n});\n\n\n/**\n * Currently drawn feature.\n * @type {module:ol/Feature~Feature}\n */\nlet sketch;\n\n\n/**\n * The help tooltip element.\n * @type {Element}\n */\nlet helpTooltipElement;\n\n\n/**\n * Overlay to show the help messages.\n * @type {module:ol/Overlay}\n */\nlet helpTooltip;\n\n\n/**\n * The measure tooltip element.\n * @type {Element}\n */\nlet measureTooltipElement;\n\n\n/**\n * Overlay to show the measurement.\n * @type {module:ol/Overlay}\n */\nlet measureTooltip;\n\n\n/**\n * Message to show when the user is drawing a polygon.\n * @type {string}\n */\nconst continuePolygonMsg = 'Click to continue drawing the polygon';\n\n\n/**\n * Message to show when the user is drawing a line.\n * @type {string}\n */\nconst continueLineMsg = 'Click to continue drawing the line';\n\n\n/**\n * Handle pointer move.\n * @param {module:ol/MapBrowserEvent~MapBrowserEvent} evt The event.\n */\nconst pointerMoveHandler = function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  /** @type {string} */\n  let helpMsg = 'Click to start drawing';\n\n  if (sketch) {\n    const geom = (sketch.getGeometry());\n    if (geom instanceof Polygon) {\n      helpMsg = continuePolygonMsg;\n    } else if (geom instanceof LineString) {\n      helpMsg = continueLineMsg;\n    }\n  }\n\n  helpTooltipElement.innerHTML = helpMsg;\n  helpTooltip.setPosition(evt.coordinate);\n\n  helpTooltipElement.classList.remove('hidden');\n};\n\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: 'map',\n  view: new View({\n    center: [-11000000, 4600000],\n    zoom: 15\n  })\n});\n\nmap.on('pointermove', pointerMoveHandler);\n\nmap.getViewport().addEventListener('mouseout', function() {\n  helpTooltipElement.classList.add('hidden');\n});\n\nconst typeSelect = document.getElementById('type');\n\nlet draw; // global so we can remove it later\n\n\n/**\n * Format length output.\n * @param {module:ol/geom/LineString~LineString} line The line.\n * @return {string} The formatted length.\n */\nconst formatLength = function(line) {\n  const length = getLength(line);\n  let output;\n  if (length > 100) {\n    output = (Math.round(length / 1000 * 100) / 100) +\n        ' ' + 'km';\n  } else {\n    output = (Math.round(length * 100) / 100) +\n        ' ' + 'm';\n  }\n  return output;\n};\n\n\n/**\n * Format area output.\n * @param {module:ol/geom/Polygon~Polygon} polygon The polygon.\n * @return {string} Formatted area.\n */\nconst formatArea = function(polygon) {\n  const area = getArea(polygon);\n  let output;\n  if (area > 10000) {\n    output = (Math.round(area / 1000000 * 100) / 100) +\n        ' ' + 'km<sup>2</sup>';\n  } else {\n    output = (Math.round(area * 100) / 100) +\n        ' ' + 'm<sup>2</sup>';\n  }\n  return output;\n};\n\nfunction addInteraction() {\n  const type = (typeSelect.value == 'area' ? 'Polygon' : 'LineString');\n  draw = new Draw({\n    source: source,\n    type: type,\n    style: new Style({\n      fill: new Fill({\n        color: 'rgba(255, 255, 255, 0.2)'\n      }),\n      stroke: new Stroke({\n        color: 'rgba(0, 0, 0, 0.5)',\n        lineDash: [10, 10],\n        width: 2\n      }),\n      image: new CircleStyle({\n        radius: 5,\n        stroke: new Stroke({\n          color: 'rgba(0, 0, 0, 0.7)'\n        }),\n        fill: new Fill({\n          color: 'rgba(255, 255, 255, 0.2)'\n        })\n      })\n    })\n  });\n  map.addInteraction(draw);\n\n  createMeasureTooltip();\n  createHelpTooltip();\n\n  let listener;\n  draw.on('drawstart',\n    function(evt) {\n      // set sketch\n      sketch = evt.feature;\n\n      /** @type {module:ol/coordinate~Coordinate|undefined} */\n      let tooltipCoord = evt.coordinate;\n\n      listener = sketch.getGeometry().on('change', function(evt) {\n        const geom = evt.target;\n        let output;\n        if (geom instanceof Polygon) {\n          output = formatArea(geom);\n          tooltipCoord = geom.getInteriorPoint().getCoordinates();\n        } else if (geom instanceof LineString) {\n          output = formatLength(geom);\n          tooltipCoord = geom.getLastCoordinate();\n        }\n        measureTooltipElement.innerHTML = output;\n        measureTooltip.setPosition(tooltipCoord);\n      });\n    }, this);\n\n  draw.on('drawend',\n    function() {\n      measureTooltipElement.className = 'tooltip tooltip-static';\n      measureTooltip.setOffset([0, -7]);\n      // unset sketch\n      sketch = null;\n      // unset tooltip so that a new one can be created\n      measureTooltipElement = null;\n      createMeasureTooltip();\n      unByKey(listener);\n    }, this);\n}\n\n\n/**\n * Creates a new help tooltip\n */\nfunction createHelpTooltip() {\n  if (helpTooltipElement) {\n    helpTooltipElement.parentNode.removeChild(helpTooltipElement);\n  }\n  helpTooltipElement = document.createElement('div');\n  helpTooltipElement.className = 'tooltip hidden';\n  helpTooltip = new Overlay({\n    element: helpTooltipElement,\n    offset: [15, 0],\n    positioning: 'center-left'\n  });\n  map.addOverlay(helpTooltip);\n}\n\n\n/**\n * Creates a new measure tooltip\n */\nfunction createMeasureTooltip() {\n  if (measureTooltipElement) {\n    measureTooltipElement.parentNode.removeChild(measureTooltipElement);\n  }\n  measureTooltipElement = document.createElement('div');\n  measureTooltipElement.className = 'tooltip tooltip-measure';\n  measureTooltip = new Overlay({\n    element: measureTooltipElement,\n    offset: [0, -15],\n    positioning: 'bottom-center'\n  });\n  map.addOverlay(measureTooltip);\n}\n\n\n/**\n * Let user change the geometry type.\n */\ntypeSelect.onchange = function() {\n  map.removeInteraction(draw);\n  addInteraction();\n};\n\naddInteraction();\n"],"sourceRoot":""}