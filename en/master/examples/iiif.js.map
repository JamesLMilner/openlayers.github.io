{"version":3,"sources":["webpack:///../src/ol/format/IIIFInfo.js","webpack:///../src/ol/source/IIIF.js","webpack:///./iiif.js"],"names":["Versions","VERSION1","VERSION2","VERSION3","IIIF_PROFILE_VALUES","level0","supports","formats","qualities","level1","level2","none","const","COMPLIANCE_VERSION1","RegExp","COMPLIANCE_VERSION2","COMPLIANCE_VERSION3","versionFunctions","iiifInfo","let","levelProfile","getComplianceLevelSupportedFeatures","undefined","url","imageInfo","replace","concat","resolutions","scale_factors","tileSize","tile_width","tile_height","additionalProfile","Array","isArray","profile","length","profileSupports","profileFormats","profileQualities","sizes","map","size","width","height","tiles","tile","scaleFactors","extraFeatures","extraFormats","extraQualities","maxWidth","maxHeight","maxArea","IIIFInfo","this","setImageInfo","prototype","JSON","parse","getImageApiVersion","context","i","getComplianceLevelEntryFromProfile","identifier","Object","asserts","version","test","getComplianceLevelFromProfile","complianceLevel","level","match","getTileSourceOptions","opt_preferredOptions","options","imageOptions","format","includes","quality","sort","a","b","format_IIIFInfo","formatPercentage","percentage","toLocaleString","maximumFractionDigits","source_IIIF","TileImage","IIIF","opt_options","baseUrl","lastIndexOf","isNaN","tileWidth","tileHeight","maxZoom","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","common","Math","max","ceil","log","LN2","push","pow","maxScaleFactor","round","ignoredSizesIndex","resolution","splice","tileGrid","TileGrid","origin","ol_extent","IiifTileClass","Zoomify","bind","super","attributions","attributionsCollapsible","cacheSize","crossOrigin","projection","reprojectionErrorThreshold","state","tileClass","tilePixelRatio","tileUrlFunction","tileCoord","pixelRatio","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","regionWidth","regionHeight","transition","zDirection","constructor","iiif_layer","Tile","Map","layers","target","notifyDiv","document","getElementById","urlInput","refreshMap","imageInfoUrl","fetch","then","response","json","iiifTileSource","setSource","setView","View","getTileGrid","getResolutions","getExtent","constrainOnlyCenter","getView","fit","textContent","catch","body","addEventListener","value"],"mappings":"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","file":"iiif.js","sourcesContent":["/**\n * @module ol/format/IIIFInfo\n */\n\nimport {assert} from '../asserts.js';\n\n\n/**\n * @typedef {Object} PreferredOptions\n * @property {string} [format] Preferred image format. Will be used if the image information\n * indicates support for that format.\n * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information\n * indicates support for that quality.\n */\n\n/**\n * @typedef {Object} SupportedFeatures\n * @property {Array<string>} [supports] Supported IIIF image size and region\n * calculation features.\n * @property {Array<string>} [formats] Supported image formats.\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\n */\n\n/**\n * @typedef {Object} ImageInformationResponse1_0\n * @property {string} identifier\n * @property {number} width\n * @property {number} height\n * @property {Array<number>} [scale_factors] Resolution scaling factors.\n * @property {number} [tile_width]\n * @property {number} [tile_height]\n * @property {Array<string>} [formats] Supported image formats.\n * @property {string} [profile] Compliance level URI.\n */\n\n/**\n * @typedef {Object} ImageInformationResponse1_1\n * @property {string} \"@id\" The base URI of the image service.\n * @property {string} \"@context\" JSON-LD context URI.\n * @property {number} width Full image width.\n * @property {number} height Full image height.\n * @property {Array<number>} [scale_factors] Resolution scaling factors.\n * @property {number} [tile_width]\n * @property {number} [tile_height]\n * @property {Array<string>} [formats] Supported image formats.\n * @property {string} [profile] Compliance level URI.\n */\n\n/**\n * @typedef {Object} TileInfo\n * @property {Array<number>} scaleFactors Supported resolution scaling factors.\n * @property {number} width Tile width in pixels.\n * @property {number} [height] Tile height in pixels. Same as tile width if height is\n * not given.\n */\n\n/**\n * @typedef {Object} IiifProfile\n * @property {Array<string>} [formats] Supported image formats for the image service.\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\n * @property {Array<string>} [supports] Supported features.\n * @property {number} [maxArea] Maximum area (pixels) available for this image service.\n * @property {number} [maxHeight] Maximum height.\n * @property {number} [maxWidth] Maximum width.\n */\n\n/**\n * @typedef {Object} ImageInformationResponse2\n * @property {string} \"@id\" The base URI of the image service.\n * @property {string} \"@context\" JSON-LD context IRI\n * @property {number} width Full image width.\n * @property {number} height Full image height.\n * @property {Array<string|IiifProfile>} profile Additional informations about the image\n * service's capabilities.\n * @property {Array<Object<string, number>>} [sizes] Supported full image dimensions.\n * @property {Array<TileInfo>} [tiles] Supported tile sizes and resolution scaling factors.\n */\n\n/**\n * @typedef {Object} ImageInformationResponse3\n * @property {string} id The base URI of the image service.\n * @property {string} \"@context\" JSON-LD context IRI\n * @property {number} width Full image width.\n * @property {number} height Full image height.\n * @property {string} profile Compliance level, one of 'level0', 'level1' or 'level2'\n * @property {Array<Object<string, number>>} [sizes] Supported full image dimensions.\n * @property {Array<TileInfo>} [tiles] Supported tile sizes and resolution scaling factors.\n * @property {number} [maxArea] Maximum area (pixels) available for this image service.\n * @property {number} [maxHeight] Maximum height.\n * @property {number} [maxWidth] Maximum width.\n * @property {Array<string>} [extraQualities] IIIF image qualities supported by the\n * image service additional to the ones indicated by the compliance level.\n * @property {Array<string>} [extraFormats] Image formats supported by the\n * image service additional to the ones indicated by the compliance level.\n * @property {Array<string>} [extraFeatures] Additional supported features whose support\n * is not indicated by the compliance level.\n */\n\n/**\n* @enum {string}\n*/\nexport const Versions = {\n  VERSION1: 'version1',\n  VERSION2: 'version2',\n  VERSION3: 'version3'\n};\n\n/**\n * Supported image formats, qualities and supported region / size calculation features\n * for different image API versions and compliance levels\n * @const\n * @type {Object<string, Object<string, SupportedFeatures>>}\n */\nconst IIIF_PROFILE_VALUES = {};\nIIIF_PROFILE_VALUES[Versions.VERSION1] = {\n  'level0': {\n    supports: [],\n    formats: [],\n    qualities: ['native']\n  },\n  'level1': {\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\n    formats: ['jpg'],\n    qualities: ['native']\n  },\n  'level2': {\n    supports: ['regionByPx', 'regionByPct', 'sizeByW', 'sizeByH', 'sizeByPct',\n      'sizeByConfinedWh', 'sizeByWh'],\n    formats: ['jpg', 'png'],\n    qualities: ['native', 'color', 'grey', 'bitonal']\n  }\n};\nIIIF_PROFILE_VALUES[Versions.VERSION2] = {\n  'level0': {\n    supports: [],\n    formats: ['jpg'],\n    qualities: ['default']\n  },\n  'level1': {\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\n    formats: ['jpg'],\n    qualities: ['default']\n  },\n  'level2': {\n    supports: ['regionByPx', 'regionByPct', 'sizeByW', 'sizeByH', 'sizeByPct',\n      'sizeByConfinedWh', 'sizeByDistortedWh', 'sizeByWh'],\n    formats: ['jpg', 'png'],\n    qualities: ['default', 'bitonal']\n  }\n};\nIIIF_PROFILE_VALUES[Versions.VERSION3] = {\n  'level0': {\n    supports: [],\n    formats: ['jpg'],\n    qualities: ['default']\n  },\n  'level1': {\n    supports: ['regionByPx', 'regionSquare', 'sizeByW', 'sizeByH'],\n    formats: ['jpg'],\n    qualities: ['default']\n  },\n  'level2': {\n    supports: ['regionByPx', 'regionSquare', 'regionByPct',\n      'sizeByW', 'sizeByH', 'sizeByPct', 'sizeByConfinedWh', 'sizeByWh'],\n    formats: ['jpg'],\n    qualities: ['default', 'bitonal']\n  }\n};\nIIIF_PROFILE_VALUES['none'] = {\n  'none': {\n    supports: [],\n    formats: [],\n    qualities: []\n  }\n};\n\nconst COMPLIANCE_VERSION1 = new RegExp('^https?\\:\\/\\/library\\.stanford\\.edu\\/iiif\\/image-api\\/(1\\.1\\/)?compliance\\.html#level[0-2]$');\nconst COMPLIANCE_VERSION2 = new RegExp('^https?\\:\\/\\/iiif\\.io\\/api\\/image\\/2\\/level[0-2](\\.json)?$');\nconst COMPLIANCE_VERSION3 = new RegExp('(^https?\\:\\/\\/iiif\\.io\\/api\\/image\\/3\\/level[0-2](\\.json)?$)|(^level[0-2]$)');\n\nfunction generateVersion1Options(iiifInfo) {\n  let levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();\n  // Version 1.0 and 1.1 do not require a profile.\n  if (levelProfile === undefined) {\n    levelProfile = IIIF_PROFILE_VALUES[Versions.VERSION1]['level0'];\n  }\n  return {\n    url: iiifInfo.imageInfo['@id'] === undefined ? undefined : iiifInfo.imageInfo['@id'].replace(/\\/?(info.json)?$/g, ''),\n    supports: levelProfile.supports,\n    formats: [...levelProfile.formats, iiifInfo.imageInfo.formats === undefined ?\n      [] : iiifInfo.imageInfo.formats\n    ],\n    qualities: [...levelProfile.qualities, iiifInfo.imageInfo.qualities === undefined ?\n      [] : iiifInfo.imageInfo.qualities\n    ],\n    resolutions: iiifInfo.imageInfo.scale_factors,\n    tileSize: iiifInfo.imageInfo.tile_width !== undefined ? (iiifInfo.imageInfo.tile_height !== undefined ?\n      [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_height] : [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_width]) :\n      (iiifInfo.imageInfo.tile_height != undefined ? [iiifInfo.imageInfo.tile_height, iiifInfo.imageInfo.tile_height] : undefined)\n  };\n}\n\nfunction generateVersion2Options(iiifInfo) {\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\n      additionalProfile = Array.isArray(iiifInfo.imageInfo.profile) && iiifInfo.imageInfo.profile.length > 1,\n      profileSupports = additionalProfile && iiifInfo.imageInfo.profile[1].supports ? iiifInfo.imageInfo.profile[1].supports : [],\n      profileFormats = additionalProfile && iiifInfo.imageInfo.profile[1].formats ? iiifInfo.imageInfo.profile[1].formats : [],\n      profileQualities = additionalProfile && iiifInfo.imageInfo.profile[1].qualities ? iiifInfo.imageInfo.profile[1].qualities : [];\n  return {\n    url: iiifInfo.imageInfo['@id'].replace(/\\/?(info.json)?$/g, ''),\n    sizes: iiifInfo.imageInfo.sizes === undefined ? undefined : iiifInfo.imageInfo.sizes.map(function(size) {\n      return [size.width, size.height];\n    }),\n    tileSize: iiifInfo.imageInfo.tiles === undefined ? undefined : [\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.width;\n      })[0],\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.height === undefined ? tile.width : tile.height;\n      })[0]\n    ],\n    resolutions: iiifInfo.imageInfo.tiles === undefined ? undefined :\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.scaleFactors;\n      })[0],\n    supports: [...levelProfile.supports, ...profileSupports],\n    formats: [...levelProfile.formats, ...profileFormats],\n    qualities: [...levelProfile.qualities, ...profileQualities]\n  };\n}\n\nfunction generateVersion3Options(iiifInfo) {\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();\n  return {\n    url: iiifInfo.imageInfo['id'],\n    sizes: iiifInfo.imageInfo.sizes === undefined ? undefined : iiifInfo.imageInfo.sizes.map(function(size) {\n      return [size.width, size.height];\n    }),\n    tileSize: iiifInfo.imageInfo.tiles === undefined ? undefined : [\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.width;\n      })[0],\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.height;\n      })[0]\n    ],\n    resolutions: iiifInfo.imageInfo.tiles === undefined ? undefined :\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.scaleFactors;\n      })[0],\n    supports: iiifInfo.imageInfo.extraFeatures === undefined ? levelProfile.supports :\n      [...levelProfile.supports, ...iiifInfo.imageInfo.extraFeatures],\n    formats: iiifInfo.imageInfo.extraFormats === undefined ? levelProfile.formats :\n      [...levelProfile.formats, ...iiifInfo.imageInfo.extraFormats],\n    qualities: iiifInfo.imageInfo.extraQualities === undefined ? levelProfile.qualities :\n      [...levelProfile.supports, ...iiifInfo.imageInfo.extraQualities],\n    maxWidth: undefined,\n    maxHeight: undefined,\n    maxArea: undefined\n  };\n}\n\nconst versionFunctions = {};\nversionFunctions[Versions.VERSION1] = generateVersion1Options;\nversionFunctions[Versions.VERSION2] = generateVersion2Options;\nversionFunctions[Versions.VERSION3] = generateVersion3Options;\n\n/**\n * @classdesc\n * Format for transforming IIIF Image API image information responses into\n * IIIF tile source ready options\n *\n * @api\n */\nclass IIIFInfo {\n\n  /**\n   * @param {ImageInformationResponse1_0|ImageInformationResponse1_1|ImageInformationResponse2|ImageInformationResponse3|string} imageInfo\n   * Deserialized image information JSON response object or JSON response as string\n   */\n  constructor(imageInfo) {\n    this.setImageInfo(imageInfo);\n  }\n\n  /**\n   * @param {Object|string} imageInfo Deserialized image information JSON response\n   * object or JSON response as string\n   */\n  setImageInfo(imageInfo) {\n    if (typeof imageInfo == 'string') {\n      this.imageInfo = JSON.parse(imageInfo);\n    } else {\n      this.imageInfo = imageInfo;\n    }\n  }\n\n  /**\n   * @returns {Versions} Major IIIF version.\n   */\n  getImageApiVersion() {\n    if (this.imageInfo === undefined) {\n      return;\n    }\n    let context = this.imageInfo['@context'] || 'ol-no-context';\n    if (typeof context == 'string') {\n      context = [context];\n    }\n    for (let i = 0; i < context.length; i++) {\n      switch (context[i]) {\n        case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':\n        case 'http://iiif.io/api/image/1/context.json':\n          return Versions.VERSION1;\n        case 'http://iiif.io/api/image/2/context.json':\n          return Versions.VERSION2;\n        case 'http://iiif.io/api/image/3/context.json':\n          return Versions.VERSION3;\n        case 'ol-no-context':\n          // Image API 1.0 has no '@context'\n          if (this.getComplianceLevelEntryFromProfile(Versions.VERSION1) && this.imageInfo.identifier) {\n            return Versions.VERSION1;\n          }\n          break;\n        default:\n      }\n    }\n    assert(false, 61);\n  }\n\n  /**\n   * @param {Versions} version Optional IIIF image API version\n   * @returns {string} Compliance level as it appears in the IIIF image information\n   * response.\n   */\n  getComplianceLevelEntryFromProfile(version) {\n    if (this.imageInfo === undefined || this.imageInfo.profile === undefined) {\n      return;\n    }\n    if (version === undefined) {\n      version = this.getImageApiVersion();\n    }\n    switch (version) {\n      case Versions.VERSION1:\n        if (COMPLIANCE_VERSION1.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        break;\n      case Versions.VERSION3:\n        if (COMPLIANCE_VERSION3.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        break;\n      case Versions.VERSION2:\n        if (typeof this.imageInfo.profile === 'string' && COMPLIANCE_VERSION2.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        if (Array.isArray(this.imageInfo.profile) && this.imageInfo.profile.length > 0\n          && typeof this.imageInfo.profile[0] === 'string' && COMPLIANCE_VERSION2.test(this.imageInfo.profile[0])) {\n          return this.imageInfo.profile[0];\n        }\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {Versions} version Optional IIIF image API version\n   * @returns {string} Compliance level, on of 'level0', 'level1' or 'level2' or undefined\n   */\n  getComplianceLevelFromProfile(version) {\n    const complianceLevel = this.getComplianceLevelEntryFromProfile(version);\n    if (complianceLevel === undefined) {\n      return undefined;\n    }\n    const level = complianceLevel.match(/level[0-2](\\.json)?$/g);\n    return Array.isArray(level) ? level[0].replace('.json', '') : undefined;\n  }\n\n  /**\n   * @returns {SupportedFeatures} Image formats, qualities and region / size calculation\n   * methods that are supported by the IIIF service.\n   */\n  getComplianceLevelSupportedFeatures() {\n    if (this.imageInfo === undefined) {\n      return;\n    }\n    const version = this.getImageApiVersion();\n    const level = this.getComplianceLevelFromProfile(version);\n    if (level === undefined) {\n      return IIIF_PROFILE_VALUES['none']['none'];\n    }\n    return IIIF_PROFILE_VALUES[version][level];\n  }\n\n  /**\n   * @param {PreferredOptions} opt_preferredOptions Optional options for preferred format and quality.\n   * @returns {import(\"../source/IIIF.js\").Options} IIIF tile source ready constructor options.\n   */\n  getTileSourceOptions(opt_preferredOptions) {\n    const options = opt_preferredOptions || {},\n        version = this.getImageApiVersion();\n    if (version === undefined) {\n      return;\n    }\n    const imageOptions = version === undefined ? undefined : versionFunctions[version](this);\n    if (imageOptions === undefined) {\n      return;\n    }\n    return {\n      url: imageOptions.url,\n      version: version,\n      size: [this.imageInfo.width, this.imageInfo.height],\n      sizes: imageOptions.sizes,\n      format: imageOptions.formats.includes(options.format) ? options.format : 'jpg',\n      supports: imageOptions.supports,\n      quality: options.quality && imageOptions.qualities.includes(options.quality) ?\n        options.quality : imageOptions.qualities.includes('native') ? 'native' : 'default',\n      resolutions: Array.isArray(imageOptions.resolutions) ? imageOptions.resolutions.sort(function(a, b) {\n        return b - a;\n      }) : undefined,\n      tileSize: imageOptions.tileSize\n    };\n  }\n\n}\n\nexport default IIIFInfo;\n","/**\n * @module ol/source/IIIF\n */\n\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport {getTopLeft} from '../extent.js';\nimport {CustomTile} from './Zoomify.js';\nimport {Versions} from '../format/IIIFInfo.js';\nimport {assert} from '../asserts.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {null|string} [crossOrigin]\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]]\n * @property {string} [format='jpg'] Requested image format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {import(\"../size.js\").Size[]} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio]\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition]\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image @id.\n * @property {Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number} [zDirection] Indicate which resolution should be used\n * by a renderer if the views resolution does not match any resolution of the tile source.\n * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n * will be used. If -1, the nearest higher resolution will be used.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {maximumFractionDigits: 10});\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    let baseUrl = options.url || '';\n    baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n    const version = options.version || Versions.VERSION2;\n    const sizes = options.sizes || [];\n    const size = options.size;\n    assert(size != undefined && Array.isArray(size) && size.length == 2 &&\n      !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 60);\n    const width = size[0];\n    const height = size[1];\n    const tileSize = options.tileSize;\n    const format = options.format || 'jpg';\n    const quality = options.quality || (options.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = options.resolutions || [];\n    const supports = options.supports || [];\n    const extent = options.extent || [0, -height, width, 0];\n\n    const supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles = tileSize != undefined && (Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n    const supportsArbitraryTiling = supports != undefined && Array.isArray(supports) &&\n      (supports.includes('regionByPx') || supports.includes('regionByPct')) &&\n      (supports.includes('sizeByWh') || supports.includes('sizeByH') ||\n      supports.includes('sizeByW') || supports.includes('sizeByPct'));\n\n    let tileWidth,\n        tileHeight,\n        maxZoom;\n\n    resolutions.sort(function(a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (Number.isInteger(tileSize) && tileSize > 0) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(\n          Math.ceil(Math.log(width / tileWidth) / Math.LN2),\n          Math.ceil(Math.log(height / tileHeight) / Math.LN2)\n        );\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max([...resolutions]);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function(a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n\n    const tileUrlFunction = function(tileCoord, pixelRatio, projection) {\n      let regionParam,\n          sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n          tileY = tileCoord[2],\n          scale = resolutions[zoom];\n      if (tileX === undefined || tileY === undefined || scale === undefined ||\n      tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX ||\n      tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n            regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n            regionH = tileHeight * scale,\n            sizeW = tileWidth,\n            sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (!supportsArbitraryTiling || supports.includes('regionByPx')) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage(regionX / width * 100),\n              pctY = formatPercentage(regionY / height * 100),\n              pctW = formatPercentage(regionW / width * 100),\n              pctH = formatPercentage(regionH / height * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (version == Versions.VERSION3 && (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n              regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n    };\n\n    const IiifTileClass = CustomTile.bind(null, tileGrid);\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: options.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    });\n\n    /**\n     * @inheritDoc\n     */\n    this.zDirection = options.zDirection;\n\n  }\n\n}\n\nexport default IIIF;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport IIIF from '../src/ol/source/IIIF.js';\nimport IIIFInfo from '../src/ol/format/IIIFInfo.js';\n\nconst layer = new TileLayer(),\n    map = new Map({\n      layers: [layer],\n      target: 'map'\n    }),\n    notifyDiv = document.getElementById('iiif-notification'),\n    urlInput = document.getElementById('imageInfoUrl'),\n    displayButton = document.getElementById('display');\n\nfunction refreshMap(imageInfoUrl) {\n  fetch(imageInfoUrl).then(function(response) {\n    response.json().then(function(imageInfo) {\n      const options = new IIIFInfo(imageInfo).getTileSourceOptions();\n      if (options === undefined || options.version === undefined) {\n        notifyDiv.textContent = 'Data seems to be no valid IIIF image information.';\n        return;\n      }\n      options.zDirection = -1;\n      const iiifTileSource = new IIIF(options);\n      layer.setSource(iiifTileSource);\n      map.setView(new View({\n        resolutions: iiifTileSource.getTileGrid().getResolutions(),\n        extent: iiifTileSource.getTileGrid().getExtent(),\n        constrainOnlyCenter: true\n      }));\n      map.getView().fit(iiifTileSource.getTileGrid().getExtent());\n      notifyDiv.textContent = '';\n    }).catch(function(body) {\n      notifyDiv.textContent = 'Could not read image info json. ' + body;\n    });\n  }).catch(function() {\n    notifyDiv.textContent = 'Could not read data from URL.';\n  });\n}\n\ndisplayButton.addEventListener('click', function() {\n  refreshMap(urlInput.value);\n});\n\nrefreshMap(urlInput.value);\n"],"sourceRoot":""}