{"version":3,"sources":["webpack:///../src/ol/format/IIIFInfo.js","webpack:///../src/ol/source/IIIF.js","webpack:///./iiif.js"],"names":["Versions","VERSION1","VERSION2","VERSION3","IIIF_PROFILE_VALUES","level0","supports","formats","qualities","level1","level2","none","const","COMPLIANCE_VERSION1","RegExp","COMPLIANCE_VERSION2","COMPLIANCE_VERSION3","versionFunctions","iiifInfo","let","levelProfile","getComplianceLevelSupportedFeatures","undefined","url","imageInfo","replace","concat","resolutions","scale_factors","tileSize","tile_width","tile_height","additionalProfile","Array","isArray","profile","length","profileSupports","profileFormats","profileQualities","sizes","map","size","width","height","tiles","tile","scaleFactors","extraFormats","preferredFormat","preferredFormats","filter","format","includes","reduce","acc","extraFeatures","extraQualities","IIIFInfo","this","setImageInfo","prototype","JSON","parse","getImageApiVersion","context","i","getComplianceLevelEntryFromProfile","identifier","Object","asserts","version","test","getComplianceLevelFromProfile","complianceLevel","level","match","getTileSourceOptions","opt_preferredOptions","options","imageOptions","quality","sort","a","b","format_IIIFInfo","formatPercentage","percentage","toLocaleString","maximumFractionDigits","source_IIIF","TileImage","IIIF","opt_options","baseUrl","lastIndexOf","isNaN","tileWidth","tileHeight","maxZoom","tilePixelRatio","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","common","Math","max","ceil","log","LN2","push","pow","maxScaleFactor","apply","round","ignoredSizesIndex","resolution","splice","tileGrid","TileGrid","origin","ol_extent","IiifTileClass","Zoomify","bind","super","attributions","attributionsCollapsible","cacheSize","crossOrigin","projection","reprojectionErrorThreshold","state","tileClass","tileUrlFunction","tileCoord","pixelRatio","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","regionWidth","regionHeight","transition","zDirection","constructor","iiif_layer","Tile","Map","layers","target","notifyDiv","document","getElementById","urlInput","refreshMap","imageInfoUrl","fetch","then","response","json","iiifTileSource","setSource","setView","View","getTileGrid","getResolutions","getExtent","constrainOnlyCenter","getView","fit","textContent","catch","body","addEventListener","value"],"mappings":"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","file":"iiif.js","sourcesContent":["/**\n * @module ol/format/IIIFInfo\n */\n\nimport {assert} from '../asserts.js';\n\n\n/**\n * @typedef {Object} PreferredOptions\n * @property {string} [format] Preferred image format. Will be used if the image information\n * indicates support for that format.\n * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information\n * indicates support for that quality.\n */\n\n/**\n * @typedef {Object} SupportedFeatures\n * @property {Array<string>} [supports] Supported IIIF image size and region\n * calculation features.\n * @property {Array<string>} [formats] Supported image formats.\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\n */\n\n/**\n * @typedef {Object} ImageInformationResponse1_0\n * @property {string} identifier\n * @property {number} width\n * @property {number} height\n * @property {Array<number>} [scale_factors] Resolution scaling factors.\n * @property {number} [tile_width]\n * @property {number} [tile_height]\n * @property {Array<string>} [formats] Supported image formats.\n * @property {string} [profile] Compliance level URI.\n */\n\n/**\n * @typedef {Object} ImageInformationResponse1_1\n * @property {string} \"@id\" The base URI of the image service.\n * @property {string} \"@context\" JSON-LD context URI.\n * @property {number} width Full image width.\n * @property {number} height Full image height.\n * @property {Array<number>} [scale_factors] Resolution scaling factors.\n * @property {number} [tile_width]\n * @property {number} [tile_height]\n * @property {Array<string>} [formats] Supported image formats.\n * @property {string} [profile] Compliance level URI.\n */\n\n/**\n * @typedef {Object} TileInfo\n * @property {Array<number>} scaleFactors Supported resolution scaling factors.\n * @property {number} width Tile width in pixels.\n * @property {number} [height] Tile height in pixels. Same as tile width if height is\n * not given.\n */\n\n/**\n * @typedef {Object} IiifProfile\n * @property {Array<string>} [formats] Supported image formats for the image service.\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\n * @property {Array<string>} [supports] Supported features.\n * @property {number} [maxArea] Maximum area (pixels) available for this image service.\n * @property {number} [maxHeight] Maximum height.\n * @property {number} [maxWidth] Maximum width.\n */\n\n/**\n * @typedef {Object} ImageInformationResponse2\n * @property {string} \"@id\" The base URI of the image service.\n * @property {string} \"@context\" JSON-LD context IRI\n * @property {number} width Full image width.\n * @property {number} height Full image height.\n * @property {Array<string|IiifProfile>} profile Additional informations about the image\n * service's capabilities.\n * @property {Array<Object<string, number>>} [sizes] Supported full image dimensions.\n * @property {Array<TileInfo>} [tiles] Supported tile sizes and resolution scaling factors.\n */\n\n/**\n * @typedef {Object} ImageInformationResponse3\n * @property {string} id The base URI of the image service.\n * @property {string} \"@context\" JSON-LD context IRI\n * @property {number} width Full image width.\n * @property {number} height Full image height.\n * @property {string} profile Compliance level, one of 'level0', 'level1' or 'level2'\n * @property {Array<Object<string, number>>} [sizes] Supported full image dimensions.\n * @property {Array<TileInfo>} [tiles] Supported tile sizes and resolution scaling factors.\n * @property {number} [maxArea] Maximum area (pixels) available for this image service.\n * @property {number} [maxHeight] Maximum height.\n * @property {number} [maxWidth] Maximum width.\n * @property {Array<string>} [extraQualities] IIIF image qualities supported by the\n * image service additional to the ones indicated by the compliance level.\n * @property {Array<string>} [extraFormats] Image formats supported by the\n * image service additional to the ones indicated by the compliance level.\n * @property {Array<string>} [extraFeatures] Additional supported features whose support\n * is not indicated by the compliance level.\n * @property {Array<string>} [preferredFormats] Image formats that should preferrably\n * be used.\n */\n\n/**\n * Enum representing the major IIIF Image API versions\n * @enum {string}\n */\nconst Versions = {\n  VERSION1: 'version1',\n  VERSION2: 'version2',\n  VERSION3: 'version3'\n};\n\n/**\n * Supported image formats, qualities and supported region / size calculation features\n * for different image API versions and compliance levels\n * @const\n * @type {Object<string, Object<string, SupportedFeatures>>}\n */\nconst IIIF_PROFILE_VALUES = {};\nIIIF_PROFILE_VALUES[Versions.VERSION1] = {\n  'level0': {\n    supports: [],\n    formats: [],\n    qualities: ['native']\n  },\n  'level1': {\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\n    formats: ['jpg'],\n    qualities: ['native']\n  },\n  'level2': {\n    supports: ['regionByPx', 'regionByPct', 'sizeByW', 'sizeByH', 'sizeByPct',\n      'sizeByConfinedWh', 'sizeByWh'],\n    formats: ['jpg', 'png'],\n    qualities: ['native', 'color', 'grey', 'bitonal']\n  }\n};\nIIIF_PROFILE_VALUES[Versions.VERSION2] = {\n  'level0': {\n    supports: [],\n    formats: ['jpg'],\n    qualities: ['default']\n  },\n  'level1': {\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\n    formats: ['jpg'],\n    qualities: ['default']\n  },\n  'level2': {\n    supports: ['regionByPx', 'regionByPct', 'sizeByW', 'sizeByH', 'sizeByPct',\n      'sizeByConfinedWh', 'sizeByDistortedWh', 'sizeByWh'],\n    formats: ['jpg', 'png'],\n    qualities: ['default', 'bitonal']\n  }\n};\nIIIF_PROFILE_VALUES[Versions.VERSION3] = {\n  'level0': {\n    supports: [],\n    formats: ['jpg'],\n    qualities: ['default']\n  },\n  'level1': {\n    supports: ['regionByPx', 'regionSquare', 'sizeByW', 'sizeByH', 'sizeByWh'],\n    formats: ['jpg'],\n    qualities: ['default']\n  },\n  'level2': {\n    supports: ['regionByPx', 'regionSquare', 'regionByPct',\n      'sizeByW', 'sizeByH', 'sizeByPct', 'sizeByConfinedWh', 'sizeByWh'],\n    formats: ['jpg', 'png'],\n    qualities: ['default']\n  }\n};\nIIIF_PROFILE_VALUES['none'] = {\n  'none': {\n    supports: [],\n    formats: [],\n    qualities: []\n  }\n};\n\nconst COMPLIANCE_VERSION1 = new RegExp('^https?\\:\\/\\/library\\.stanford\\.edu\\/iiif\\/image-api\\/(1\\.1\\/)?compliance\\.html#level[0-2]$');\nconst COMPLIANCE_VERSION2 = new RegExp('^https?\\:\\/\\/iiif\\.io\\/api\\/image\\/2\\/level[0-2](\\.json)?$');\nconst COMPLIANCE_VERSION3 = new RegExp('(^https?\\:\\/\\/iiif\\.io\\/api\\/image\\/3\\/level[0-2](\\.json)?$)|(^level[0-2]$)');\n\nfunction generateVersion1Options(iiifInfo) {\n  let levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();\n  // Version 1.0 and 1.1 do not require a profile.\n  if (levelProfile === undefined) {\n    levelProfile = IIIF_PROFILE_VALUES[Versions.VERSION1]['level0'];\n  }\n  return {\n    url: iiifInfo.imageInfo['@id'] === undefined ? undefined : iiifInfo.imageInfo['@id'].replace(/\\/?(info.json)?$/g, ''),\n    supports: levelProfile.supports,\n    formats: [...levelProfile.formats, iiifInfo.imageInfo.formats === undefined ?\n      [] : iiifInfo.imageInfo.formats\n    ],\n    qualities: [...levelProfile.qualities, iiifInfo.imageInfo.qualities === undefined ?\n      [] : iiifInfo.imageInfo.qualities\n    ],\n    resolutions: iiifInfo.imageInfo.scale_factors,\n    tileSize: iiifInfo.imageInfo.tile_width !== undefined ? (iiifInfo.imageInfo.tile_height !== undefined ?\n      [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_height] : [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_width]) :\n      (iiifInfo.imageInfo.tile_height != undefined ? [iiifInfo.imageInfo.tile_height, iiifInfo.imageInfo.tile_height] : undefined)\n  };\n}\n\nfunction generateVersion2Options(iiifInfo) {\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\n      additionalProfile = Array.isArray(iiifInfo.imageInfo.profile) && iiifInfo.imageInfo.profile.length > 1,\n      profileSupports = additionalProfile && iiifInfo.imageInfo.profile[1].supports ? iiifInfo.imageInfo.profile[1].supports : [],\n      profileFormats = additionalProfile && iiifInfo.imageInfo.profile[1].formats ? iiifInfo.imageInfo.profile[1].formats : [],\n      profileQualities = additionalProfile && iiifInfo.imageInfo.profile[1].qualities ? iiifInfo.imageInfo.profile[1].qualities : [];\n  return {\n    url: iiifInfo.imageInfo['@id'].replace(/\\/?(info.json)?$/g, ''),\n    sizes: iiifInfo.imageInfo.sizes === undefined ? undefined : iiifInfo.imageInfo.sizes.map(function(size) {\n      return [size.width, size.height];\n    }),\n    tileSize: iiifInfo.imageInfo.tiles === undefined ? undefined : [\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.width;\n      })[0],\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.height === undefined ? tile.width : tile.height;\n      })[0]\n    ],\n    resolutions: iiifInfo.imageInfo.tiles === undefined ? undefined :\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.scaleFactors;\n      })[0],\n    supports: [...levelProfile.supports, ...profileSupports],\n    formats: [...levelProfile.formats, ...profileFormats],\n    qualities: [...levelProfile.qualities, ...profileQualities]\n  };\n}\n\nfunction generateVersion3Options(iiifInfo) {\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\n      formats = iiifInfo.imageInfo.extraFormats === undefined ? levelProfile.formats :\n        [...levelProfile.formats, ...iiifInfo.imageInfo.extraFormats],\n      preferredFormat = iiifInfo.imageInfo.preferredFormats !== undefined && Array.isArray(iiifInfo.imageInfo.preferredFormats) &&\n        iiifInfo.imageInfo.preferredFormats.length > 0 ?\n        iiifInfo.imageInfo.preferredFormats.filter(function(format) {\n          return ['jpg', 'png', 'gif'].includes(format);\n        }).reduce(function(acc, format) {\n          return acc === undefined && formats.includes(format) ? format : acc;\n        }, undefined) : undefined;\n  return {\n    url: iiifInfo.imageInfo['id'],\n    sizes: iiifInfo.imageInfo.sizes === undefined ? undefined : iiifInfo.imageInfo.sizes.map(function(size) {\n      return [size.width, size.height];\n    }),\n    tileSize: iiifInfo.imageInfo.tiles === undefined ? undefined : [\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.width;\n      })[0],\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.height;\n      })[0]\n    ],\n    resolutions: iiifInfo.imageInfo.tiles === undefined ? undefined :\n      iiifInfo.imageInfo.tiles.map(function(tile) {\n        return tile.scaleFactors;\n      })[0],\n    supports: iiifInfo.imageInfo.extraFeatures === undefined ? levelProfile.supports :\n      [...levelProfile.supports, ...iiifInfo.imageInfo.extraFeatures],\n    formats: formats,\n    qualities: iiifInfo.imageInfo.extraQualities === undefined ? levelProfile.qualities :\n      [...levelProfile.qualities, ...iiifInfo.imageInfo.extraQualities],\n    preferredFormat: preferredFormat\n  };\n}\n\nconst versionFunctions = {};\nversionFunctions[Versions.VERSION1] = generateVersion1Options;\nversionFunctions[Versions.VERSION2] = generateVersion2Options;\nversionFunctions[Versions.VERSION3] = generateVersion3Options;\n\n/**\n * @classdesc\n * Format for transforming IIIF Image API image information responses into\n * IIIF tile source ready options\n *\n * @api\n */\nclass IIIFInfo {\n\n  /**\n   * @param {string|ImageInformationResponse1_0|ImageInformationResponse1_1|ImageInformationResponse2|ImageInformationResponse3} imageInfo\n   * Deserialized image information JSON response object or JSON response as string\n   */\n  constructor(imageInfo) {\n    this.setImageInfo(imageInfo);\n  }\n\n  /**\n   * @param {string|ImageInformationResponse1_0|ImageInformationResponse1_1|ImageInformationResponse2|ImageInformationResponse3} imageInfo\n   * Deserialized image information JSON response object or JSON response as string\n   * @api\n   */\n  setImageInfo(imageInfo) {\n    if (typeof imageInfo == 'string') {\n      this.imageInfo = JSON.parse(imageInfo);\n    } else {\n      this.imageInfo = imageInfo;\n    }\n  }\n\n  /**\n   * @returns {Versions} Major IIIF version.\n   * @api\n   */\n  getImageApiVersion() {\n    if (this.imageInfo === undefined) {\n      return;\n    }\n    let context = this.imageInfo['@context'] || 'ol-no-context';\n    if (typeof context == 'string') {\n      context = [context];\n    }\n    for (let i = 0; i < context.length; i++) {\n      switch (context[i]) {\n        case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':\n        case 'http://iiif.io/api/image/1/context.json':\n          return Versions.VERSION1;\n        case 'http://iiif.io/api/image/2/context.json':\n          return Versions.VERSION2;\n        case 'http://iiif.io/api/image/3/context.json':\n          return Versions.VERSION3;\n        case 'ol-no-context':\n          // Image API 1.0 has no '@context'\n          if (this.getComplianceLevelEntryFromProfile(Versions.VERSION1) && this.imageInfo.identifier) {\n            return Versions.VERSION1;\n          }\n          break;\n        default:\n      }\n    }\n    assert(false, 61);\n  }\n\n  /**\n   * @param {Versions} version Optional IIIF image API version\n   * @returns {string} Compliance level as it appears in the IIIF image information\n   * response.\n   */\n  getComplianceLevelEntryFromProfile(version) {\n    if (this.imageInfo === undefined || this.imageInfo.profile === undefined) {\n      return;\n    }\n    if (version === undefined) {\n      version = this.getImageApiVersion();\n    }\n    switch (version) {\n      case Versions.VERSION1:\n        if (COMPLIANCE_VERSION1.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        break;\n      case Versions.VERSION3:\n        if (COMPLIANCE_VERSION3.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        break;\n      case Versions.VERSION2:\n        if (typeof this.imageInfo.profile === 'string' && COMPLIANCE_VERSION2.test(this.imageInfo.profile)) {\n          return this.imageInfo.profile;\n        }\n        if (Array.isArray(this.imageInfo.profile) && this.imageInfo.profile.length > 0\n          && typeof this.imageInfo.profile[0] === 'string' && COMPLIANCE_VERSION2.test(this.imageInfo.profile[0])) {\n          return this.imageInfo.profile[0];\n        }\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {Versions} version Optional IIIF image API version\n   * @returns {string} Compliance level, on of 'level0', 'level1' or 'level2' or undefined\n   */\n  getComplianceLevelFromProfile(version) {\n    const complianceLevel = this.getComplianceLevelEntryFromProfile(version);\n    if (complianceLevel === undefined) {\n      return undefined;\n    }\n    const level = complianceLevel.match(/level[0-2](\\.json)?$/g);\n    return Array.isArray(level) ? level[0].replace('.json', '') : undefined;\n  }\n\n  /**\n   * @returns {SupportedFeatures} Image formats, qualities and region / size calculation\n   * methods that are supported by the IIIF service.\n   */\n  getComplianceLevelSupportedFeatures() {\n    if (this.imageInfo === undefined) {\n      return;\n    }\n    const version = this.getImageApiVersion();\n    const level = this.getComplianceLevelFromProfile(version);\n    if (level === undefined) {\n      return IIIF_PROFILE_VALUES['none']['none'];\n    }\n    return IIIF_PROFILE_VALUES[version][level];\n  }\n\n  /**\n   * @param {PreferredOptions} opt_preferredOptions Optional options for preferred format and quality.\n   * @returns {import(\"../source/IIIF.js\").Options} IIIF tile source ready constructor options.\n   * @api\n   */\n  getTileSourceOptions(opt_preferredOptions) {\n    const options = opt_preferredOptions || {},\n        version = this.getImageApiVersion();\n    if (version === undefined) {\n      return;\n    }\n    const imageOptions = version === undefined ? undefined : versionFunctions[version](this);\n    if (imageOptions === undefined) {\n      return;\n    }\n    return {\n      url: imageOptions.url,\n      version: version,\n      size: [this.imageInfo.width, this.imageInfo.height],\n      sizes: imageOptions.sizes,\n      format: options.format !== undefined && imageOptions.formats.includes(options.format) ? options.format :\n        imageOptions.preferredFormat !== undefined ? imageOptions.preferredFormat : 'jpg',\n      supports: imageOptions.supports,\n      quality: options.quality && imageOptions.qualities.includes(options.quality) ?\n        options.quality : imageOptions.qualities.includes('native') ? 'native' : 'default',\n      resolutions: Array.isArray(imageOptions.resolutions) ? imageOptions.resolutions.sort(function(a, b) {\n        return b - a;\n      }) : undefined,\n      tileSize: imageOptions.tileSize\n    };\n  }\n\n}\n\nexport default IIIFInfo;\nexport {Versions};\n","/**\n * @module ol/source/IIIF\n */\n\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport {getTopLeft} from '../extent.js';\nimport {CustomTile} from './Zoomify.js';\nimport {Versions} from '../format/IIIFInfo.js';\nimport {assert} from '../asserts.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {null|string} [crossOrigin]\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]]\n * @property {string} [format='jpg'] Requested image format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {import(\"../size.js\").Size[]} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio]\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition]\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number} [zDirection] Indicate which resolution should be used\n * by a renderer if the views resolution does not match any resolution of the tile source.\n * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n * will be used. If -1, the nearest higher resolution will be used.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {maximumFractionDigits: 10});\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n\n  /**\n   * @param {Options} opt_options Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(opt_options) {\n\n    /**\n     * @type {Partial<Options>}\n     */\n    const options = opt_options || {};\n\n    let baseUrl = options.url || '';\n    baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n    const version = options.version || Versions.VERSION2;\n    const sizes = options.sizes || [];\n    const size = options.size;\n    assert(size != undefined && Array.isArray(size) && size.length == 2 &&\n      !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 60);\n    const width = size[0];\n    const height = size[1];\n    const tileSize = options.tileSize;\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const format = options.format || 'jpg';\n    const quality = options.quality || (options.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = options.resolutions || [];\n    const supports = options.supports || [];\n    const extent = options.extent || [0, -height, width, 0];\n\n    const supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles = tileSize != undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n    const supportsArbitraryTiling = supports != undefined && Array.isArray(supports) &&\n      (supports.includes('regionByPx') || supports.includes('regionByPct')) &&\n      (supports.includes('sizeByWh') || supports.includes('sizeByH') ||\n      supports.includes('sizeByW') || supports.includes('sizeByPct'));\n\n    let tileWidth,\n        tileHeight,\n        maxZoom;\n\n    resolutions.sort(function(a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(\n          Math.ceil(Math.log(width / tileWidth) / Math.LN2),\n          Math.ceil(Math.log(height / tileHeight) / Math.LN2)\n        );\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function(a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n\n    const tileUrlFunction = function(tileCoord, pixelRatio, projection) {\n      let regionParam,\n          sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n          tileY = tileCoord[2],\n          scale = resolutions[zoom];\n      if (tileX === undefined || tileY === undefined || scale === undefined ||\n      tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX ||\n      tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n            regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n            regionH = tileHeight * scale,\n            sizeW = tileWidth,\n            sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (!supportsArbitraryTiling || supports.includes('regionByPx')) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage(regionX / width * 100),\n              pctY = formatPercentage(regionY / height * 100),\n              pctW = formatPercentage(regionW / width * 100),\n              pctH = formatPercentage(regionH / height * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (version == Versions.VERSION3 && (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n              regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n    };\n\n    const IiifTileClass = CustomTile.bind(null, tilePixelRatio, tileGrid);\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: options.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    });\n\n    /**\n     * @inheritDoc\n     */\n    this.zDirection = options.zDirection;\n\n  }\n\n}\n\nexport default IIIF;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport IIIF from '../src/ol/source/IIIF.js';\nimport IIIFInfo from '../src/ol/format/IIIFInfo.js';\n\nconst layer = new TileLayer(),\n    map = new Map({\n      layers: [layer],\n      target: 'map'\n    }),\n    notifyDiv = document.getElementById('iiif-notification'),\n    urlInput = document.getElementById('imageInfoUrl'),\n    displayButton = document.getElementById('display');\n\nfunction refreshMap(imageInfoUrl) {\n  fetch(imageInfoUrl).then(function(response) {\n    response.json().then(function(imageInfo) {\n      const options = new IIIFInfo(imageInfo).getTileSourceOptions();\n      if (options === undefined || options.version === undefined) {\n        notifyDiv.textContent = 'Data seems to be no valid IIIF image information.';\n        return;\n      }\n      options.zDirection = -1;\n      const iiifTileSource = new IIIF(options);\n      layer.setSource(iiifTileSource);\n      map.setView(new View({\n        resolutions: iiifTileSource.getTileGrid().getResolutions(),\n        extent: iiifTileSource.getTileGrid().getExtent(),\n        constrainOnlyCenter: true\n      }));\n      map.getView().fit(iiifTileSource.getTileGrid().getExtent());\n      notifyDiv.textContent = '';\n    }).catch(function(body) {\n      notifyDiv.textContent = 'Could not read image info json. ' + body;\n    });\n  }).catch(function() {\n    notifyDiv.textContent = 'Could not read data from URL.';\n  });\n}\n\ndisplayButton.addEventListener('click', function() {\n  refreshMap(urlInput.value);\n});\n\nrefreshMap(urlInput.value);\n"],"sourceRoot":""}