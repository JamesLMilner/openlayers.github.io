{"version":3,"sources":["webpack:///./feature-animation.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_Observable_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_control_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_easing_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_geom_Point_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_11__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_12__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_13__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_14__","map","layers","source","wrapX","controls","Object","attributionOptions","collapsible","target","view","center","zoom","vector","addLayer","const","duration","on","e","feature","start","Date","getTime","listenerKey","event","vectorContext","frameState","flashGeom","getGeometry","clone","elapsed","time","elapsedRatio","radius","opacity","style","image","stroke","color","width","setStyle","drawGeometry","render","flash","window","setInterval","x","Math","random","y","geom","addFeature"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,IAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,KAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,KAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,GAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,GAAAa,EAAAb,EAAA,GAAAc,EAAAd,EAAA,IAAAe,EAAAf,EAAA,IAAAgB,EAAAhB,EAAA,KAAAiB,EAAAjB,EAAA,IAaMkB,EAAM,IAAId,EAAA,GACde,QACE,IAAIT,EAAA,GACFU,OAAQ,IAAIP,EAAA,GACVQ,OAAO,OAIbC,SAAUC,OAAAhB,EAAA,EAAAgB,EACRC,oBACEC,aAAa,KAGjBC,OAAQ,MACRC,KAAM,IAAIrB,EAAA,GACRsB,QAAS,EAAG,GACZC,KAAM,MAIJT,EAAS,IAAIN,EAAA,GACjBO,OAAO,IAEHS,EAAS,IAAInB,EAAA,GACjBS,OAAQA,IAEVF,EAAIa,SAASD,GAUbE,IAAMC,EAAW,IAoCjBb,EAAOc,GAAG,aAAc,SAASC,IAnCjC,SAAeC,GACbJ,IAAMK,GAAQ,IAAIC,MAAOC,UACnBC,EAActB,EAAIgB,GAAG,cAE3B,SAAiBO,GACfT,IAAMU,EAAgBD,EAAMC,cACtBC,EAAaF,EAAME,WACnBC,EAAYR,EAAQS,cAAcC,QAClCC,EAAUJ,EAAWK,KAAOX,EAC5BY,EAAeF,EAAUd,EAEzBiB,EAAiC,GAAxB3B,OAAAf,EAAA,EAAAe,CAAQ0B,GAAqB,EACtCE,EAAU5B,OAAAf,EAAA,EAAAe,CAAQ,EAAI0B,GAEtBG,EAAQ,IAAIrC,EAAA,GAChBsC,MAAO,IAAIrC,EAAA,GACTkC,OAAQA,EACRI,OAAQ,IAAIrC,EAAA,GACVsC,MAAO,mBAAqBJ,EAAU,IACtCK,MAAO,IAAOL,QAKpBT,EAAce,SAASL,GACvBV,EAAcgB,aAAad,GACvBG,EAAUd,EACZV,OAAAlB,EAAA,EAAAkB,CAAQiB,GAIVtB,EAAIyC,WAKNC,CAAMzB,EAAEC,WAGVyB,OAAOC,YAhDP,WACE9B,IAAM+B,EAAoB,IAAhBC,KAAKC,SAAiB,IAC1BC,EAAoB,IAAhBF,KAAKC,SAAiB,GAC1BE,EAAO,IAAI1D,EAAA,EAAMc,OAAAX,EAAA,EAAAW,EAAYwC,EAAGG,KAChC9B,EAAU,IAAIjC,EAAA,EAAQgE,GAC5B/C,EAAOgD,WAAWhC,IA2CiB","file":"feature-animation.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport {unByKey} from '../src/ol/Observable.js';\nimport View from '../src/ol/View.js';\nimport {defaults as defaultControls} from '../src/ol/control.js';\nimport {easeOut} from '../src/ol/easing.js';\nimport Point from '../src/ol/geom/Point.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {fromLonLat} from '../src/ol/proj.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\nimport {Circle as CircleStyle, Stroke, Style} from '../src/ol/style.js';\n\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM({\n        wrapX: false\n      })\n    })\n  ],\n  controls: defaultControls({\n    attributionOptions: {\n      collapsible: false\n    }\n  }),\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 1\n  })\n});\n\nconst source = new VectorSource({\n  wrapX: false\n});\nconst vector = new VectorLayer({\n  source: source\n});\nmap.addLayer(vector);\n\nfunction addRandomFeature() {\n  const x = Math.random() * 360 - 180;\n  const y = Math.random() * 180 - 90;\n  const geom = new Point(fromLonLat([x, y]));\n  const feature = new Feature(geom);\n  source.addFeature(feature);\n}\n\nconst duration = 3000;\nfunction flash(feature) {\n  const start = new Date().getTime();\n  const listenerKey = map.on('postcompose', animate);\n\n  function animate(event) {\n    const vectorContext = event.vectorContext;\n    const frameState = event.frameState;\n    const flashGeom = feature.getGeometry().clone();\n    const elapsed = frameState.time - start;\n    const elapsedRatio = elapsed / duration;\n    // radius will be 5 at start and 30 at end.\n    const radius = easeOut(elapsedRatio) * 25 + 5;\n    const opacity = easeOut(1 - elapsedRatio);\n\n    const style = new Style({\n      image: new CircleStyle({\n        radius: radius,\n        stroke: new Stroke({\n          color: 'rgba(255, 0, 0, ' + opacity + ')',\n          width: 0.25 + opacity\n        })\n      })\n    });\n\n    vectorContext.setStyle(style);\n    vectorContext.drawGeometry(flashGeom);\n    if (elapsed > duration) {\n      unByKey(listenerKey);\n      return;\n    }\n    // tell OpenLayers to continue postcompose animation\n    map.render();\n  }\n}\n\nsource.on('addfeature', function(e) {\n  flash(e.feature);\n});\n\nwindow.setInterval(addRandomFeature, 1000);\n"],"sourceRoot":""}