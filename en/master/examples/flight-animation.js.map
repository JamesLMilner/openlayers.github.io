{"version":3,"sources":["webpack:///./flight-animation.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Feature_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_geom_LineString_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_source_Stamen_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_render_js__WEBPACK_IMPORTED_MODULE_10__","tileLayer","source","layer","map","layers","target","view","center","zoom","style","stroke","color","width","flightsSource","wrapX","attributions","loader","fetch","then","response","json","const","flightsData","flights","i","length","flight","from","to","arcLine","arc","GreatCircle","x","y","Arc","offset","geometries","line","coords","transform","addLater","geometry","finished","on","animateFlights","flightsLayer","feature","get","addLayer","pointsPerMs","event","vectorContext","Object","frameState","setStyle","features","getFeatures","getGeometry","getCoordinates","elapsedPoints","time","set","maxIndex","Math","min","currentLine","slice","drawGeometry","render","timeout","window","setTimeout","Date","getTime","addFeature"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,IAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IAAAa,EAAAb,EAAA,IAUMc,EAAY,IAAIP,EAAA,EAAU,CAC9BQ,OAAQ,IAAIN,EAAA,EAAO,CACjBO,MAAO,YAILC,EAAM,IAAIb,EAAA,EAAI,CAClBc,OAAQ,CACNJ,GAEFK,OAAQ,MACRC,KAAM,IAAIf,EAAA,EAAK,CACbgB,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAQ,IAAIZ,EAAA,EAAM,CACtBa,OAAQ,IAAIZ,EAAA,EAAO,CACjBa,MAAO,UACPC,MAAO,MAILC,EAAgB,IAAIjB,EAAA,EAAa,CACrCkB,OAAO,EACPC,aAAc,6EAEdC,OAAQ,WAENC,MADY,iCACDC,KAAK,SAASC,GACvB,OAAOA,EAASC,SACfF,KAAK,SAASE,GAEf,IADAC,IAAMC,EAAcF,EAAKG,QAChBC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CAC3CH,IAAMK,EAASJ,EAAYE,GACrBG,EAAOD,EAAO,GACdE,EAAKF,EAAO,GAOZG,EAJe,IAAIC,IAAIC,YAC3B,CAACC,EAAGL,EAAK,GAAIM,EAAGN,EAAK,IACrB,CAACK,EAAGJ,EAAG,GAAIK,EAAGL,EAAG,KAEUM,IAAI,IAAK,CAACC,OAAQ,KAC/C,GAAkC,IAA9BN,EAAQO,WAAWX,OAAc,CACnCJ,IAAMgB,EAAO,IAAI7C,EAAA,EAAWqC,EAAQO,WAAW,GAAGE,QAClDD,EAAKE,UAAU,YAAa,aAQ5BC,EANgB,IAAInD,EAAA,EAAQ,CAC1BoD,SAAUJ,EACVK,UAAU,IAIU,GAAJlB,IAGtBxB,EAAU2C,GAAG,aAAcC,QAK3BC,EAAe,IAAInD,EAAA,EAAY,CACnCO,OAAQY,EACRJ,MAAO,SAASqC,GAGd,OAAIA,EAAQC,IAAI,YACPtC,EAEA,QAKbN,EAAI6C,SAASH,GAEbxB,IAAM4B,EAAc,GACpB,SAASL,EAAeM,GACtB7B,IAAM8B,EAAgBC,OAAArD,EAAA,EAAAqD,CAAiBF,GACjCG,EAAaH,EAAMG,WACzBF,EAAcG,SAAS7C,GAGvB,IADAY,IAAMkC,EAAW1C,EAAc2C,cACtBhC,EAAI,EAAGA,EAAI+B,EAAS9B,OAAQD,IAAK,CACxCH,IAAMyB,EAAUS,EAAS/B,GACzB,IAAKsB,EAAQC,IAAI,YAAa,CAE5B1B,IAAMiB,EAASQ,EAAQW,cAAcC,iBAE/BC,GADcN,EAAWO,KAAOd,EAAQC,IAAI,UACdE,EAEhCU,GAAiBrB,EAAOb,QAC1BqB,EAAQe,IAAI,YAAY,GAG1BxC,IAAMyC,EAAWC,KAAKC,IAAIL,EAAerB,EAAOb,QAC1CwC,EAAc,IAAIzE,EAAA,EAAW8C,EAAO4B,MAAM,EAAGJ,IAGnDX,EAAcgB,aAAaF,IAI/B9D,EAAIiE,SAGN,SAAS5B,EAASM,EAASuB,GACzBC,OAAOC,WAAW,WAChBzB,EAAQe,IAAI,SAAS,IAAIW,MAAOC,WAChC5D,EAAc6D,WAAW5B,IACxBuB","file":"flight-animation.js","sourcesContent":["import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport LineString from '../src/ol/geom/LineString.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport Stamen from '../src/ol/source/Stamen.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Stroke, Style} from '../src/ol/style.js';\nimport {getVectorContext} from '../src/ol/render.js';\n\nconst tileLayer = new TileLayer({\n  source: new Stamen({\n    layer: 'toner'\n  })\n});\n\nconst map = new Map({\n  layers: [\n    tileLayer\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst style = new Style({\n  stroke: new Stroke({\n    color: '#EAE911',\n    width: 2\n  })\n});\n\nconst flightsSource = new VectorSource({\n  wrapX: false,\n  attributions: 'Flight data by ' +\n        '<a href=\"http://openflights.org/data.html\">OpenFlights</a>,',\n  loader: function() {\n    const url = 'data/openflights/flights.json';\n    fetch(url).then(function(response) {\n      return response.json();\n    }).then(function(json) {\n      const flightsData = json.flights;\n      for (let i = 0; i < flightsData.length; i++) {\n        const flight = flightsData[i];\n        const from = flight[0];\n        const to = flight[1];\n\n        // create an arc circle between the two locations\n        const arcGenerator = new arc.GreatCircle(\n          {x: from[1], y: from[0]},\n          {x: to[1], y: to[0]});\n\n        const arcLine = arcGenerator.Arc(100, {offset: 10});\n        if (arcLine.geometries.length === 1) {\n          const line = new LineString(arcLine.geometries[0].coords);\n          line.transform('EPSG:4326', 'EPSG:3857');\n\n          const feature = new Feature({\n            geometry: line,\n            finished: false\n          });\n          // add the feature with a delay so that the animation\n          // for all features does not start at the same time\n          addLater(feature, i * 50);\n        }\n      }\n      tileLayer.on('postrender', animateFlights);\n    });\n  }\n});\n\nconst flightsLayer = new VectorLayer({\n  source: flightsSource,\n  style: function(feature) {\n    // if the animation is still active for a feature, do not\n    // render the feature with the layer style\n    if (feature.get('finished')) {\n      return style;\n    } else {\n      return null;\n    }\n  }\n});\n\nmap.addLayer(flightsLayer);\n\nconst pointsPerMs = 0.1;\nfunction animateFlights(event) {\n  const vectorContext = getVectorContext(event);\n  const frameState = event.frameState;\n  vectorContext.setStyle(style);\n\n  const features = flightsSource.getFeatures();\n  for (let i = 0; i < features.length; i++) {\n    const feature = features[i];\n    if (!feature.get('finished')) {\n      // only draw the lines for which the animation has not finished yet\n      const coords = feature.getGeometry().getCoordinates();\n      const elapsedTime = frameState.time - feature.get('start');\n      const elapsedPoints = elapsedTime * pointsPerMs;\n\n      if (elapsedPoints >= coords.length) {\n        feature.set('finished', true);\n      }\n\n      const maxIndex = Math.min(elapsedPoints, coords.length);\n      const currentLine = new LineString(coords.slice(0, maxIndex));\n\n      // directly draw the line with the vector context\n      vectorContext.drawGeometry(currentLine);\n    }\n  }\n  // tell OpenLayers to continue the animation\n  map.render();\n}\n\nfunction addLater(feature, timeout) {\n  window.setTimeout(function() {\n    feature.set('start', new Date().getTime());\n    flightsSource.addFeature(feature);\n  }, timeout);\n}\n"],"sourceRoot":""}