{"version":3,"sources":["webpack:///./zoomify.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_layer_Tile_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_source_Zoomify_js__WEBPACK_IMPORTED_MODULE_3__","zoomifyUrl","layer","source","tileSize","tilePixelRatio","url","size","crossOrigin","extent","resolutions","getSource","getTileGrid","getResolutions","map","layers","target","view","minResolution","length","maxResolution","getView","fit","document","getElementById","addEventListener","event","const","value","currentTarget","setSource","setView","imgHeight"],"mappings":"4FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,KAQMO,EAAa,2FAIbC,EAAQ,IAAIH,EAAA,EAAU,CAC1BI,OAAQ,IAAIH,EAAA,EAAQ,CAClBI,SAAU,IACVC,eAAgB,EAChBC,IAAKL,EACLM,KAAM,CAZO,KACC,MAYdC,YAAa,gBAIXC,EAAS,CAAC,GAhBE,KADD,KAiBwB,GAEnCC,EAAcR,EAAMS,YAAYC,cAAcC,iBAE9CC,EAAM,IAAIjB,EAAA,EAAI,CAClBkB,OAAQ,CAACb,GACTc,OAAQ,MACRC,KAAM,IAAInB,EAAA,EAAK,CAEboB,cAAeR,EAAYA,EAAYS,OAAS,GAChDC,cAAeV,EAAY,GAE3BD,OAAQA,MAGZK,EAAIO,UAAUC,IAAIb,GAEFc,SAASC,eAAe,mBAChCC,iBAAiB,SAAU,SAASC,GAC1CC,IAAMC,EAAQF,EAAMG,cAAcD,MAClC,GAAc,QAAVA,EAAiB,CACnBD,IAAMlB,EAAS,CAAC,GArCF,KADD,KAsC4B,GACzCP,EAAM4B,UACJ,IAAI9B,EAAA,EAAQ,CACVI,SAAU,IACVC,eAAgB,EAChBC,IAtCO,0GAuCPC,KAAM,CA5CG,KACC,MA4CVC,YAAa,eAGjBmB,IAAMjB,EAAcR,EAAMS,YAAYC,cAAcC,iBACpDC,EAAIiB,QACF,IAAIjC,EAAA,EAAK,CAEPoB,cAAeR,EAAYA,EAAYS,OAAS,GAChDC,cAAeV,EAAY,GAE3BD,OAAQA,KAGZK,EAAIO,UAAUC,IAAIb,QACb,GAAc,YAAVmB,EAAqB,CAC9BD,IAAMlB,EAAS,CAAC,GA3DF,KADD,KA4D4B,GACzCP,EAAM4B,UACJ,IAAI9B,EAAA,EAAQ,CACVI,SAAU,IACVC,eAAgB,EAChBC,IAAKL,EACLM,KAAM,CAlEG,KACC,MAkEVC,YAAa,eAGjBmB,IAAMjB,EAAcR,EAAMS,YAAYC,cAAcC,iBACpDC,EAAIiB,QACF,IAAIjC,EAAA,EAAK,CAEPoB,cAAeR,EAAYA,EAAYS,OAAS,GAChDC,cAAeV,EAAY,GAE3BD,OAAQA,KAGZK,EAAIO,UAAUC,IAAIb,QACb,GAAc,kBAAVmB,EAA2B,CACpCD,IAEMlB,EAAS,CAAC,GAAG,KApFN,KAkFM,EAEgD,GACnEP,EAAM4B,UACJ,IAAI9B,EAAA,EAAQ,CACVI,SAAU,GACVC,eANe,EAOfC,IAAKL,EACLM,KAAM,CA1FG,KAkFM,EAQeyB,MAC9BxB,YAAa,eAGjBmB,IAAMjB,EAAcR,EAAMS,YAAYC,cAAcC,iBACpDC,EAAIiB,QACF,IAAIjC,EAAA,EAAK,CAEPoB,cAAeR,EAAYA,EAAYS,OAAS,GAhBjC,EAiBfC,cAAeV,EAAY,GAE3BD,OAAQA,KAGZK,EAAIO,UAAUC,IAAIb","file":"zoomify.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport Zoomify from '../src/ol/source/Zoomify.js';\n\nconst imgWidth = 9911;\nconst imgHeight = 6100;\n\nconst zoomifyUrl = 'http://vips.vtech.fr/cgi-bin/iipsrv.fcgi?zoomify=' +\n    '/mnt/MD1/AD00/plan_CHU-4HD-01/FOND.TIF/';\nconst iipUrl = 'http://vips.vtech.fr/cgi-bin/iipsrv.fcgi?FIF=' + '/mnt/MD1/AD00/plan_CHU-4HD-01/FOND.TIF' + '&JTL={z},{tileIndex}';\n\nconst layer = new TileLayer({\n  source: new Zoomify({\n    tileSize: 256,\n    tilePixelRatio: 1,\n    url: zoomifyUrl,\n    size: [imgWidth, imgHeight],\n    crossOrigin: 'anonymous'\n  })\n});\n\nconst extent = [0, -imgHeight, imgWidth, 0];\n\nconst resolutions = layer.getSource().getTileGrid().getResolutions();\n\nconst map = new Map({\n  layers: [layer],\n  target: 'map',\n  view: new View({\n    // adjust zoom levels to those provided by the source\n    minResolution: resolutions[resolutions.length - 1],\n    maxResolution: resolutions[0],\n    // constrain the center: center cannot be set outside this extent\n    extent: extent\n  })\n});\nmap.getView().fit(extent);\n\nconst control = document.getElementById('zoomifyProtocol');\ncontrol.addEventListener('change', function(event) {\n  const value = event.currentTarget.value;\n  if (value === 'iip') {\n    const extent = [0, -imgHeight, imgWidth, 0];\n    layer.setSource(\n      new Zoomify({\n        tileSize: 256,\n        tilePixelRatio: 1,\n        url: iipUrl,\n        size: [imgWidth, imgHeight],\n        crossOrigin: 'anonymous'\n      })\n    );\n    const resolutions = layer.getSource().getTileGrid().getResolutions();\n    map.setView(\n      new View({\n        // adjust zoom levels to those provided by the source\n        minResolution: resolutions[resolutions.length - 1],\n        maxResolution: resolutions[0],\n        // constrain the center: center cannot be set outside this extent\n        extent: extent\n      })\n    );\n    map.getView().fit(extent);\n  } else if (value === 'zoomify') {\n    const extent = [0, -imgHeight, imgWidth, 0];\n    layer.setSource(\n      new Zoomify({\n        tileSize: 256,\n        tilePixelRatio: 1,\n        url: zoomifyUrl,\n        size: [imgWidth, imgHeight],\n        crossOrigin: 'anonymous'\n      })\n    );\n    const resolutions = layer.getSource().getTileGrid().getResolutions();\n    map.setView(\n      new View({\n        // adjust zoom levels to those provided by the source\n        minResolution: resolutions[resolutions.length - 1],\n        maxResolution: resolutions[0],\n        // constrain the center: center cannot be set outside this extent\n        extent: extent\n      })\n    );\n    map.getView().fit(extent);\n  } else if (value === 'zoomifyretina') {\n    const pixelRatio = 4;\n    // Be careful! Image extent will be modified by pixel ratio\n    const extent = [0, -imgHeight / pixelRatio, imgWidth / pixelRatio, 0];\n    layer.setSource(\n      new Zoomify({\n        tileSize: 256 / pixelRatio,\n        tilePixelRatio: pixelRatio,\n        url: zoomifyUrl,\n        size: [imgWidth / pixelRatio, imgHeight / pixelRatio],\n        crossOrigin: 'anonymous'\n      })\n    );\n    const resolutions = layer.getSource().getTileGrid().getResolutions();\n    map.setView(\n      new View({\n        // adjust zoom levels to those provided by the source\n        minResolution: resolutions[resolutions.length - 1] / pixelRatio,\n        maxResolution: resolutions[0],\n        // constrain the center: center cannot be set outside this extent\n        extent: extent\n      })\n    );\n    map.getView().fit(extent);\n  }\n\n});\n"],"sourceRoot":""}