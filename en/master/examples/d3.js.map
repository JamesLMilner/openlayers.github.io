{"version":3,"sources":["webpack:///./d3.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_extent_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_State__WEBPACK_IMPORTED_MODULE_5__","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_Stamen_js__WEBPACK_IMPORTED_MODULE_7__","CanvasLayer","Layer","options","super","this","features","svg","d3","select","document","createElement","append","style","datum","attr","getSourceState","READY","render","frameState","const","width","size","height","projection","viewState","d3Projection","geoMercator","scale","translate","d3Path","geoPath","pixelBounds","bounds","pixelBoundsWidth","pixelBoundsHeight","geoBounds","geoBoundsLeftBottom","Object","geoBoundsRightTop","geoBoundsWidth","getExtent","widthResolution","heightResolution","Math","max","resolution","center","extent","node","map","layers","source","layer","target","view","zoom","json","error","us","topojson","feature","objects","counties","addLayer"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,GAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,GAAAU,EAAAV,EAAA,IAQMW,EAAyB,SAAAC,GAE7B,SAAAD,EAAYE,GACVC,OAAKC,KAACF,GAENE,KAAKC,SAAWH,EAAQG,SAExBD,KAAKE,IAAMC,GAAGC,OAAOC,SAASC,cAAc,QAAQC,OAAO,OACxDC,MAAM,WAAY,YAErBR,KAAKE,IAAIK,OAAO,QACbE,MAAMT,KAAKC,UACXS,KAAK,QAAS,sHAGnBC,eAAA,WACE,OAAOlB,EAAA,EAAYmB,mBAGrBC,OAAA,SAAOC,GACLC,IAAMC,EAAQF,EAAWG,KAAK,GACxBC,EAASJ,EAAWG,KAAK,GACzBE,EAAaL,EAAWM,UAAUD,WAClCE,EAAelB,GAAGmB,cAAcC,MAAM,GAAGC,UAAU,CAAC,EAAG,IACzDC,EAAStB,GAAGuB,UAAUP,WAAWE,GAE/BM,EAAcF,EAAOG,OAAO5B,KAAKC,UACjC4B,EAAmBF,EAAY,GAAG,GAAKA,EAAY,GAAG,GACtDG,EAAoBH,EAAY,GAAG,GAAKA,EAAY,GAAG,GAEvDI,EAAY5B,GAAG4B,UAAU/B,KAAKC,UAC9B+B,EAAsBC,OAAAvC,EAAA,EAAAuC,CAAWF,EAAU,GAAIZ,GAC/Ce,EAAoBD,OAAAvC,EAAA,EAAAuC,CAAWF,EAAU,GAAIZ,GAC/CgB,EAAiBD,EAAkB,GAAKF,EAAoB,GAC5DG,EAAiB,IACnBA,GAAkBF,OAAA3C,EAAA,EAAA2C,CAASd,EAAWiB,cAExCrB,IAEMsB,EAAkBF,EAAiBN,EACnCS,GAHkBJ,EAAkB,GAAKF,EAAoB,IAGxBF,EAErCP,EADIgB,KAAKC,IAAIH,EAAiBC,GAClBxB,EAAWM,UAAUqB,WAEjCC,EAAST,OAAAvC,EAAA,EAAAuC,CAASA,OAAA3C,EAAA,EAAA2C,CAAUnB,EAAW6B,QAASxB,GAYtD,OAXAE,EAAaE,MAAMA,GAAOmB,OAAOA,GAAQlB,UAAU,CAACR,EAAQ,EAAGE,EAAS,KAExEO,EAASA,EAAON,WAAWE,IACpBrB,KAAKC,UAEZD,KAAKE,IAAIQ,KAAK,QAASM,GACvBhB,KAAKE,IAAIQ,KAAK,SAAUQ,GAExBlB,KAAKE,IAAIE,OAAO,QACbM,KAAK,IAAKe,GAENzB,KAAKE,IAAI0C,UAxDW,CAALrD,EAAA,GA4DpBsD,EAAM,IAAIzD,EAAA,EAAI,CAClB0D,OAAQ,CACN,IAAItD,EAAA,EAAU,CACZuD,OAAQ,IAAIpD,EAAA,EAAO,CACjBqD,MAAO,kBAIbC,OAAQ,MACRC,KAAM,IAAI7D,EAAA,EAAK,CACbqD,OAAQT,OAAAvC,EAAA,EAAAuC,CAAW,EAAE,GAAI,KACzBkB,KAAM,MAQVhD,GAAGiD,KAAK,wBAAyB,SAASC,EAAOC,GAE/CvC,IAAMiC,EAAQ,IAAIpD,EAAY,CAC5BK,SAAUsD,SAASC,QAAQF,EAAIA,EAAGG,QAAQC,YAG5Cb,EAAIc,SAASX","file":"d3.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {getWidth, getCenter} from '../src/ol/extent.js';\nimport {Layer, Tile as TileLayer} from '../src/ol/layer.js';\nimport SourceState from '../src/ol/source/State';\nimport {fromLonLat, toLonLat} from '../src/ol/proj.js';\nimport Stamen from '../src/ol/source/Stamen.js';\n\nclass CanvasLayer extends Layer {\n\n  constructor(options) {\n    super(options);\n\n    this.features = options.features;\n\n    this.svg = d3.select(document.createElement('div')).append('svg')\n      .style('position', 'absolute');\n\n    this.svg.append('path')\n      .datum(this.features)\n      .attr('class', 'boundary');\n  }\n\n  getSourceState() {\n    return SourceState.READY;\n  }\n\n  render(frameState) {\n    const width = frameState.size[0];\n    const height = frameState.size[1];\n    const projection = frameState.viewState.projection;\n    const d3Projection = d3.geoMercator().scale(1).translate([0, 0]);\n    let d3Path = d3.geoPath().projection(d3Projection);\n\n    const pixelBounds = d3Path.bounds(this.features);\n    const pixelBoundsWidth = pixelBounds[1][0] - pixelBounds[0][0];\n    const pixelBoundsHeight = pixelBounds[1][1] - pixelBounds[0][1];\n\n    const geoBounds = d3.geoBounds(this.features);\n    const geoBoundsLeftBottom = fromLonLat(geoBounds[0], projection);\n    const geoBoundsRightTop = fromLonLat(geoBounds[1], projection);\n    let geoBoundsWidth = geoBoundsRightTop[0] - geoBoundsLeftBottom[0];\n    if (geoBoundsWidth < 0) {\n      geoBoundsWidth += getWidth(projection.getExtent());\n    }\n    const geoBoundsHeight = geoBoundsRightTop[1] - geoBoundsLeftBottom[1];\n\n    const widthResolution = geoBoundsWidth / pixelBoundsWidth;\n    const heightResolution = geoBoundsHeight / pixelBoundsHeight;\n    const r = Math.max(widthResolution, heightResolution);\n    const scale = r / frameState.viewState.resolution;\n\n    const center = toLonLat(getCenter(frameState.extent), projection);\n    d3Projection.scale(scale).center(center).translate([width / 2, height / 2]);\n\n    d3Path = d3Path.projection(d3Projection);\n    d3Path(this.features);\n\n    this.svg.attr('width', width);\n    this.svg.attr('height', height);\n\n    this.svg.select('path')\n      .attr('d', d3Path);\n\n    return this.svg.node();\n  }\n}\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new Stamen({\n        layer: 'watercolor'\n      })\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: fromLonLat([-97, 38]),\n    zoom: 4\n  })\n});\n\n\n/**\n * Load the topojson data and create an ol/layer/Image for that data.\n */\nd3.json('data/topojson/us.json', function(error, us) {\n\n  const layer = new CanvasLayer({\n    features: topojson.feature(us, us.objects.counties)\n  });\n\n  map.addLayer(layer);\n});\n"],"sourceRoot":""}