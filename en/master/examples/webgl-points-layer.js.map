{"version":3,"sources":["webpack:///./webgl-points-layer.js","webpack:///../src/ol/layer/WebGLPoints.js"],"names":["literalStyle","pointsLayer","WebGLPoints","options","const","baseOptions","super","this","parseResult_","style","symbol","createRenderer","vertexShader","params","fragmentShader","uniforms","attributes","vectorSource","Vector","url","format","GeoJSON","predefinedStyles","symbolType","src","size","color","rotateWithView","offset","opacity","map","Map","layers","Tile","source","OSM","target","document","getElementById","view","View","center","zoom","refreshLayer","newStyle","previousLayer","addLayer","removeLayer","spanValid","spanInvalid","setStyleStatus","errorMsg","isError","display","firstElementChild","innerText","editor","addEventListener","textStyle","value","newLiteralStyle","JSON","parse","stringify","e","message","onSelectChange"],"mappings":"uGA8DIA,EACAC,E,8CC6BWC,EA7BqB,YAIlC,WAAYC,GACVC,IAAMC,EAAc,YAAO,GAAIF,GAE/BG,OAAM,KAAAD,GAMNE,KAAKC,aAAe,YAAiBL,EAAQM,MAAMC,Q,0GAMrDC,eAAA,WACE,OAAO,IAAI,IAAyBJ,KAAM,CACxCK,aAAc,YAAsBL,KAAKC,aAAaK,QACtDC,eAAgB,YAAwBP,KAAKC,aAAaK,QAC1DE,SAAUR,KAAKC,aAAaO,SAC5BC,WAAYT,KAAKC,aAAaQ,c,EAxBA,C,MAAL,G,uBDvDzBC,EAAe,IAAIC,EAAA,EAAO,CAC9BC,IAAK,oCACLC,OAAQ,IAAIC,EAAA,IAGRC,EAAmB,CACvB,MAAS,CACPZ,OAAQ,CACNa,WAAY,QACZC,IAAK,gBACLC,KAAM,CAAC,GAAI,IACXC,MAAO,cACPC,gBAAgB,EAChBC,OAAQ,CAAC,EAAG,KAGhB,UAAa,CACXlB,OAAQ,CACNa,WAAY,WACZE,KAAM,GACNC,MAAO,CACL,CAAC,UAAW,CAAC,MAAO,cAAe,IAAO,IAAQ,GAAK,GACvD,CAAC,UAAW,CAAC,MAAO,cAAe,IAAO,IAAQ,GAAK,IACvD,GACA,GAEFC,gBAAgB,IAGpB,QAAW,CACTjB,OAAQ,CACNa,WAAY,SACZE,KAAM,CAAC,UAAW,CAAC,MAAO,cAAe,IAAO,IAAS,EAAG,IAC5DC,MAAO,UACPC,gBAAgB,EAChBC,OAAQ,CAAC,EAAG,GACZC,QAAS,CAAC,UAAW,CAAC,MAAO,cAAe,IAAO,IAAS,GAAK,QAKjEC,EAAM,IAAIC,EAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAA,EAAU,CACZC,OAAQ,IAAIC,EAAA,KAGhBC,OAAQC,SAASC,eAAe,OAChCC,KAAM,IAAIC,EAAA,EAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAMV,SAASC,EAAaC,GACpBxC,IAAMyC,EAAgB5C,EACtBA,EAAc,IAAIC,EAAiB,CACjCgC,OAAQjB,EACRR,MAAOmC,IAETd,EAAIgB,SAAS7C,GAET4C,GACFf,EAAIiB,YAAYF,GAElB7C,EAAe4C,EAGjBxC,IAAM4C,EAAYX,SAASC,eAAe,eACpCW,EAAcZ,SAASC,eAAe,iBAC5C,SAASY,EAAeC,GACtB/C,IAAMgD,EAA8B,iBAAbD,EACvBH,EAAUvC,MAAM4C,QAAuB,OAAbF,EAAoB,UAAY,OAC1DF,EAAYK,kBAAkBC,UAAYH,EAAUD,EAAW,GAC/DF,EAAYxC,MAAM4C,QAAUD,EAAU,UAAY,OAGpDhD,IAAMoD,EAASnB,SAASC,eAAe,gBACvCkB,EAAOC,iBAAiB,QAAS,WAC/BrD,IAAMsD,EAAYF,EAAOG,MACzB,IACEvD,IAAMwD,EAAkBC,KAAKC,MAAMJ,GAC/BG,KAAKE,UAAUH,KAAqBC,KAAKE,UAAU/D,IACrD2C,EAAaiB,GAEfV,EAAe,MACf,MAAOc,GACPd,EAAec,EAAEC,YAIrB7D,IAAM,EAASiC,SAASC,eAAe,gBAEvC,SAAS4B,IACP9D,IAAMK,EAAQ,EAAOkD,MACfC,EAAkBtC,EAAiBb,GACzC+C,EAAOG,MAAQE,KAAKE,UAAUH,EAAiB,KAAM,GACrD,IACEjB,EAAaiB,GACbV,IACA,MAAOc,GACPd,EAAec,EAAEC,UATrB,EAAON,MAAQ,UAYfO,IACA,EAAOT,iBAAiB,SAAUS,K","file":"webgl-points-layer.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport WebGLPointsLayer from '../src/ol/layer/WebGLPoints.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Vector from '../src/ol/source/Vector.js';\nimport OSM from '../src/ol/source/OSM.js';\n\nconst vectorSource = new Vector({\n  url: 'data/geojson/world-cities.geojson',\n  format: new GeoJSON()\n});\n\nconst predefinedStyles = {\n  'icons': {\n    symbol: {\n      symbolType: 'image',\n      src: 'data/icon.png',\n      size: [18, 28],\n      color: 'lightyellow',\n      rotateWithView: false,\n      offset: [0, 9]\n    }\n  },\n  'triangles': {\n    symbol: {\n      symbolType: 'triangle',\n      size: 18,\n      color: [\n        ['stretch', ['get', 'population'], 20000, 300000, 0.1, 1.0],\n        ['stretch', ['get', 'population'], 20000, 300000, 0.6, 0.3],\n        0.6,\n        1.0\n      ],\n      rotateWithView: true\n    }\n  },\n  'circles': {\n    symbol: {\n      symbolType: 'circle',\n      size: ['stretch', ['get', 'population'], 40000, 2000000, 8, 28],\n      color: '#006688',\n      rotateWithView: false,\n      offset: [0, 0],\n      opacity: ['stretch', ['get', 'population'], 40000, 2000000, 0.6, 0.92]\n    }\n  }\n};\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    })\n  ],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nlet literalStyle;\nlet pointsLayer;\nfunction refreshLayer(newStyle) {\n  const previousLayer = pointsLayer;\n  pointsLayer = new WebGLPointsLayer({\n    source: vectorSource,\n    style: newStyle\n  });\n  map.addLayer(pointsLayer);\n\n  if (previousLayer) {\n    map.removeLayer(previousLayer);\n  }\n  literalStyle = newStyle;\n}\n\nconst spanValid = document.getElementById('style-valid');\nconst spanInvalid = document.getElementById('style-invalid');\nfunction setStyleStatus(errorMsg) {\n  const isError = typeof errorMsg === 'string';\n  spanValid.style.display = errorMsg === null ? 'initial' : 'none';\n  spanInvalid.firstElementChild.innerText = isError ? errorMsg : '';\n  spanInvalid.style.display = isError ? 'initial' : 'none';\n}\n\nconst editor = document.getElementById('style-editor');\neditor.addEventListener('input', function() {\n  const textStyle = editor.value;\n  try {\n    const newLiteralStyle = JSON.parse(textStyle);\n    if (JSON.stringify(newLiteralStyle) !== JSON.stringify(literalStyle)) {\n      refreshLayer(newLiteralStyle);\n    }\n    setStyleStatus(null);\n  } catch (e) {\n    setStyleStatus(e.message);\n  }\n});\n\nconst select = document.getElementById('style-select');\nselect.value = 'circles';\nfunction onSelectChange() {\n  const style = select.value;\n  const newLiteralStyle = predefinedStyles[style];\n  editor.value = JSON.stringify(newLiteralStyle, null, 2);\n  try {\n    refreshLayer(newLiteralStyle);\n    setStyleStatus();\n  } catch (e) {\n    setStyleStatus(e.message);\n  }\n}\nonSelectChange();\nselect.addEventListener('change', onSelectChange);\n","/**\n * @module ol/layer/WebGLPoints\n */\nimport {assign} from '../obj.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport {getSymbolFragmentShader, getSymbolVertexShader, parseSymbolStyle} from '../webgl/ShaderBuilder.js';\nimport Layer from './Layer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import('../style/LiteralStyle.js').LiteralStyle} style Literal style to apply to the layer features.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {import(\"../source/Vector.js\").default} [source] Source.\n */\n\n\n/**\n * @classdesc\n * Layer optimized for rendering large point datasets. Takes a `style` property which\n * is a serializable JSON object describing how the layer should be rendered.\n *\n * Here are a few samples of literal style objects:\n * ```js\n * const style = {\n *   symbol: {\n *     symbolType: 'circle',\n *     size: 8,\n *     color: '#33AAFF',\n *     opacity: 0.9\n *   }\n * }\n * ```\n *\n * ```js\n * const style = {\n *   symbol: {\n *     symbolType: 'image',\n *     offset: [0, 12],\n *     size: [4, 8],\n *     src: '../static/exclamation-mark.png'\n *   }\n * }\n * ```\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n */\nclass WebGLPointsLayer extends Layer {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const baseOptions = assign({}, options);\n\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {import('../webgl/ShaderBuilder.js').StyleParseResult}\n     */\n    this.parseResult_ = parseSymbolStyle(options.style.symbol);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      vertexShader: getSymbolVertexShader(this.parseResult_.params),\n      fragmentShader: getSymbolFragmentShader(this.parseResult_.params),\n      uniforms: this.parseResult_.uniforms,\n      attributes: this.parseResult_.attributes\n    });\n  }\n}\n\nexport default WebGLPointsLayer;\n"],"sourceRoot":""}