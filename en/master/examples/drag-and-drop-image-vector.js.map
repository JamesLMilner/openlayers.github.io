{"version":3,"sources":["webpack:///./drag-and-drop-image-vector.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_format_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_format_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_format_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_format_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_format_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_interaction_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_10__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_11__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_12__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_13__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_14__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_15__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_16__","defaultStyle","Point","image","fill","color","radius","stroke","width","LineString","Polygon","MultiPoint","MultiLineString","MultiPolygon","styleFunction","feature","resolution","const","featureStyleFunction","getStyleFunction","call","getGeometry","getType","dragAndDropInteraction","formatConstructors","map","interactions","Object","extend","layers","source","imagerySet","key","target","view","center","zoom","on","event","vectorSource","features","addLayer","renderMode","style","getView","fit","getExtent","displayFeatureInfo","pixel","forEachFeatureAtPixel","push","length","i","ii","info","get","document","getElementById","innerHTML","join","evt","dragging","getEventPixel","originalEvent"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,KAAAM,EAAAN,EAAA,IAAAO,EAAAP,EAAA,KAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,GAAAa,EAAAb,EAAA,IAAAc,EAAAd,EAAA,IAAAe,EAAAf,EAAA,IAAAgB,EAAAhB,EAAA,IAAAiB,EAAAjB,EAAA,KAAAkB,EAAAlB,EAAA,IAAAmB,EAAAnB,EAAA,IASMoB,GACJC,MAAS,IAAIL,EAAA,GACXM,MAAO,IAAIL,EAAA,GACTM,KAAM,IAAIL,EAAA,GACRM,MAAO,wBAETC,OAAQ,EACRC,OAAQ,IAAIP,EAAA,GACVK,MAAO,OACPG,MAAO,QAIbC,WAAc,IAAIZ,EAAA,GAChBU,OAAQ,IAAIP,EAAA,GACVK,MAAO,OACPG,MAAO,MAGXE,QAAW,IAAIb,EAAA,GACbO,KAAM,IAAIL,EAAA,GACRM,MAAO,wBAETE,OAAQ,IAAIP,EAAA,GACVK,MAAO,OACPG,MAAO,MAGXG,WAAc,IAAId,EAAA,GAChBM,MAAO,IAAIL,EAAA,GACTM,KAAM,IAAIL,EAAA,GACRM,MAAO,wBAETC,OAAQ,EACRC,OAAQ,IAAIP,EAAA,GACVK,MAAO,OACPG,MAAO,QAIbI,gBAAmB,IAAIf,EAAA,GACrBU,OAAQ,IAAIP,EAAA,GACVK,MAAO,OACPG,MAAO,MAGXK,aAAgB,IAAIhB,EAAA,GAClBO,KAAM,IAAIL,EAAA,GACRM,MAAO,sBAETE,OAAQ,IAAIP,EAAA,GACVK,MAAO,OACPG,MAAO,OAKPM,EAAgB,SAASC,EAASC,GACtCC,IAAMC,EAAuBH,EAAQI,mBACrC,OAAID,EACKA,EAAqBE,KAAKL,EAASC,GAEnCf,EAAac,EAAQM,cAAcC,YAIxCC,EAAyB,IAAIhC,EAAA,GACjCiC,oBACEtC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,KAIEmC,EAAM,IAAIzC,EAAA,GACd0C,aAAcC,OAAAnC,EAAA,EAAAmC,GAAsBC,QAAQL,IAC5CM,QACE,IAAIpC,EAAA,GACFqC,OAAQ,IAAInC,EAAA,GACVoC,WAAY,SACZC,IAAK,wEAIXC,OAAQ,MACRC,KAAM,IAAIjD,EAAA,GACRkD,QAAS,EAAG,GACZC,KAAM,MAIVb,EAAuBc,GAAG,cAAe,SAASC,GAChDrB,IAAMsB,EAAe,IAAI3C,EAAA,GACvB4C,SAAUF,EAAME,WAElBf,EAAIgB,SAAS,IAAI/C,EAAA,GACfgD,WAAY,QACZZ,OAAQS,EACRI,MAAO7B,KAETW,EAAImB,UAAUC,IAAIN,EAAaO,eAGjC7B,IAAM8B,EAAqB,SAASC,GAClC/B,IAAMuB,KAIN,GAHAf,EAAIwB,sBAAsBD,EAAO,SAASjC,GACxCyB,EAASU,KAAKnC,KAEZyB,EAASW,OAAS,EAAG,CACvBlC,IACImC,EAAGC,EADDC,KAEN,IAAKF,EAAI,EAAGC,EAAKb,EAASW,OAAQC,EAAIC,IAAMD,EAC1CE,EAAKJ,KAAKV,EAASY,GAAGG,IAAI,SAE5BC,SAASC,eAAe,QAAQC,UAAYJ,EAAKK,KAAK,OAAS,aAE/DH,SAASC,eAAe,QAAQC,UAAY,UAIhDjC,EAAIY,GAAG,cAAe,SAASuB,GAC7B,IAAIA,EAAIC,SAAR,CAGA5C,IAAM+B,EAAQvB,EAAIqC,cAAcF,EAAIG,eACpChB,EAAmBC,MAGrBvB,EAAIY,GAAG,QAAS,SAASuB,GACvBb,EAAmBa,EAAIZ","file":"drag-and-drop-image-vector.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {GPX, GeoJSON, IGC, KML, TopoJSON} from '../src/ol/format.js';\nimport {defaults as defaultInteractions, DragAndDrop} from '../src/ol/interaction.js';\nimport {Vector as VectorLayer, Tile as TileLayer} from '../src/ol/layer.js';\nimport {BingMaps, Vector as VectorSource} from '../src/ol/source.js';\nimport {Circle as CircleStyle, Fill, Stroke, Style} from '../src/ol/style.js';\n\n\nconst defaultStyle = {\n  'Point': new Style({\n    image: new CircleStyle({\n      fill: new Fill({\n        color: 'rgba(255,255,0,0.5)'\n      }),\n      radius: 5,\n      stroke: new Stroke({\n        color: '#ff0',\n        width: 1\n      })\n    })\n  }),\n  'LineString': new Style({\n    stroke: new Stroke({\n      color: '#f00',\n      width: 3\n    })\n  }),\n  'Polygon': new Style({\n    fill: new Fill({\n      color: 'rgba(0,255,255,0.5)'\n    }),\n    stroke: new Stroke({\n      color: '#0ff',\n      width: 1\n    })\n  }),\n  'MultiPoint': new Style({\n    image: new CircleStyle({\n      fill: new Fill({\n        color: 'rgba(255,0,255,0.5)'\n      }),\n      radius: 5,\n      stroke: new Stroke({\n        color: '#f0f',\n        width: 1\n      })\n    })\n  }),\n  'MultiLineString': new Style({\n    stroke: new Stroke({\n      color: '#0f0',\n      width: 3\n    })\n  }),\n  'MultiPolygon': new Style({\n    fill: new Fill({\n      color: 'rgba(0,0,255,0.5)'\n    }),\n    stroke: new Stroke({\n      color: '#00f',\n      width: 1\n    })\n  })\n};\n\nconst styleFunction = function(feature, resolution) {\n  const featureStyleFunction = feature.getStyleFunction();\n  if (featureStyleFunction) {\n    return featureStyleFunction.call(feature, resolution);\n  } else {\n    return defaultStyle[feature.getGeometry().getType()];\n  }\n};\n\nconst dragAndDropInteraction = new DragAndDrop({\n  formatConstructors: [\n    GPX,\n    GeoJSON,\n    IGC,\n    KML,\n    TopoJSON\n  ]\n});\n\nconst map = new Map({\n  interactions: defaultInteractions().extend([dragAndDropInteraction]),\n  layers: [\n    new TileLayer({\n      source: new BingMaps({\n        imagerySet: 'Aerial',\n        key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5'\n      })\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\ndragAndDropInteraction.on('addfeatures', function(event) {\n  const vectorSource = new VectorSource({\n    features: event.features\n  });\n  map.addLayer(new VectorLayer({\n    renderMode: 'image',\n    source: vectorSource,\n    style: styleFunction\n  }));\n  map.getView().fit(vectorSource.getExtent());\n});\n\nconst displayFeatureInfo = function(pixel) {\n  const features = [];\n  map.forEachFeatureAtPixel(pixel, function(feature) {\n    features.push(feature);\n  });\n  if (features.length > 0) {\n    const info = [];\n    let i, ii;\n    for (i = 0, ii = features.length; i < ii; ++i) {\n      info.push(features[i].get('name'));\n    }\n    document.getElementById('info').innerHTML = info.join(', ') || '&nbsp';\n  } else {\n    document.getElementById('info').innerHTML = '&nbsp;';\n  }\n};\n\nmap.on('pointermove', function(evt) {\n  if (evt.dragging) {\n    return;\n  }\n  const pixel = map.getEventPixel(evt.originalEvent);\n  displayFeatureInfo(pixel);\n});\n\nmap.on('click', function(evt) {\n  displayFeatureInfo(evt.pixel);\n});\n"],"sourceRoot":""}