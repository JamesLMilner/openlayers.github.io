{"version":3,"sources":["webpack:///../src/ol/interaction/Extent.js","webpack:///./extent-interaction.js"],"names":["_Feature_js__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_1__","_coordinate_js__WEBPACK_IMPORTED_MODULE_2__","_events_Event_js__WEBPACK_IMPORTED_MODULE_3__","_extent_js__WEBPACK_IMPORTED_MODULE_4__","_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_5__","_geom_Point_js__WEBPACK_IMPORTED_MODULE_6__","_geom_Polygon_js__WEBPACK_IMPORTED_MODULE_7__","_Pointer_js__WEBPACK_IMPORTED_MODULE_8__","_layer_Vector_js__WEBPACK_IMPORTED_MODULE_9__","_source_Vector_js__WEBPACK_IMPORTED_MODULE_10__","_style_Style_js__WEBPACK_IMPORTED_MODULE_11__","ExtentEventType","EXTENTCHANGED","ExtentInteractionEvent","Event","extent","super","this","prototype","constructor","ExtentInteraction","PointerInteraction","opt_options","const","style","options","extent_","pointerHandler_","pixelTolerance_","undefined","pixelTolerance","snappedToVertex_","extentFeature_","vertexFeature_","extentOverlay_","source","useSpatialIndex","wrapX","boxStyle","Object","feature","resolution","POLYGON","updateWhileAnimating","updateWhileInteracting","vertexOverlay_","pointerStyle","getDefaultPointerStyleFunction","setExtent","snapToVertex_","pixel","map","pixelCoordinate","getCoordinateFromPixel","getExtent","segments","getSegments","sort","a","b","closestSegment","vertex","vertexPixel","getPixelFromCoordinate","pixel1","pixel2","squaredDist1","squaredDist2","dist","Math","sqrt","min","handlePointerMove_","mapBrowserEvent","createOrUpdatePointerFeature_","createOrUpdateExtentFeature_","let","extentFeature","setGeometry","getSource","addFeature","vertexFeature","getGeometry","setCoordinates","handleEvent","type","POINTERMOVE","handlingDownUpSequence","call","handleDownEvent","getOpposingPoint","point","x_","y_","x","y","getPointHandler","getEdgeHandler","handleDragEvent","coordinate","handleUpEvent","setMap","dispatchEvent","POINT","fixedPoint","fixedP1","fixedP2","__webpack_exports__","r","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_events_condition_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_interaction_Extent_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_8__","vectorSource","url","format","layers","target","view","center","zoom","condition","addInteraction","setActive","window","addEventListener","event","keyCode"],"mappings":"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","file":"extent-interaction.js","sourcesContent":["/**\n * @module ol/interaction/Extent\n */\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {squaredDistanceToSegment, closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport {boundingExtent, getArea} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {import(\"../style/Style.js\").StyleLike} [boxStyle]\n * Style for the drawn extent box. Defaults to\n * {@link module:ol/style/Style~createEditing()['Polygon']}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to\n * {@link module:ol/style/Style~createEditing()['Point']}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n\n/**\n * @enum {string}\n */\nconst ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event ExtentEventType#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~ExtentInteraction} instances are\n * instances of this type.\n */\nclass ExtentInteractionEvent extends Event {\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent the new extent\n   */\n  constructor(extent) {\n    super(ExtentEventType.EXTENTCHANGED);\n\n    /**\n     * The current extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = extent;\n  }\n\n}\n\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires Event\n * @api\n */\nclass ExtentInteraction extends PointerInteraction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /**\n     * Extent of the drawn box\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.extent_ = null;\n\n    /**\n     * Handler for pointer move events\n     * @type {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null}\n     * @private\n     */\n    this.pointerHandler_ = null;\n\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n      options.pixelTolerance : 10;\n\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Feature for displaying the visible extent\n     * @type {Feature}\n     * @private\n     */\n    this.extentFeature_ = null;\n\n    /**\n     * Feature for displaying the visible pointer\n     * @type {Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    if (!opt_options) {\n      opt_options = {};\n    }\n\n    /**\n     * Layer for the extentFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Layer for the vertexFeature\n     * @type {VectorLayer}\n     * @private\n     */\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    if (opt_options.extent) {\n      this.setExtent(opt_options.extent);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel cursor location\n   * @param {import(\"../PluggableMap.js\").default} map map\n   * @returns {import(\"../coordinate.js\").Coordinate|null} snapped vertex on extent\n   * @private\n   */\n  snapToVertex_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    const sortByDistance = function(a, b) {\n      return squaredDistanceToSegment(pixelCoordinate, a) -\n          squaredDistanceToSegment(pixelCoordinate, b);\n    };\n    const extent = this.getExtent();\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      const segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      const closestSegment = segments[0];\n\n      let vertex = (closestOnSegment(pixelCoordinate,\n        closestSegment));\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n\n      //if the distance is within tolerance, snap to the segment\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n        const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ?\n            closestSegment[1] : closestSegment[0];\n        }\n        return vertex;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent pointer move event\n   * @private\n   */\n  handlePointerMove_(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    let vertex = this.snapToVertex_(pixel, map);\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixel(pixel);\n    }\n    this.createOrUpdatePointerFeature_(vertex);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent extent\n   * @returns {Feature} extent as featrue\n   * @private\n   */\n  createOrUpdateExtentFeature_(extent) {\n    let extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n      this.extentFeature_ = extentFeature;\n      /** @type {VectorSource} */ (this.extentOverlay_.getSource()).addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n    return extentFeature;\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} vertex location of feature\n   * @returns {Feature} vertex as feature\n   * @private\n   */\n  createOrUpdatePointerFeature_(vertex) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      /** @type {VectorSource} */ (this.vertexOverlay_.getSource()).addFeature(vertexFeature);\n    } else {\n      const geometry = /** @type {Point} */ (vertexFeature.getGeometry());\n      geometry.setCoordinates(vertex);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!(/** @type {import(\"../MapBrowserPointerEvent.js\").default} */ (mapBrowserEvent).pointerEvent)) {\n      return true;\n    }\n    //display pointer (if not dragging)\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    //call pointer to determine up/down/drag\n    super.handleEvent(mapBrowserEvent);\n    //return false to stop propagation\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    const extent = this.getExtent();\n    let vertex = this.snapToVertex_(pixel, map);\n\n    //find the extent corner opposite the passed corner\n    const getOpposingPoint = function(point) {\n      let x_ = null;\n      let y_ = null;\n      if (point[0] == extent[0]) {\n        x_ = extent[2];\n      } else if (point[0] == extent[2]) {\n        x_ = extent[0];\n      }\n      if (point[1] == extent[1]) {\n        y_ = extent[3];\n      } else if (point[1] == extent[3]) {\n        y_ = extent[1];\n      }\n      if (x_ !== null && y_ !== null) {\n        return [x_, y_];\n      }\n      return null;\n    };\n    if (vertex && extent) {\n      const x = (vertex[0] == extent[0] || vertex[0] == extent[2]) ? vertex[0] : null;\n      const y = (vertex[1] == extent[1] || vertex[1] == extent[3]) ? vertex[1] : null;\n\n      //snap to point\n      if (x !== null && y !== null) {\n        this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n      //snap to edge\n      } else if (x !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([x, extent[1]]),\n          getOpposingPoint([x, extent[3]])\n        );\n      } else if (y !== null) {\n        this.pointerHandler_ = getEdgeHandler(\n          getOpposingPoint([extent[0], y]),\n          getOpposingPoint([extent[2], y])\n        );\n      }\n    //no snap - new bbox\n    } else {\n      vertex = map.getCoordinateFromPixel(pixel);\n      this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n      this.pointerHandler_ = getPointHandler(vertex);\n    }\n    return true; //event handled; start downup sequence\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (this.pointerHandler_) {\n      const pixelCoordinate = mapBrowserEvent.coordinate;\n      this.setExtent(this.pointerHandler_(pixelCoordinate));\n      this.createOrUpdatePointerFeature_(pixelCoordinate);\n    }\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    this.pointerHandler_ = null;\n    //If bbox is zero area, set to null;\n    const extent = this.getExtent();\n    if (!extent || getArea(extent) === 0) {\n      this.setExtent(null);\n    }\n    return false; //Stop handling downup sequence\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {import(\"../extent.js\").Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent\n   * @api\n   */\n  setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentInteractionEvent(this.extent_));\n  }\n}\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POLYGON];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {import(\"../style/Style.js\").StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function(point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {import(\"../coordinate.js\").Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {import(\"../coordinate.js\").Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @returns {function (import(\"../coordinate.js\").Coordinate): import(\"../extent.js\").Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent extent\n * @returns {Array<Array<import(\"../coordinate.js\").Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [\n    [[extent[0], extent[1]], [extent[0], extent[3]]],\n    [[extent[0], extent[3]], [extent[2], extent[3]]],\n    [[extent[2], extent[3]], [extent[2], extent[1]]],\n    [[extent[2], extent[1]], [extent[0], extent[1]]]\n  ];\n}\n\n\nexport default ExtentInteraction;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {platformModifierKeyOnly} from '../src/ol/events/condition.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport ExtentInteraction from '../src/ol/interaction/Extent.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\n\nconst vectorSource = new VectorSource({\n  url: 'data/geojson/countries.geojson',\n  format: new GeoJSON()\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    }),\n    new VectorLayer({\n      source: vectorSource\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst extent = new ExtentInteraction({\n  condition: platformModifierKeyOnly\n});\nmap.addInteraction(extent);\nextent.setActive(false);\n\n//Enable interaction by holding shift\nwindow.addEventListener('keydown', function(event) {\n  if (event.keyCode == 16) {\n    extent.setActive(true);\n  }\n});\nwindow.addEventListener('keyup', function(event) {\n  if (event.keyCode == 16) {\n    extent.setActive(false);\n  }\n});\n"],"sourceRoot":""}