{"version":3,"sources":["webpack:///../src/ol/interaction/Extent.js","webpack:///./extent-interaction.js"],"names":["_Feature_js__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_MapBrowserEventType_js__WEBPACK_IMPORTED_MODULE_1__","_MapBrowserPointerEvent_js__WEBPACK_IMPORTED_MODULE_2__","_coordinate_js__WEBPACK_IMPORTED_MODULE_3__","_events_Event_js__WEBPACK_IMPORTED_MODULE_4__","_extent_js__WEBPACK_IMPORTED_MODULE_5__","_geom_GeometryType_js__WEBPACK_IMPORTED_MODULE_6__","_geom_Point_js__WEBPACK_IMPORTED_MODULE_7__","_geom_Polygon_js__WEBPACK_IMPORTED_MODULE_8__","_interaction_Pointer_js__WEBPACK_IMPORTED_MODULE_9__","_layer_Vector_js__WEBPACK_IMPORTED_MODULE_10__","_source_Vector_js__WEBPACK_IMPORTED_MODULE_11__","_style_Style_js__WEBPACK_IMPORTED_MODULE_12__","ExtentEventType","EXTENTCHANGED","ExtentInteractionEvent","Event","extent","super","this","prototype","constructor","ExtentInteraction","PointerInteraction","opt_options","handleDownEvent","handleDragEvent","handleEvent","handleUpEvent","const","options","extent_","pointerHandler_","pixelTolerance_","undefined","pixelTolerance","snappedToVertex_","extentFeature_","vertexFeature_","extentOverlay_","source","useSpatialIndex","wrapX","style","boxStyle","Object","feature","resolution","POLYGON","getDefaultExtentStyleFunction","updateWhileAnimating","updateWhileInteracting","vertexOverlay_","pointerStyle","POINT","getDefaultPointerStyleFunction","setExtent","snapToVertex_","pixel","map","pixelCoordinate","getCoordinateFromPixel","getExtent","segments","getSegments","sort","a","b","closestSegment","vertex","vertexPixel","getPixelFromCoordinate","pixel1","pixel2","squaredDist1","squaredDist2","dist","Math","sqrt","min","handlePointerMove_","mapBrowserEvent","createOrUpdatePointerFeature_","createOrUpdateExtentFeature_","let","extentFeature","setGeometry","getSource","addFeature","vertexFeature","getGeometry","setCoordinates","setMap","call","dispatchEvent","type","POINTERMOVE","handlingDownUpSequence","getOpposingPoint","point","x_","y_","x","y","getPointHandler","getEdgeHandler","coordinate","fixedPoint","fixedP1","fixedP2","__webpack_exports__","r","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_events_condition_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_interaction_Extent_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_layer_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_source_js__WEBPACK_IMPORTED_MODULE_8__","vectorSource","url","format","layers","target","view","center","zoom","condition","addInteraction","setActive","window","addEventListener","event","keyCode"],"mappings":"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","file":"extent-interaction.js","sourcesContent":["/**\n * @module ol/interaction/Extent\n */\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\nimport {squaredDistanceToSegment, closestOnSegment, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\nimport Event from '../events/Event.js';\nimport {boundingExtent, getArea} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport PointerInteraction, {handleEvent as handlePointerEvent} from '../interaction/Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {module:ol/extent~Extent} [extent] Initial extent. Defaults to no\n * initial extent.\n * @property {module:ol/style/Style|Array<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [boxStyle]\n * Style for the drawn extent box. Defaults to\n * {@link module:ol/style/Style~createEditing()['Polygon']}\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {module:ol/style/Style|Array<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [pointerStyle]\n * Style for the cursor used to draw the extent. Defaults to\n * {@link module:ol/style/Style~createEditing()['Point']}\n * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps\n * in the X direction? Only affects visuals, not functionality.\n */\n\n\n/**\n * @enum {string}\n */\nconst ExtentEventType = {\n  /**\n   * Triggered after the extent is changed\n   * @event module:ol/interaction/Extent~ExtentEventType#extentchanged\n   * @api\n   */\n  EXTENTCHANGED: 'extentchanged'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Extent~ExtentInteraction} instances are\n * instances of this type.\n */\nclass ExtentInteractionEvent extends Event {\n\n  /**\n   * @param {module:ol/extent~Extent} extent the new extent\n   */\n  constructor(extent) {\n    super(ExtentEventType.EXTENTCHANGED);\n\n    /**\n     * The current extent.\n     * @type {module:ol/extent~Extent}\n     * @api\n     */\n    this.extent = extent;\n  }\n\n}\n\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map.\n * Once drawn, the vector box can be modified by dragging its vertices or edges.\n * This interaction is only supported for mouse devices.\n *\n * @fires module:ol/interaction/Extent~Event\n * @api\n */\nclass ExtentInteraction extends PointerInteraction {\n  /**\n   * @param {module:ol/interaction/Extent~Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    super({\n      handleDownEvent: handleDownEvent,\n      handleDragEvent: handleDragEvent,\n      handleEvent: handleEvent,\n      handleUpEvent: handleUpEvent\n    });\n\n    const options = opt_options || {};\n\n    /**\n     * Extent of the drawn box\n     * @type {module:ol/extent~Extent}\n     * @private\n     */\n    this.extent_ = null;\n\n    /**\n     * Handler for pointer move events\n     * @type {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent|null}\n     * @private\n     */\n    this.pointerHandler_ = null;\n\n    /**\n     * Pixel threshold to snap to extent\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n      options.pixelTolerance : 10;\n\n    /**\n     * Is the pointer snapped to an extent vertex\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Feature for displaying the visible extent\n     * @type {module:ol/Feature}\n     * @private\n     */\n    this.extentFeature_ = null;\n\n    /**\n     * Feature for displaying the visible pointer\n     * @type {module:ol/Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    if (!opt_options) {\n      opt_options = {};\n    }\n\n    /**\n     * Layer for the extentFeature\n     * @type {module:ol/layer/Vector}\n     * @private\n     */\n    this.extentOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.boxStyle ? opt_options.boxStyle : getDefaultExtentStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * Layer for the vertexFeature\n     * @type {module:ol/layer/Vector}\n     * @private\n     */\n    this.vertexOverlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!opt_options.wrapX\n      }),\n      style: opt_options.pointerStyle ? opt_options.pointerStyle : getDefaultPointerStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    if (opt_options.extent) {\n      this.setExtent(opt_options.extent);\n    }\n  }\n\n  /**\n   * @param {module:ol/pixel~Pixel} pixel cursor location\n   * @param {module:ol/PluggableMap} map map\n   * @returns {module:ol/coordinate~Coordinate|null} snapped vertex on extent\n   * @private\n   */\n  snapToVertex_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    const sortByDistance = function(a, b) {\n      return squaredDistanceToSegment(pixelCoordinate, a) -\n          squaredDistanceToSegment(pixelCoordinate, b);\n    };\n    const extent = this.getExtent();\n    if (extent) {\n      //convert extents to line segments and find the segment closest to pixelCoordinate\n      const segments = getSegments(extent);\n      segments.sort(sortByDistance);\n      const closestSegment = segments[0];\n\n      let vertex = (closestOnSegment(pixelCoordinate,\n        closestSegment));\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n\n      //if the distance is within tolerance, snap to the segment\n      if (coordinateDistance(pixel, vertexPixel) <= this.pixelTolerance_) {\n        //test if we should further snap to a vertex\n        const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n        const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n        const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n        const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n        this.snappedToVertex_ = dist <= this.pixelTolerance_;\n        if (this.snappedToVertex_) {\n          vertex = squaredDist1 > squaredDist2 ?\n            closestSegment[1] : closestSegment[0];\n        }\n        return vertex;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {module:ol/MapBrowserEvent} mapBrowserEvent pointer move event\n   * @private\n   */\n  handlePointerMove_(mapBrowserEvent) {\n    const pixel = mapBrowserEvent.pixel;\n    const map = mapBrowserEvent.map;\n\n    let vertex = this.snapToVertex_(pixel, map);\n    if (!vertex) {\n      vertex = map.getCoordinateFromPixel(pixel);\n    }\n    this.createOrUpdatePointerFeature_(vertex);\n  }\n\n  /**\n   * @param {module:ol/extent~Extent} extent extent\n   * @returns {module:ol/Feature} extent as featrue\n   * @private\n   */\n  createOrUpdateExtentFeature_(extent) {\n    let extentFeature = this.extentFeature_;\n\n    if (!extentFeature) {\n      if (!extent) {\n        extentFeature = new Feature({});\n      } else {\n        extentFeature = new Feature(polygonFromExtent(extent));\n      }\n      this.extentFeature_ = extentFeature;\n      this.extentOverlay_.getSource().addFeature(extentFeature);\n    } else {\n      if (!extent) {\n        extentFeature.setGeometry(undefined);\n      } else {\n        extentFeature.setGeometry(polygonFromExtent(extent));\n      }\n    }\n    return extentFeature;\n  }\n\n  /**\n   * @param {module:ol/coordinate~Coordinate} vertex location of feature\n   * @returns {module:ol/Feature} vertex as feature\n   * @private\n   */\n  createOrUpdatePointerFeature_(vertex) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(vertex));\n      this.vertexFeature_ = vertexFeature;\n      this.vertexOverlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = /** @type {module:ol/geom/Point} */ (vertexFeature.getGeometry());\n      geometry.setCoordinates(vertex);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    this.extentOverlay_.setMap(map);\n    this.vertexOverlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Returns the current drawn extent in the view projection\n   *\n   * @return {module:ol/extent~Extent} Drawn extent in the view projection.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Manually sets the drawn extent, using the view projection.\n   *\n   * @param {module:ol/extent~Extent} extent Extent\n   * @api\n   */\n  setExtent(extent) {\n    //Null extent means no bbox\n    this.extent_ = extent ? extent : null;\n    this.createOrUpdateExtentFeature_(extent);\n    this.dispatchEvent(new ExtentInteractionEvent(this.extent_));\n  }\n}\n\n/**\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Event.\n * @return {boolean} Propagate event?\n * @this {module:ol/interaction/Extent~ExtentInteraction}\n */\nfunction handleEvent(mapBrowserEvent) {\n  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent)) {\n    return true;\n  }\n  //display pointer (if not dragging)\n  if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n    this.handlePointerMove_(mapBrowserEvent);\n  }\n  //call pointer to determine up/down/drag\n  handlePointerEvent.call(this, mapBrowserEvent);\n  //return false to stop propagation\n  return false;\n}\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Event handled?\n * @this {module:ol/interaction/Extent~ExtentInteraction}\n */\nfunction handleDownEvent(mapBrowserEvent) {\n  const pixel = mapBrowserEvent.pixel;\n  const map = mapBrowserEvent.map;\n\n  const extent = this.getExtent();\n  let vertex = this.snapToVertex_(pixel, map);\n\n  //find the extent corner opposite the passed corner\n  const getOpposingPoint = function(point) {\n    let x_ = null;\n    let y_ = null;\n    if (point[0] == extent[0]) {\n      x_ = extent[2];\n    } else if (point[0] == extent[2]) {\n      x_ = extent[0];\n    }\n    if (point[1] == extent[1]) {\n      y_ = extent[3];\n    } else if (point[1] == extent[3]) {\n      y_ = extent[1];\n    }\n    if (x_ !== null && y_ !== null) {\n      return [x_, y_];\n    }\n    return null;\n  };\n  if (vertex && extent) {\n    const x = (vertex[0] == extent[0] || vertex[0] == extent[2]) ? vertex[0] : null;\n    const y = (vertex[1] == extent[1] || vertex[1] == extent[3]) ? vertex[1] : null;\n\n    //snap to point\n    if (x !== null && y !== null) {\n      this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));\n    //snap to edge\n    } else if (x !== null) {\n      this.pointerHandler_ = getEdgeHandler(\n        getOpposingPoint([x, extent[1]]),\n        getOpposingPoint([x, extent[3]])\n      );\n    } else if (y !== null) {\n      this.pointerHandler_ = getEdgeHandler(\n        getOpposingPoint([extent[0], y]),\n        getOpposingPoint([extent[2], y])\n      );\n    }\n  //no snap - new bbox\n  } else {\n    vertex = map.getCoordinateFromPixel(pixel);\n    this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);\n    this.pointerHandler_ = getPointHandler(vertex);\n  }\n  return true; //event handled; start downup sequence\n}\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Event handled?\n * @this {module:ol/interaction/Extent~ExtentInteraction}\n */\nfunction handleDragEvent(mapBrowserEvent) {\n  if (this.pointerHandler_) {\n    const pixelCoordinate = mapBrowserEvent.coordinate;\n    this.setExtent(this.pointerHandler_(pixelCoordinate));\n    this.createOrUpdatePointerFeature_(pixelCoordinate);\n  }\n  return true;\n}\n\n/**\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\n * @return {boolean} Stop drag sequence?\n * @this {module:ol/interaction/Extent~ExtentInteraction}\n */\nfunction handleUpEvent(mapBrowserEvent) {\n  this.pointerHandler_ = null;\n  //If bbox is zero area, set to null;\n  const extent = this.getExtent();\n  if (!extent || getArea(extent) === 0) {\n    this.setExtent(null);\n  }\n  return false; //Stop handling downup sequence\n}\n\n/**\n * Returns the default style for the drawn bbox\n *\n * @return {module:ol/style/Style~StyleFunction} Default Extent style\n */\nfunction getDefaultExtentStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POLYGON];\n  };\n}\n\n/**\n * Returns the default style for the pointer\n *\n * @return {module:ol/style/Style~StyleFunction} Default pointer style\n */\nfunction getDefaultPointerStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n/**\n * @param {module:ol/coordinate~Coordinate} fixedPoint corner that will be unchanged in the new extent\n * @returns {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent} event handler\n */\nfunction getPointHandler(fixedPoint) {\n  return function(point) {\n    return boundingExtent([fixedPoint, point]);\n  };\n}\n\n/**\n * @param {module:ol/coordinate~Coordinate} fixedP1 first corner that will be unchanged in the new extent\n * @param {module:ol/coordinate~Coordinate} fixedP2 second corner that will be unchanged in the new extent\n * @returns {function (module:ol/coordinate~Coordinate): module:ol/extent~Extent|null} event handler\n */\nfunction getEdgeHandler(fixedP1, fixedP2) {\n  if (fixedP1[0] == fixedP2[0]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [point[0], fixedP2[1]]]);\n    };\n  } else if (fixedP1[1] == fixedP2[1]) {\n    return function(point) {\n      return boundingExtent([fixedP1, [fixedP2[0], point[1]]]);\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * @param {module:ol/extent~Extent} extent extent\n * @returns {Array<Array<module:ol/coordinate~Coordinate>>} extent line segments\n */\nfunction getSegments(extent) {\n  return [\n    [[extent[0], extent[1]], [extent[0], extent[3]]],\n    [[extent[0], extent[3]], [extent[2], extent[3]]],\n    [[extent[2], extent[3]], [extent[2], extent[1]]],\n    [[extent[2], extent[1]], [extent[0], extent[1]]]\n  ];\n}\n\n\nexport default ExtentInteraction;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {platformModifierKeyOnly} from '../src/ol/events/condition.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\nimport ExtentInteraction from '../src/ol/interaction/Extent.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {OSM, Vector as VectorSource} from '../src/ol/source.js';\n\nconst vectorSource = new VectorSource({\n  url: 'data/geojson/countries.geojson',\n  format: new GeoJSON()\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    }),\n    new VectorLayer({\n      source: vectorSource\n    })\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2\n  })\n});\n\nconst extent = new ExtentInteraction({\n  condition: platformModifierKeyOnly\n});\nmap.addInteraction(extent);\nextent.setActive(false);\n\n//Enable interaction by holding shift\nwindow.addEventListener('keydown', function(event) {\n  if (event.keyCode == 16) {\n    extent.setActive(true);\n  }\n});\nwindow.addEventListener('keyup', function(event) {\n  if (event.keyCode == 16) {\n    extent.setActive(false);\n  }\n});\n"],"sourceRoot":""}