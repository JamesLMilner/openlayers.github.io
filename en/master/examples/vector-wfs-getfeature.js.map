{"version":3,"sources":["webpack:///../src/ol/format/filter/Filter.js","webpack:///../src/ol/format/filter/LogicalNary.js","webpack:///../src/ol/format/filter/And.js","webpack:///../src/ol/format/filter/Bbox.js","webpack:///../src/ol/format/filter/Comparison.js","webpack:///../src/ol/format/filter/ComparisonBinary.js","webpack:///../src/ol/format/filter/EqualTo.js","webpack:///../src/ol/format/filter/IsLike.js","webpack:///../src/ol/format/filter.js","webpack:///../src/ol/format/GML3.js","webpack:///../src/ol/format/WFS.js","webpack:///./vector-wfs-getfeature.js"],"names":["Filter_Filter","tagName","this","tagName_","prototype","getTagName","filter_Filter","filter_LogicalNary","Filter","LogicalNary","conditions","super","Object","asserts","length","constructor","filter_And","And","Array","slice","call","arguments","filter_Bbox","Bbox","geometryName","extent","opt_srsName","srsName","filter_Comparison","Comparison","propertyName","filter_ComparisonBinary","ComparisonBinary","expression","opt_matchCase","matchCase","filter_EqualTo","EqualTo","filter_IsLike","IsLike","pattern","opt_wildCard","opt_singleChar","opt_escapeChar","wildCard","undefined","singleChar","escapeChar","and","const","params","concat","Function","bind","apply","GML3_schemaLocation","format_GMLBase","MULTIGEOMETRY_TO_MEMBER_NODENAME","MultiLineString","MultiCurve","MultiPolygon","MultiSurface","GML3_GML3","GMLBase","GML3","opt_options","options","surface_","surface","curve_","curve","multiCurve_","multiCurve","multiSurface_","multiSurface","schemaLocation","hasZ","readMultiCurve_","node","objectStack","lineStrings","xml","MULTICURVE_PARSERS_","readMultiSurface_","polygons","MULTISURFACE_PARSERS_","curveMemberParser_","CURVEMEMBER_PARSERS_","surfaceMemberParser_","SURFACEMEMBER_PARSERS_","readPatch_","PATCHES_PARSERS_","readSegment_","SEGMENTS_PARSERS_","readPolygonPatch_","FLAT_LINEAR_RINGS_PARSERS","readLineStringSegment_","GEOMETRY_FLAT_COORDINATES_PARSERS","interiorParser_","flatLinearRing","RING_PARSERS","push","exteriorParser_","readSurface_","flatLinearRings","SURFACE_PARSERS_","i","ii","flatCoordinates","ends","array","Polygon","GeometryLayout","XYZ","readCurve_","CURVE_PARSERS_","LineString","readEnvelope_","ENVELOPE_PARSERS_","ol_extent","readFlatPos_","let","m","s","re","exec","parseFloat","substr","containerSrs","axisOrientation","ol_proj","getAxisOrientation","y","x","len","readFlatPosList_","replace","context","contextDimension","z","coords","split","dim","getAttribute","xsd","writePos_","value","srsDimension","setAttribute","point","getCoordinates","getCoords_","opt_hasZ","writePosList_","points","parts","join","writePoint_","geometry","pos","namespaceURI","appendChild","writeEnvelope","values","ENVELOPE_SERIALIZERS_","writeLinearRing_","posList","RING_NODE_FACTORY_","opt_nodeName","parentNode","exteriorWritten","writeSurfaceOrPolygon_","nodeName","rings","getLinearRings","RING_SERIALIZERS_","patches","writeSurfacePatches_","writeCurveOrLineString_","segments","writeCurveSegments_","writeMultiSurfaceOrPolygon_","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS_","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writeMultiPoint_","getPoints","POINTMEMBER_SERIALIZERS_","writeMultiCurveOrLineString_","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS_","writeRing_","ring","linearRing","writeSurfaceOrPolygonMember_","polygon","child","GEOMETRY_NODE_FACTORY_","writePointMember_","writeLineStringOrCurveMember_","line","writeGeometryElement","item","ol_obj","isArray","Feature","GEOMETRY_SERIALIZERS_","writeFeatureElement","feature","fid","getId","featureNS","getGeometryName","serializers","properties","getProperties","keys","key","getSimplifiedGeometry","writeFeatureMembers_","features","featureType","namespace","getType","writeGeometryNode","adaptOptions","geom","writeFeaturesNode","setAttributeNS","http://www.opengis.net/gml","interior","exterior","GEOMETRY_PARSERS","Point","readPoint","MultiPoint","readMultiPoint","readLineString","readMultiLineString","LinearRing","readLinearRing","readPolygon","readMultiPolygon","Surface","Curve","Envelope","curveMember","curveMembers","surfaceMember","surfaceMembers","lowerCorner","upperCorner","PolygonPatch","LineStringSegment","writeFeatures","polygonMember","pointMember","lineStringMember","format_GML3","FEATURE_COLLECTION_PARSERS","boundedBy","readGeometryElement","TRANSACTION_SUMMARY_PARSERS","http://www.opengis.net/wfs","totalInserted","totalUpdated","totalDeleted","TRANSACTION_RESPONSE_PARSERS","TransactionSummary","InsertResults","INSERT_RESULTS_PARSERS","QUERY_SERIALIZERS","PropertyName","TRANSACTION_SERIALIZERS","Insert","gmlVersion","GML2","Update","featurePrefix","typeName","getTypeName","XMLNS","getKeys","get","name","writeOgcFidFilter","Delete","Property","pair","WFSNS","Native","nativeElement","vendorId","safeToIgnore","String","FEATURE_PREFIX","OGCNS","FESNS","SCHEMA_LOCATIONS","1.1.0","1.0.0","DEFAULT_VERSION","WFS_WFS","XMLFeature","WFS","featureType_","featureNS_","gmlFormat_","gmlFormat","schemaLocation_","getFeatureType","setFeatureType","readFeaturesFromNode","getReadOptions","readFeaturesInternal","readTransactionResponse","source","doc","readTransactionResponseFromDocument","readTransactionResponseFromNode","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","n","nextSibling","nodeType","Node","ELEMENT_NODE","result","writeGetFeature","filter","handle","outputFormat","maxFeatures","resultType","startIndex","count","viewParams","bbox","propertyNames","featureTypes","GETFEATURE_SERIALIZERS","writeTransaction","inserts","updates","deletes","baseObj","obj","version","gmlOptions","nativeElements","readProjectionFromDocument","readProjectionFromNode","firstElementChild","nextElementSibling","childNodes","firstChild","pop","format_XMLFeature","OGC_FID_PARSERS","http://www.opengis.net/ogc","FeatureId","prefix","indexOf","Query","writeFilterCondition","During","valueReference","timePeriod","begin","writeTimeInstant","end","writeLogicalFilter","Or","Not","condition","BBOX","writeOgcPropertyName","Contains","Intersects","Within","PropertyIsEqualTo","writeComparisonFilter","PropertyIsNotEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsNull","PropertyIsBetween","lowerBoundary","writeOgcLiteral","upperBoundary","PropertyIsLike","toString","writeOgcExpression","property","time","timeInstant","timePosition","format_WFS","vectorSource","source_Vector","vector","Vector","style","Style","stroke","Stroke","color","width","raster","Tile","BingMaps","imagerySet","map","Map","layers","target","document","getElementById","view","View","center","maxZoom","zoom","featureRequest","equalTo","fetch","method","body","XMLSerializer","serializeToString","then","response","json","GeoJSON","readFeatures","addFeatures","getView","fit","getExtent"],"mappings":"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","file":"vector-wfs-getfeature.js","sourcesContent":["/**\n * @module ol/format/filter/Filter\n */\n\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @abstract\n */\nclass Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   */\n  constructor(tagName) {\n\n    /**\n     * @private\n     * @type {!string}\n     */\n    this.tagName_ = tagName;\n  }\n\n  /**\n   * The XML tag name for a filter.\n   * @returns {!string} Name.\n   */\n  getTagName() {\n    return this.tagName_;\n  }\n}\n\nexport default Filter;\n","/**\n * @module ol/format/filter/LogicalNary\n */\nimport {assert} from '../../asserts.js';\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\nclass LogicalNary extends Filter {\n\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n  constructor(tagName, conditions) {\n\n    super(tagName);\n\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n    this.conditions = conditions;\n    assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n  }\n\n}\n\nexport default LogicalNary;\n","/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n\n}\n\nexport default And;\n","/**\n * @module ol/format/filter/Bbox\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @api\n */\nclass Bbox extends Filter {\n\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\n   * @param {string=} opt_srsName SRS name. No srsName attribute will be set\n   * on geometries when this is not provided.\n   */\n  constructor(geometryName, extent, opt_srsName) {\n\n    super('BBOX');\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName;\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent = extent;\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = opt_srsName;\n  }\n\n}\n\nexport default Bbox;\n","/**\n * @module ol/format/filter/Comparison\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @abstract\n */\nclass Comparison extends Filter {\n\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   */\n  constructor(tagName, propertyName) {\n\n    super(tagName);\n\n    /**\n     * @type {!string}\n     */\n    this.propertyName = propertyName;\n  }\n\n}\n\nexport default Comparison;\n","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @abstract\n */\nclass ComparisonBinary extends Comparison {\n\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(tagName, propertyName, expression, opt_matchCase) {\n\n    super(tagName, propertyName);\n\n    /**\n     * @type {!(string|number)}\n     */\n    this.expression = expression;\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = opt_matchCase;\n  }\n\n}\n\nexport default ComparisonBinary;\n","/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(propertyName, expression, opt_matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n  }\n\n}\n\nexport default EqualTo;\n","/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string=} opt_wildCard Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string=} opt_singleChar pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string=} opt_escapeChar Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = (opt_wildCard !== undefined) ? opt_wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = (opt_singleChar !== undefined) ? opt_singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = (opt_escapeChar !== undefined) ? opt_escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = opt_matchCase;\n\n  }\n}\n\nexport default IsLike;\n","/**\n * @module ol/format/filter\n */\nimport And from './filter/And.js';\nimport Bbox from './filter/Bbox.js';\nimport Contains from './filter/Contains.js';\nimport During from './filter/During.js';\nimport EqualTo from './filter/EqualTo.js';\nimport GreaterThan from './filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\nimport Intersects from './filter/Intersects.js';\nimport IsBetween from './filter/IsBetween.js';\nimport IsLike from './filter/IsLike.js';\nimport IsNull from './filter/IsNull.js';\nimport LessThan from './filter/LessThan.js';\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\nimport Not from './filter/Not.js';\nimport NotEqualTo from './filter/NotEqualTo.js';\nimport Or from './filter/Or.js';\nimport Within from './filter/Within.js';\n\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @returns {!And} `<And>` operator.\n * @api\n */\nexport function and(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params));\n}\n\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @returns {!Or} `<Or>` operator.\n * @api\n */\nexport function or(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params));\n}\n\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\n * @returns {!Not} `<Not>` operator.\n * @api\n */\nexport function not(condition) {\n  return new Not(condition);\n}\n\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../extent.js\").Extent} extent Extent.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!Bbox} `<BBOX>` operator.\n * @api\n */\nexport function bbox(geometryName, extent, opt_srsName) {\n  return new Bbox(geometryName, extent, opt_srsName);\n}\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!Contains} `<Contains>` operator.\n * @api\n */\nexport function contains(geometryName, geometry, opt_srsName) {\n  return new Contains(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!Intersects} `<Intersects>` operator.\n * @api\n */\nexport function intersects(geometryName, geometry, opt_srsName) {\n  return new Intersects(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!Within} `<Within>` operator.\n * @api\n */\nexport function within(geometryName, geometry, opt_srsName) {\n  return new Within(geometryName, geometry, opt_srsName);\n}\n\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\nexport function equalTo(propertyName, expression, opt_matchCase) {\n  return new EqualTo(propertyName, expression, opt_matchCase);\n}\n\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\nexport function notEqualTo(propertyName, expression, opt_matchCase) {\n  return new NotEqualTo(propertyName, expression, opt_matchCase);\n}\n\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @returns {!IsNull} `<PropertyIsNull>` operator.\n * @api\n */\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @returns {!IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!IsLike} `<PropertyIsLike>` operator.\n * @api\n */\nexport function like(propertyName, pattern,\n  opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  return new IsLike(propertyName, pattern,\n    opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase);\n}\n\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @returns {!During} `<During>` operator.\n * @api\n */\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\n","/**\n * @module ol/format/GML3\n */\nimport {extend} from '../array.js';\nimport {createOrUpdate} from '../extent.js';\nimport {transformExtentWithOptions, transformGeometryWithOptions} from './Feature.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {createElementNS, getAllTextContent, makeArrayPusher, makeChildAppender,\n  makeReplacer, makeSimpleNodeFactory, OBJECT_PROPERTY_NODE_FACTORY, parseNode,\n  pushParseAndPop, pushSerializeAndPop, XML_SCHEMA_INSTANCE_URI} from '../xml.js';\n\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation = GMLNS +\n    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n    '1.0.0/gmlsf.xsd';\n\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n\n  /**\n   * @param {import(\"./GMLBase.js\").Options=} opt_options Optional configuration object.\n   */\n  constructor(opt_options) {\n    const options = /** @type {import(\"./GMLBase.js\").Options} */\n        (opt_options ? opt_options : {});\n\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ = options.multiCurve !== undefined ?\n      options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ = options.multiSurface !== undefined ?\n      options.multiSurface : true;\n\n    /**\n     * @inheritDoc\n     */\n    this.schemaLocation = options.schemaLocation ?\n      options.schemaLocation : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ?\n      options.hasZ : false;\n\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve_(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop([],\n      this.MULTICURVE_PARSERS_, node, objectStack, this);\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface_(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop([],\n      this.MULTISURFACE_PARSERS_, node, objectStack, this);\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  curveMemberParser_(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  surfaceMemberParser_(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS_,\n      node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.PATCHES_PARSERS_, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.SEGMENTS_PARSERS_, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment_(node, objectStack) {\n    return pushParseAndPop([null],\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  interiorParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined,\n      this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n          (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   */\n  exteriorParser_(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(undefined,\n      this.RING_PARSERS, node, objectStack, this);\n    if (flatLinearRing) {\n      const flatLinearRings = /** @type {Array<Array<number>>} */\n          (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface_(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop([null],\n      this.SURFACE_PARSERS_, node, objectStack, this);\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, GeometryLayout.XYZ, ends);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve_(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null],\n      this.CURVE_PARSERS_, node, objectStack, this);\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, GeometryLayout.XYZ);\n      return lineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope_(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop([null],\n      this.ENVELOPE_PARSERS_, node, objectStack, this);\n    return createOrUpdate(flatCoordinates[1][0],\n      flatCoordinates[1][1], flatCoordinates[2][0],\n      flatCoordinates[2][1]);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos_(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while ((m = re.exec(s))) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    if (axisOrientation === 'neu') {\n      let i, ii;\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @private\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList_(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(\n        node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(\n        node.getAttribute('dimension'));\n    } else if (/** @type {Element} */ (node.parentNode).getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension'));\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    const point = value.getCoordinates();\n    let coords;\n    // only 2d for simple features profile\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = (point[0] + ' ' + point[1]);\n    } else {\n      coords = (point[1] + ' ' + point[0]);\n    }\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string=} opt_srsName Optional srsName\n   * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, opt_srsName, opt_hasZ) {\n    let axisOrientation = 'enu';\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n    let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n      point[0] + ' ' + point[1] :\n      point[1] + ' ' + point[0]);\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePoint_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}), this.ENVELOPE_SERIALIZERS_,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack, keys, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeLinearRing_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'interior' : 'exterior');\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfaceOrPolygon_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS_,\n        this.RING_NODE_FACTORY_,\n        rings, objectStack, undefined, this);\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(\n        patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveOrLineString_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'LineString' ||\n        node.nodeName === 'LineStringSegment') {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments,\n        geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiSurfaceOrPolygon_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiPoint_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS_,\n      makeSimpleNodeFactory('pointMember'), points,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeMultiCurveOrLineString_(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeRing_(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing_(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfaceOrPolygonMember_(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(\n      polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePointMember_(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint_(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeLineStringOrCurveMember_(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString_(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI,\n      'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[objectStack.length - 1]);\n    const item = assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(/** @type {import(\"../extent.js\").Extent} */ (geometry), context);\n    } else {\n      value = transformGeometryWithOptions(/** @type {import(\"../geom/Geometry.js\").default} */ (geometry), true, context);\n    }\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item), this.GEOMETRY_SERIALIZERS_,\n      this.GEOMETRY_NODE_FACTORY_, [value],\n      objectStack, undefined, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const properties = feature.getProperties();\n    const keys = [];\n    const values = [];\n    for (const key in properties) {\n      const value = properties[key];\n      if (value !== null) {\n        keys.push(key);\n        values.push(value);\n        if (key == geometryName || typeof /** @type {?} */ (value).getSimplifiedGeometry === 'function') {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(\n              this.writeGeometryElement, this);\n          }\n        } else {\n          if (!(key in context.serializers[featureNS])) {\n            context.serializers[featureNS][key] = makeChildAppender(writeStringTextNode);\n          }\n        }\n      }\n    }\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item), context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack, keys);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(\n      this.writeFeatureElement, this);\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      serializers,\n      makeSimpleNodeFactory(featureType, featureNS), features,\n      objectStack);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(this.namespace,\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string=} opt_nodeName Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    let nodeName;\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (value).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace,\n      nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   * @override\n   * @api\n   */\n  writeGeometryNode(geometry, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {node: geom, hasZ: this.hasZ, srsName: this.srsName,\n      curve: this.curve_, surface: this.surface_,\n      multiSurface: this.multiSurface_, multiCurve: this.multiCurve_};\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Element} Node.\n   * @override\n   * @api\n   */\n  writeFeaturesNode(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType\n    };\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos_),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser_,\n    'exterior': GML3.prototype.exteriorParser_\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @protected\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface_),\n    'MultiSurface': makeReplacer(\n      GML3.prototype.readMultiSurface_),\n    'Curve': makeReplacer(GML3.prototype.readCurve_),\n    'MultiCurve': makeReplacer(\n      GML3.prototype.readMultiCurve_),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.MULTICURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(\n      GML3.prototype.curveMemberParser_),\n    'curveMembers': makeArrayPusher(\n      GML3.prototype.curveMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.MULTISURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_),\n    'surfaceMembers': makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.CURVEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(\n      GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SURFACEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.CURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.ENVELOPE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(\n      GML3.prototype.readFlatPosList_),\n    'upperCorner': makeArrayPusher(\n      GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.PATCHES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(\n      GML3.prototype.readPolygonPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n * @private\n */\nGML3.prototype.SEGMENTS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeReplacer(\n      GML3.prototype.readLineStringSegment_)\n  }\n};\n\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing_),\n    'interior': makeChildAppender(GML3.prototype.writeRing_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(\n      GML3.prototype.writePointMember_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n * @private\n */\nGML3.prototype.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiCurve': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'Point': makeChildAppender(GML3.prototype.writePoint_),\n    'MultiPoint': makeChildAppender(\n      GML3.prototype.writeMultiPoint_),\n    'LineString': makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': makeChildAppender(\n      GML3.prototype.writeLinearRing_),\n    'Polygon': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': makeChildAppender(\n      GML3.prototype.writeEnvelope)\n  }\n};\n\nexport default GML3;\n","/**\n * @module ol/format/WFS\n */\nimport {assert} from '../asserts.js';\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport {and as andFilter, bbox as bboxFilter} from './filter.js';\nimport XMLFeature from './XMLFeature.js';\nimport {readNonNegativeIntegerString, readNonNegativeInteger, writeStringTextNode} from './xsd.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {createElementNS, isDocument, makeArrayPusher, makeChildAppender,\n  makeObjectPropertySetter, makeSimpleNodeFactory, parse, parseNode,\n  pushParseAndPop, pushSerializeAndPop, XML_SCHEMA_INSTANCE_URI} from '../xml.js';\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst FEATURE_COLLECTION_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': makeObjectPropertySetter(\n      GMLBase.prototype.readGeometryElement, 'bounds')\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_SUMMARY_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': makeObjectPropertySetter(readNonNegativeInteger),\n    'totalUpdated': makeObjectPropertySetter(readNonNegativeInteger),\n    'totalDeleted': makeObjectPropertySetter(readNonNegativeInteger)\n  }\n};\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_RESPONSE_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary, 'transactionSummary'),\n    'InsertResults': makeObjectPropertySetter(\n      readInsertResults, 'insertIds')\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst QUERY_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': makeChildAppender(writeStringTextNode)\n  }\n};\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst TRANSACTION_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative)\n  }\n};\n\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response. Default is `ol/format/GML3`.\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\n */\n\n\n/**\n * @typedef {Object} WriteGetFeatureOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {Array<string>} featureTypes The feature type names.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {string} [outputFormat] Output format.\n * @property {number} [maxFeatures] Maximum number of features to fetch.\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\n * @property {number} [count] Number of features to retrieve when paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\n * Web Feature Services have repurposed `maxfeatures` instead.\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter.\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\n * {@link module:ol/format/Filter} for more information.\n * @property {string} [resultType] Indicates what response should be returned,\n * E.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\n */\n\n\n/**\n * @typedef {Object} WriteTransactionOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {string} featureType The feature type name.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0` or `1.1.0`.\n */\n\n\n/**\n * Number of features; bounds/extent.\n * @typedef {Object} FeatureCollectionMetadata\n * @property {number} numberOfFeatures\n * @property {import(\"../extent.js\").Extent} bounds\n */\n\n\n/**\n * Total deleted; total inserted; total updated; array of insert ids.\n * @typedef {Object} TransactionResponse\n * @property {number} totalDeleted\n * @property {number} totalInserted\n * @property {number} totalUpdated\n * @property {Array<string>} insertIds\n */\n\n\n/**\n * @type {string}\n */\nconst FEATURE_PREFIX = 'feature';\n\n\n/**\n * @type {string}\n */\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n\n/**\n * @type {string}\n */\nconst OGCNS = 'http://www.opengis.net/ogc';\n\n\n/**\n * @type {string}\n */\nconst WFSNS = 'http://www.opengis.net/wfs';\n\n\n/**\n * @type {string}\n */\nconst FESNS = 'http://www.opengis.net/fes';\n\n\n/**\n * @type {Object<string, string>}\n */\nconst SCHEMA_LOCATIONS = {\n  '1.1.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd'\n};\n\n\n/**\n * @const\n * @type {string}\n */\nconst DEFAULT_VERSION = '1.1.0';\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option if you want to read a WFS that contains GML2 (WFS 1.0.0).\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\n *\n * @api\n */\nclass WFS extends XMLFeature {\n\n  /**\n   * @param {Options=} opt_options Optional configuration object.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType_ = options.featureType;\n\n    /**\n     * @private\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS_ = options.featureNS;\n\n    /**\n     * @private\n     * @type {GMLBase}\n     */\n    this.gmlFormat_ = options.gmlFormat ?\n      options.gmlFormat : new GML3();\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.schemaLocation_ = options.schemaLocation ?\n      options.schemaLocation : SCHEMA_LOCATIONS[DEFAULT_VERSION];\n  }\n\n  /**\n   * @return {Array<string>|string|undefined} featureType\n   */\n  getFeatureType() {\n    return this.featureType_;\n  }\n\n  /**\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\n   */\n  setFeatureType(featureType) {\n    this.featureType_ = featureType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeaturesFromNode(node, opt_options) {\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node: node\n    };\n    assign(context, {\n      'featureType': this.featureType_,\n      'featureNS': this.featureNS_\n    });\n\n    assign(context, this.getReadOptions(node, opt_options ? opt_options : {}));\n    const objectStack = [context];\n    this.gmlFormat_.FEATURE_COLLECTION_PARSERS[GMLNS][\n      'featureMember'] =\n        makeArrayPusher(GMLBase.prototype.readFeaturesInternal);\n    let features = pushParseAndPop([],\n      this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,\n      objectStack, this.gmlFormat_);\n    if (!features) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * Read transaction response of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {TransactionResponse|undefined} Transaction response.\n   * @api\n   */\n  readTransactionResponse(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readTransactionResponseFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readTransactionResponseFromDocument(\n        /** @type {Document} */ (source));\n    } else {\n      return this.readTransactionResponseFromNode(/** @type {Element} */ (source));\n    }\n  }\n\n  /**\n   * Read feature collection metadata of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   * @api\n   */\n  readFeatureCollectionMetadata(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureCollectionMetadataFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readFeatureCollectionMetadataFromDocument(\n        /** @type {Document} */ (source));\n    } else {\n      return this.readFeatureCollectionMetadataFromNode(\n        /** @type {Element} */ (source));\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFeatureCollectionMetadataFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromNode(node) {\n    const result = {};\n    const value = readNonNegativeIntegerString(\n      node.getAttribute('numberOfFeatures'));\n    result['numberOfFeatures'] = value;\n    return pushParseAndPop(\n      /** @type {FeatureCollectionMetadata} */ (result),\n      FEATURE_COLLECTION_PARSERS, node, [], this.gmlFormat_);\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readTransactionResponseFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromNode(node) {\n    return pushParseAndPop(\n      /** @type {TransactionResponse} */({}),\n      TRANSACTION_RESPONSE_PARSERS, node, []);\n  }\n\n  /**\n   * Encode format as WFS `GetFeature` and return the Node.\n   *\n   * @param {WriteGetFeatureOptions} options Options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeGetFeature(options) {\n    const node = createElementNS(WFSNS, 'GetFeature');\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', '1.1.0');\n    let filter;\n    if (options) {\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n      if (options.outputFormat) {\n        node.setAttribute('outputFormat', options.outputFormat);\n      }\n      if (options.maxFeatures !== undefined) {\n        node.setAttribute('maxFeatures', String(options.maxFeatures));\n      }\n      if (options.resultType) {\n        node.setAttribute('resultType', options.resultType);\n      }\n      if (options.startIndex !== undefined) {\n        node.setAttribute('startIndex', String(options.startIndex));\n      }\n      if (options.count !== undefined) {\n        node.setAttribute('count', String(options.count));\n      }\n      if (options.viewParams !== undefined) {\n        node.setAttribute('viewParams', options.viewParams);\n      }\n      filter = options.filter;\n      if (options.bbox) {\n        assert(options.geometryName,\n          12); // `options.geometryName` must also be provided when `options.bbox` is set\n        const bbox = bboxFilter(\n          /** @type {string} */ (options.geometryName), options.bbox, options.srsName);\n        if (filter) {\n          // if bbox and filter are both set, combine the two into a single filter\n          filter = andFilter(filter, bbox);\n        } else {\n          filter = bbox;\n        }\n      }\n    }\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation_);\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node: node\n    };\n    assign(context, {\n      'srsName': options.srsName,\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n      'featurePrefix': options.featurePrefix,\n      'geometryName': options.geometryName,\n      'filter': filter,\n      'propertyNames': options.propertyNames ? options.propertyNames : []\n    });\n\n    assert(Array.isArray(options.featureTypes),\n      11); // `options.featureTypes` should be an Array\n    writeGetFeature(node, /** @type {!Array<string>} */ (options.featureTypes), [context]);\n    return node;\n  }\n\n  /**\n   * Encode format as WFS `Transaction` and return the Node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\n   * @param {WriteTransactionOptions} options Write options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeTransaction(inserts, updates, deletes, options) {\n    const objectStack = [];\n    const node = createElementNS(WFSNS, 'Transaction');\n    const version = options.version ? options.version : DEFAULT_VERSION;\n    const gmlVersion = version === '1.0.0' ? 2 : 3;\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', version);\n    let baseObj;\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    let obj;\n    if (options) {\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n    }\n    const schemaLocation = SCHEMA_LOCATIONS[version];\n    node.setAttributeNS(XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', schemaLocation);\n    const featurePrefix = options.featurePrefix ? options.featurePrefix : FEATURE_PREFIX;\n    if (inserts) {\n      obj = assign({node: node}, {'featureNS': options.featureNS,\n        'featureType': options.featureType, 'featurePrefix': featurePrefix,\n        'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName});\n      assign(obj, baseObj);\n      pushSerializeAndPop(obj,\n        TRANSACTION_SERIALIZERS,\n        makeSimpleNodeFactory('Insert'), inserts,\n        objectStack);\n    }\n    if (updates) {\n      obj = assign({node: node}, {'featureNS': options.featureNS,\n        'featureType': options.featureType, 'featurePrefix': featurePrefix,\n        'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName});\n      assign(obj, baseObj);\n      pushSerializeAndPop(obj,\n        TRANSACTION_SERIALIZERS,\n        makeSimpleNodeFactory('Update'), updates,\n        objectStack);\n    }\n    if (deletes) {\n      pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n        'featureType': options.featureType, 'featurePrefix': featurePrefix,\n        'gmlVersion': gmlVersion, 'srsName': options.srsName},\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Delete'), deletes,\n      objectStack);\n    }\n    if (options.nativeElements) {\n      pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n        'featureType': options.featureType, 'featurePrefix': featurePrefix,\n        'gmlVersion': gmlVersion, 'srsName': options.srsName},\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Native'), options.nativeElements,\n      objectStack);\n    }\n    return node;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readProjectionFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readProjectionFromNode(n);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readProjectionFromNode(node) {\n    if (node.firstElementChild &&\n        node.firstElementChild.firstElementChild) {\n      node = node.firstElementChild.firstElementChild;\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        if (!(n.childNodes.length === 0 ||\n            (n.childNodes.length === 1 &&\n            n.firstChild.nodeType === 3))) {\n          const objectStack = [{}];\n          this.gmlFormat_.readGeometryElement(n, objectStack);\n          return getProjection(objectStack.pop().srsName);\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n */\nfunction readTransactionSummary(node, objectStack) {\n  return pushParseAndPop(\n    {}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\n}\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst OGC_FID_PARSERS = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': makeArrayPusher(function(node, objectStack) {\n      return node.getAttribute('fid');\n    })\n  }\n};\n\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction fidParser(node, objectStack) {\n  parseNode(OGC_FID_PARSERS, node, objectStack);\n}\n\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst INSERT_RESULTS_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'Feature': fidParser\n  }\n};\n\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Insert results.\n */\nfunction readInsertResults(node, objectStack) {\n  return pushParseAndPop(\n    [], INSERT_RESULTS_PARSERS, node, objectStack);\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFeature(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeOgcFidFilter(node, fid, objectStack) {\n  const filter = createElementNS(OGCNS, 'Filter');\n  const child = createElementNS(OGCNS, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', /** @type {string} */ (fid));\n  node.appendChild(filter);\n}\n\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @returns {string} The value of the typeName property.\n */\nfunction getTypeName(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.indexOf(prefix) === 0) {\n    return featureType;\n  } else {\n    return prefix + featureType;\n  }\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDelete(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeUpdate(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (value && typeof /** @type {?} */ (value).getSimplifiedGeometry === 'function') {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */ (\n      {'gmlVersion': context['gmlVersion'], node: node,\n        'hasZ': context['hasZ'], 'srsName': context['srsName']}),\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory('Property'), values,\n    objectStack);\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeProperty(node, pair, objectStack) {\n  const name = createElementNS(WFSNS, 'Name');\n  const context = objectStack[objectStack.length - 1];\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = createElementNS(WFSNS, 'Value');\n    node.appendChild(value);\n    if (pair.value && typeof /** @type {?} */ (pair.value).getSimplifiedGeometry === 'function') {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      } else {\n        GML3.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      }\n    } else {\n      writeStringTextNode(value, pair.value);\n    }\n  }\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNative(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\n  }\n  if (nativeElement.value !== undefined) {\n    writeStringTextNode(node, nativeElement.value);\n  }\n}\n\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst GETFEATURE_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Query': makeChildAppender(writeQuery)\n  },\n  'http://www.opengis.net/ogc': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeContainsFilter),\n    'Intersects': makeChildAppender(writeIntersectsFilter),\n    'Within': makeChildAppender(writeWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter)\n  }\n};\n\n\n/**\n * @param {Element} node Node.\n * @param {string} featureType Feature type.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeQuery(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = getTypeName(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  node.setAttribute('typeName', typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  }\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (assign({}, context));\n  item.node = node;\n  pushSerializeAndPop(item,\n    QUERY_SERIALIZERS,\n    makeSimpleNodeFactory('PropertyName'), propertyNames,\n    objectStack);\n  const filter = context['filter'];\n  if (filter) {\n    const child = createElementNS(OGCNS, 'Filter');\n    node.appendChild(child);\n    writeFilterCondition(child, filter, objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFilterCondition(node, filter, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node: node};\n  pushSerializeAndPop(item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(filter.getTagName()),\n    [filter], objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeBboxFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.extent, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Contains.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeContainsFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Intersects.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIntersectsFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Within.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeWithinFilter(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  writeOgcPropertyName(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/During.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDuringFilter(node, filter, objectStack) {\n\n  const valueReference = createElementNS(FESNS, 'ValueReference');\n  writeStringTextNode(valueReference, filter.propertyName);\n  node.appendChild(valueReference);\n\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = createElementNS(GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  writeTimeInstant(begin, filter.begin);\n\n  const end = createElementNS(GMLNS, 'end');\n  timePeriod.appendChild(end);\n  writeTimeInstant(end, filter.end);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLogicalFilter(node, filter, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node: node};\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    pushSerializeAndPop(item,\n      GETFEATURE_SERIALIZERS,\n      makeSimpleNodeFactory(condition.getTagName()),\n      [condition], objectStack);\n  }\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Not.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNotFilter(node, filter, objectStack) {\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node: node};\n  const condition = filter.condition;\n  pushSerializeAndPop(item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(condition.getTagName()),\n    [condition], objectStack);\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeComparisonFilter(node, filter, objectStack) {\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writeOgcPropertyName(node, filter.propertyName);\n  writeOgcLiteral(node, '' + filter.expression);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsNullFilter(node, filter, objectStack) {\n  writeOgcPropertyName(node, filter.propertyName);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsBetweenFilter(node, filter, objectStack) {\n  writeOgcPropertyName(node, filter.propertyName);\n\n  const lowerBoundary = createElementNS(OGCNS, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  writeOgcLiteral(lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = createElementNS(OGCNS, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  writeOgcLiteral(upperBoundary, '' + filter.upperBoundary);\n}\n\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsLikeFilter(node, filter, objectStack) {\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writeOgcPropertyName(node, filter.propertyName);\n  writeOgcLiteral(node, '' + filter.pattern);\n}\n\n\n/**\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n */\nfunction writeOgcExpression(tagName, node, value) {\n  const property = createElementNS(OGCNS, tagName);\n  writeStringTextNode(property, value);\n  node.appendChild(property);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeOgcPropertyName(node, value) {\n  writeOgcExpression('PropertyName', node, value);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeOgcLiteral(node, value) {\n  writeOgcExpression('Literal', node, value);\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n */\nfunction writeTimeInstant(node, time) {\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = createElementNS(GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  writeStringTextNode(timePosition, time);\n}\n\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @return {Node} Result.\n * @api\n */\nexport function writeFilter(filter) {\n  const child = createElementNS(OGCNS, 'Filter');\n  writeFilterCondition(child, filter, []);\n  return child;\n}\n\n\n/**\n * @param {Node} node Node.\n * @param {Array<string>} featureTypes Feature types.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeGetFeature(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (assign({}, context));\n  item.node = node;\n  pushSerializeAndPop(item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory('Query'), featureTypes,\n    objectStack);\n}\n\n\nexport default WFS;\n","import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport {\n  equalTo as equalToFilter,\n  like as likeFilter,\n  and as andFilter\n} from '../src/ol/format/filter.js';\nimport {WFS, GeoJSON} from '../src/ol/format.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport BingMaps from '../src/ol/source/BingMaps.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport {Stroke, Style} from '../src/ol/style.js';\n\n\nconst vectorSource = new VectorSource();\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 255, 1.0)',\n      width: 2\n    })\n  })\n});\n\nconst raster = new TileLayer({\n  source: new BingMaps({\n    imagerySet: 'Aerial',\n    key: 'As1HiMj1PvLPlqc_gtM7AqZfBL8ZL3VrjaS3zIb22Uvb9WKhuJObROC-qUpa81U5'\n  })\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [-8908887.277395891, 5381918.072437216],\n    maxZoom: 19,\n    zoom: 12\n  })\n});\n\n// generate a GetFeature request\nconst featureRequest = new WFS().writeGetFeature({\n  srsName: 'EPSG:3857',\n  featureNS: 'http://openstreemap.org',\n  featurePrefix: 'osm',\n  featureTypes: ['water_areas'],\n  outputFormat: 'application/json',\n  filter: andFilter(\n    likeFilter('name', 'Mississippi*'),\n    equalToFilter('waterway', 'riverbank')\n  )\n});\n\n// then post the request and add the received features to a layer\nfetch('https://ahocevar.com/geoserver/wfs', {\n  method: 'POST',\n  body: new XMLSerializer().serializeToString(featureRequest)\n}).then(function(response) {\n  return response.json();\n}).then(function(json) {\n  const features = new GeoJSON().readFeatures(json);\n  vectorSource.addFeatures(features);\n  map.getView().fit(vectorSource.getExtent());\n});\n"],"sourceRoot":""}