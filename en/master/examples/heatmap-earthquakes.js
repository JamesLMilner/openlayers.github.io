(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{428:function(t,e,n){"use strict";n.r(e);var a=n(3),o=n(2),i=n(100),r=n(35),u=n(29),s=n(20),d=n(12),l=n(147),f={BLUR:"blur",GRADIENT:"gradient",RADIUS:"radius"},_=["#00f","#0ff","#0f0","#ff0","#f00"];var v=function(t){function e(e){var n=e||{},a=Object(d.a)({},n);delete a.gradient,delete a.radius,delete a.blur,delete a.weight,t.call(this,a),this.gradient_=null,this.addEventListener(Object(r.b)(f.GRADIENT),this.handleGradientChanged_),this.setGradient(n.gradient?n.gradient:_),this.setBlur(void 0!==n.blur?n.blur:15),this.setRadius(void 0!==n.radius?n.radius:8);var o=n.weight?n.weight:"weight";this.weightFunction_="string"==typeof o?function(t){return t.get(o)}:o,this.setRenderOrder(null)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.getBlur=function(){return this.get(f.BLUR)},e.prototype.getGradient=function(){return this.get(f.GRADIENT)},e.prototype.getRadius=function(){return this.get(f.RADIUS)},e.prototype.handleGradientChanged_=function(){this.gradient_=function(t){for(var e=Object(u.a)(1,256),n=e.createLinearGradient(0,0,1,256),a=1/(t.length-1),o=0,i=t.length;o<i;++o)n.addColorStop(o*a,t[o]);return e.fillStyle=n,e.fillRect(0,0,1,256),e.canvas}(this.getGradient())},e.prototype.setBlur=function(t){this.set(f.BLUR,t)},e.prototype.setGradient=function(t){this.set(f.GRADIENT,t)},e.prototype.setRadius=function(t){this.set(f.RADIUS,t)},e.prototype.createRenderer=function(){return new l.a(this,{attributes:[{name:"weight",callback:this.weightFunction_}],vertexShader:"\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_weight = a_weight;\n        }",fragmentShader:"\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\n        }",hitVertexShader:"\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n        attribute vec4 a_hitColor;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_hitColor = a_hitColor;\n          v_weight = a_weight;\n        }",hitFragmentShader:"\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          if (alpha < 0.05) {\n            discard;\n          }\n\n          gl_FragColor = v_hitColor;\n        }",uniforms:{u_size:function(){return 2*(this.get(f.RADIUS)+this.get(f.BLUR))}.bind(this),u_blurSlope:function(){return this.get(f.RADIUS)/Math.max(1,this.get(f.BLUR))}.bind(this)},postProcesses:[{fragmentShader:"\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }",uniforms:{u_gradientTexture:this.gradient_}}]})},e}(s.a),c=n(5),g=n(64),h=n(10),p=document.getElementById("blur"),x=document.getElementById("radius"),m=new v({source:new h.a({url:"data/kml/2012_Earthquakes_Mag5.kml",format:new i.a({extractStyles:!1})}),blur:parseInt(p.value,10),radius:parseInt(x.value,10)});m.getSource().on("addfeature",function(t){var e=t.feature.get("name"),n=parseFloat(e.substr(2));t.feature.set("weight",n-5)});var w=new c.a({source:new g.a({layer:"toner"})}),C=(new a.a({layers:[w,m],target:"map",view:new o.a({center:[0,0],zoom:2})}),function(){m.setBlur(parseInt(p.value,10))});p.addEventListener("input",C),p.addEventListener("change",C);var b=function(){m.setRadius(parseInt(x.value,10))};x.addEventListener("input",b),x.addEventListener("change",b)}},[[428,0]]]);
//# sourceMappingURL=heatmap-earthquakes.js.map