{"version":3,"sources":["webpack:///./mapbox-layer.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_layer_Layer__WEBPACK_IMPORTED_MODULE_2__","_src_ol_obj__WEBPACK_IMPORTED_MODULE_3__","_src_ol_proj__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_State__WEBPACK_IMPORTED_MODULE_5__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_10__","Mapbox","Layer","options","const","baseOptions","Object","super","this","loaded","initMap","map","map_","view","getView","center","getProjection","transformToLatLng","getCenter","centerLastRender","zoomLastRender","getZoom","attributionControl","boxZoom","container","getTargetElement","doubleClickZoom","dragPan","dragRotate","interactive","keyboard","pitchWithRotate","scrollZoom","touchZoomRotate","zoom","mbmap","mapboxgl","Map","on","getCanvas","remove","render","forEach","className","document","getElementsByClassName","bind","centerNextRender","zoomNextRender","updateRenderedPosition","frameState","lastRender","getPixelFromCoordinate","nextRender","centerOffset","zoomOffset","Math","pow","rotation","viewState","rotateTo","PI","animate","jumpTo","style","left","round","top","transform","setVisible","visible","call","display","setOpacity","opacity","setZIndex","zindex","zIndex","getSourceState","READY","UNDEFINED","setMap","prototype","_setupContainer","_container","classList","add","canvasContainer","_canvasContainer","firstChild","_canvas","createElement","insertBefore","position","addEventListener","_contextLost","_contextRestored","setAttribute","dimensions","_containerDimensions","_resizeCanvas","_controlContainer","controlContainer","appendChild","positions","_controlPositions","positionName","elem","stroke","color","width","vectorLayer","source","url","format","target","minZoom","extent","Infinity","smoothExtentConstraint","smoothResolutionConstraint","mbLayer","getTarget","addLayer"],"mappings":"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","file":"mapbox-layer.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Layer from '../src/ol/layer/Layer';\nimport {assign} from '../src/ol/obj';\nimport {getTransform} from '../src/ol/proj';\nimport SourceState from '../src/ol/source/State';\nimport {Stroke, Style} from '../src/ol/style.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\n\nclass Mapbox extends Layer {\n\n  /**\n   * @param {import('./Base.js').Options} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = assign({}, options);\n    super(baseOptions);\n\n    this.baseOptions = baseOptions;\n\n    /**\n     * @private\n     * @type boolean\n     */\n    this.loaded = false;\n\n    this.initMap();\n  }\n\n  initMap() {\n    const map = this.map_;\n    const view = map.getView();\n    const transformToLatLng = getTransform(view.getProjection(), 'EPSG:4326');\n    const center = transformToLatLng(view.getCenter());\n\n    this.centerLastRender = view.getCenter();\n    this.zoomLastRender = view.getZoom();\n    this.centerLastRender = view.getCenter();\n    this.zoomLastRender = view.getZoom();\n\n    const options = assign(this.baseOptions, {\n      attributionControl: false,\n      boxZoom: false,\n      center,\n      container: map.getTargetElement(),\n      doubleClickZoom: false,\n      dragPan: false,\n      dragRotate: false,\n      interactive: false,\n      keyboard: false,\n      pitchWithRotate: false,\n      scrollZoom: false,\n      touchZoomRotate: false,\n      zoom: view.getZoom() - 1\n    });\n\n    this.mbmap = new mapboxgl.Map(options);\n    this.mbmap.on('load', function() {\n      this.mbmap.getCanvas().remove();\n      this.loaded = true;\n      this.map_.render();\n      [\n        'mapboxgl-control-container'\n      ].forEach(className => document.getElementsByClassName(className)[0].remove());\n    }.bind(this));\n\n    this.mbmap.on('render', function() {\n      // Reset offset\n      if (this.centerNextRender) {\n        this.centerLastRender = this.centerNextRender;\n      }\n      if (this.zoomNextRender) {\n        this.zoomLastRender = this.zoomNextRender;\n      }\n      this.updateRenderedPosition([0, 0], 1);\n    }.bind(this));\n\n  }\n\n  /**\n   *\n   * @inheritDoc\n   */\n  render(frameState) {\n    const map = this.map_;\n    const view = map.getView();\n    const transformToLatLng = getTransform(view.getProjection(), 'EPSG:4326');\n\n    this.centerNextRender = view.getCenter();\n    const lastRender = map.getPixelFromCoordinate(this.centerLastRender);\n    const nextRender = map.getPixelFromCoordinate(this.centerNextRender);\n    const centerOffset = [lastRender[0] - nextRender[0], lastRender[1] - nextRender[1]];\n    this.zoomNextRender = view.getZoom();\n    const zoomOffset = Math.pow(2, this.zoomNextRender - this.zoomLastRender);\n    this.updateRenderedPosition(centerOffset, zoomOffset);\n\n    const rotation = frameState.viewState.rotation;\n    if (rotation) {\n      this.mbmap.rotateTo(-rotation * 180 / Math.PI, {\n        animate: false\n      });\n    }\n\n    // Re-render mbmap\n    const center = transformToLatLng(this.centerNextRender);\n    const zoom = view.getZoom() - 1;\n    this.mbmap.jumpTo({\n      center: center,\n      zoom: zoom\n    });\n    return this.mbmap.getCanvas();\n  }\n\n  updateRenderedPosition(centerOffset, zoomOffset) {\n    const style = this.mbmap.getCanvas().style;\n    style.left = Math.round(centerOffset[0]) + 'px';\n    style.top = Math.round(centerOffset[1]) + 'px';\n    style.transform = 'scale(' + zoomOffset + ')';\n  }\n\n  setVisible(visible) {\n    super.setVisible(visible);\n\n    const canvas = this.mbmap.getCanvas();\n    canvas.style.display = visible ? 'block' : 'none';\n  }\n\n  setOpacity(opacity) {\n    super.setOpacity(opacity);\n    const canvas = this.mbmap.getCanvas();\n    canvas.style.opacity = opacity;\n  }\n\n  setZIndex(zindex) {\n    super.setZIndex(zindex);\n    const canvas = this.mbmap.getCanvas();\n    canvas.style.zIndex = zindex;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSourceState() {\n    return this.loaded ? SourceState.READY : SourceState.UNDEFINED;\n  }\n\n  setMap(map) {\n    this.map_ = map;\n  }\n\n}\n\nmapboxgl.Map.prototype._setupContainer = function _setupContainer() {\n  const container = this._container;\n  container.classList.add('mapboxgl-map');\n\n  const canvasContainer = this._canvasContainer = container.firstChild;\n\n  this._canvas = document.createElement('canvas');\n  canvasContainer.insertBefore(this._canvas, canvasContainer.firstChild);\n  this._canvas.style.position = 'absolute';\n  this._canvas.addEventListener('webglcontextlost', this._contextLost, false);\n  this._canvas.addEventListener('webglcontextrestored', this._contextRestored, false);\n  this._canvas.setAttribute('tabindex', '0');\n  this._canvas.setAttribute('aria-label', 'Map');\n  this._canvas.className = 'mapboxgl-canvas';\n\n  const dimensions = this._containerDimensions();\n  this._resizeCanvas(dimensions[0], dimensions[1]);\n\n  this._controlContainer = canvasContainer;\n  const controlContainer = this._controlContainer = document.createElement('div');\n  controlContainer.className = 'mapboxgl-control-container';\n  container.appendChild(controlContainer);\n\n  const positions = this._controlPositions = {};\n  ['top-left', 'top-right', 'bottom-left', 'bottom-right'].forEach(function(positionName) {\n    const elem = document.createElement('div');\n    elem.className = 'mapboxgl-ctrl-' + positionName;\n    controlContainer.appendChild(elem);\n    positions[positionName] = elem;\n  });\n};\n\nconst style = new Style({\n  stroke: new Stroke({\n    color: '#319FD3',\n    width: 2\n  })\n});\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/countries.geojson',\n    format: new GeoJSON()\n  }),\n  style: style\n});\n\nconst map = new Map({\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4,\n    minZoom: 1,\n    extent: [-Infinity, -20048966.10, Infinity, 20048966.10],\n    smoothExtentConstraint: false,\n    smoothResolutionConstraint: false\n  })\n});\n\nconst key = 'ER67WIiPdCQvhgsUjoWK';\nconst mbLayer = new Mapbox({\n  map: map,\n  container: map.getTarget(),\n  style: 'https://maps.tilehosting.com/styles/bright/style.json?key=' + key\n});\n\nmap.addLayer(mbLayer);\nmap.addLayer(vectorLayer);\n"],"sourceRoot":""}