{"version":3,"sources":["webpack:///./mapbox-layer.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_layer_Layer__WEBPACK_IMPORTED_MODULE_2__","_src_ol_obj__WEBPACK_IMPORTED_MODULE_3__","_src_ol_proj__WEBPACK_IMPORTED_MODULE_4__","_src_ol_source_State__WEBPACK_IMPORTED_MODULE_5__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_8__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_9__","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_10__","Mapbox","Layer","options","const","baseOptions","Object","super","this","loaded","initMap","map","map_","view","getView","center","getCenter","getProjection","centerLastRender","zoomLastRender","getZoom","attributionControl","boxZoom","container","getTargetElement","doubleClickZoom","dragPan","dragRotate","interactive","keyboard","pitchWithRotate","scrollZoom","touchZoomRotate","zoom","mbmap","mapboxgl","Map","on","getCanvas","remove","render","getContainer","querySelector","bind","centerNextRender","zoomNextRender","updateRenderedPosition","frameState","lastRender","getPixelFromCoordinate","nextRender","scale","Math","pow","rotation","viewState","rotateTo","PI","animate","jumpTo","left","top","style","round","transform","setVisible","visible","call","display","setOpacity","opacity","setZIndex","zindex","zIndex","getSourceState","READY","UNDEFINED","setMap","prototype","_setupContainer","_container","classList","add","canvasContainer","_canvasContainer","firstChild","_canvas","document","createElement","insertBefore","position","addEventListener","_contextLost","_contextRestored","setAttribute","className","dimensions","_containerDimensions","_resizeCanvas","_controlContainer","controlContainer","appendChild","positions","_controlPositions","forEach","positionName","elem","stroke","color","width","vectorLayer","source","url","format","target","minZoom","extent","Infinity","smoothExtentConstraint","smoothResolutionConstraint","mbLayer","getTarget","addLayer"],"mappings":"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","file":"mapbox-layer.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Layer from '../src/ol/layer/Layer';\nimport {assign} from '../src/ol/obj';\nimport {toLonLat} from '../src/ol/proj';\nimport SourceState from '../src/ol/source/State';\nimport {Stroke, Style} from '../src/ol/style.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\n\nclass Mapbox extends Layer {\n\n  /**\n   * @param {import('../src/ol/layer/Layer').Options} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = assign({}, options);\n    super(baseOptions);\n\n    this.baseOptions = baseOptions;\n\n    /**\n     * @private\n     * @type boolean\n     */\n    this.loaded = false;\n\n    this.initMap();\n  }\n\n  initMap() {\n    const map = this.map_;\n    const view = map.getView();\n    const center = toLonLat(view.getCenter(), view.getProjection());\n\n    this.centerLastRender = view.getCenter();\n    this.zoomLastRender = view.getZoom();\n    this.centerLastRender = view.getCenter();\n    this.zoomLastRender = view.getZoom();\n\n    const options = assign(this.baseOptions, {\n      attributionControl: false,\n      boxZoom: false,\n      center,\n      container: map.getTargetElement(),\n      doubleClickZoom: false,\n      dragPan: false,\n      dragRotate: false,\n      interactive: false,\n      keyboard: false,\n      pitchWithRotate: false,\n      scrollZoom: false,\n      touchZoomRotate: false,\n      zoom: view.getZoom() - 1\n    });\n\n    this.mbmap = new mapboxgl.Map(options);\n    this.mbmap.on('load', function() {\n      this.mbmap.getCanvas().remove();\n      this.loaded = true;\n      this.map_.render();\n      this.mbmap.getContainer().querySelector('.mapboxgl-control-container').remove();\n    }.bind(this));\n\n    this.mbmap.on('render', function() {\n      // Reset offset\n      if (this.centerNextRender) {\n        this.centerLastRender = this.centerNextRender;\n      }\n      if (this.zoomNextRender) {\n        this.zoomLastRender = this.zoomNextRender;\n      }\n      this.updateRenderedPosition(0, 0, 1);\n    }.bind(this));\n\n  }\n\n  /**\n   *\n   * @inheritDoc\n   */\n  render(frameState) {\n    const map = this.map_;\n    const view = map.getView();\n\n    this.centerNextRender = view.getCenter();\n    const lastRender = map.getPixelFromCoordinate(this.centerLastRender);\n    const nextRender = map.getPixelFromCoordinate(this.centerNextRender);\n    this.zoomNextRender = view.getZoom();\n    const scale = Math.pow(2, this.zoomNextRender - this.zoomLastRender);\n    this.updateRenderedPosition(lastRender[0] - nextRender[0], lastRender[1] - nextRender[1], scale);\n\n    const rotation = frameState.viewState.rotation;\n    if (rotation) {\n      this.mbmap.rotateTo(-rotation * 180 / Math.PI, {\n        animate: false\n      });\n    }\n\n    // Re-render mbmap\n    const center = toLonLat(this.centerNextRender, view.getProjection());\n    const zoom = view.getZoom() - 1;\n    this.mbmap.jumpTo({\n      center: center,\n      zoom: zoom\n    });\n    return this.mbmap.getCanvas();\n  }\n\n  updateRenderedPosition(left, top, scale) {\n    const style = this.mbmap.getCanvas().style;\n    style.left = Math.round(left) + 'px';\n    style.top = Math.round(top) + 'px';\n    style.transform = 'scale(' + scale + ')';\n  }\n\n  setVisible(visible) {\n    super.setVisible(visible);\n\n    const canvas = this.mbmap.getCanvas();\n    canvas.style.display = visible ? 'block' : 'none';\n  }\n\n  setOpacity(opacity) {\n    super.setOpacity(opacity);\n    const canvas = this.mbmap.getCanvas();\n    canvas.style.opacity = opacity;\n  }\n\n  setZIndex(zindex) {\n    super.setZIndex(zindex);\n    const canvas = this.mbmap.getCanvas();\n    canvas.style.zIndex = zindex;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSourceState() {\n    return this.loaded ? SourceState.READY : SourceState.UNDEFINED;\n  }\n\n  setMap(map) {\n    this.map_ = map;\n  }\n\n}\n\nmapboxgl.Map.prototype._setupContainer = function _setupContainer() {\n  const container = this._container;\n  container.classList.add('mapboxgl-map');\n\n  const canvasContainer = this._canvasContainer = container.firstChild;\n\n  this._canvas = document.createElement('canvas');\n  canvasContainer.insertBefore(this._canvas, canvasContainer.firstChild);\n  this._canvas.style.position = 'absolute';\n  this._canvas.addEventListener('webglcontextlost', this._contextLost, false);\n  this._canvas.addEventListener('webglcontextrestored', this._contextRestored, false);\n  this._canvas.setAttribute('tabindex', '0');\n  this._canvas.setAttribute('aria-label', 'Map');\n  this._canvas.className = 'mapboxgl-canvas';\n\n  const dimensions = this._containerDimensions();\n  this._resizeCanvas(dimensions[0], dimensions[1]);\n\n  this._controlContainer = canvasContainer;\n  const controlContainer = this._controlContainer = document.createElement('div');\n  controlContainer.className = 'mapboxgl-control-container';\n  container.appendChild(controlContainer);\n\n  const positions = this._controlPositions = {};\n  ['top-left', 'top-right', 'bottom-left', 'bottom-right'].forEach(function(positionName) {\n    const elem = document.createElement('div');\n    elem.className = 'mapboxgl-ctrl-' + positionName;\n    controlContainer.appendChild(elem);\n    positions[positionName] = elem;\n  });\n};\n\nconst style = new Style({\n  stroke: new Stroke({\n    color: '#319FD3',\n    width: 2\n  })\n});\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/countries.geojson',\n    format: new GeoJSON()\n  }),\n  style: style\n});\n\nconst map = new Map({\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4,\n    minZoom: 1,\n    extent: [-Infinity, -20048966.10, Infinity, 20048966.10],\n    smoothExtentConstraint: false,\n    smoothResolutionConstraint: false\n  })\n});\n\nconst key = 'ER67WIiPdCQvhgsUjoWK';\nconst mbLayer = new Mapbox({\n  map: map,\n  container: map.getTarget(),\n  style: 'https://maps.tilehosting.com/styles/bright/style.json?key=' + key\n});\n\nmap.addLayer(mbLayer);\nmap.addLayer(vectorLayer);\n"],"sourceRoot":""}