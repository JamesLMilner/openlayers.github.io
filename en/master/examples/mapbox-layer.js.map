{"version":3,"sources":["webpack:///./mapbox-layer.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_layer_Layer__WEBPACK_IMPORTED_MODULE_2__","_src_ol_proj__WEBPACK_IMPORTED_MODULE_3__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_8__","style","stroke","color","width","vectorLayer","source","url","format","map","target","view","center","zoom","minZoom","extent","Infinity","smoothExtentConstraint","smoothResolutionConstraint","getView","Object","getCenter","getProjection","mbMap","mapboxgl","Map","attributionControl","boxZoom","container","getTargetElement","doubleClickZoom","dragPan","dragRotate","interactive","keyboard","pitchWithRotate","scrollZoom","touchZoomRotate","getZoom","mbLayer","render","frameState","const","canvas","getCanvas","visible","getVisible","display","opacity","getOpacity","rotation","viewState","rotateTo","Math","PI","animate","jumpTo","_frame","cancel","_render","addLayer"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,IAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IASMY,EAAQ,IAAIL,EAAA,EAAM,CACtBM,OAAQ,IAAIL,EAAA,EAAO,CACjBM,MAAO,UACPC,MAAO,MAILC,EAAc,IAAIP,EAAA,EAAY,CAClCQ,OAAQ,IAAIP,EAAA,EAAa,CACvBQ,IAAK,iCACLC,OAAQ,IAAIR,EAAA,IAEdC,MAAOA,IAGHQ,EAAM,IAAIjB,EAAA,EAAI,CAClBkB,OAAQ,MACRC,KAAM,IAAIlB,EAAA,EAAK,CACbmB,OAAQ,EAAE,SAAU,SACpBC,KAAM,EACNC,QAAS,EACTC,OAAQ,EAAEC,KAAW,WAAaA,IAAU,YAC5CC,wBAAwB,EACxBC,4BAA4B,MAO1BP,EAAOF,EAAIU,UACXP,EAASQ,OAAAzB,EAAA,EAAAyB,CAAST,EAAKU,YAAaV,EAAKW,iBAGzCC,EAAQ,IAAIC,SAASC,IAAI,CAC7BxB,MAAO,iFACPyB,oBAAoB,EACpBC,SAAS,EACTf,OAAQA,EACRgB,UAAWnB,EAAIoB,mBACfC,iBAAiB,EACjBC,SAAS,EACTC,YAAY,EACZC,aAAa,EACbC,UAAU,EACVC,iBAAiB,EACjBC,YAAY,EACZC,iBAAiB,EACjBxB,KAAMF,EAAK2B,UAAY,IAMnBC,EAAU,IAAI7C,EAAA,EAAM,CACxB8C,OAAQ,SAASC,GACfC,IAAMC,EAASpB,EAAMqB,YACfjC,EAAOF,EAAIU,UAEX0B,EAAUN,EAAQO,aACxBH,EAAO1C,MAAM8C,QAAUF,EAAU,QAAU,OAE3CH,IAAMM,EAAUT,EAAQU,aACxBN,EAAO1C,MAAM+C,QAAUA,EAGvBN,IAAMQ,EAAWT,EAAWU,UAAUD,SAClCA,GACF3B,EAAM6B,SAAqB,KAAXF,EAAiBG,KAAKC,GAAI,CACxCC,SAAS,IAGbb,IAAM9B,EAASQ,OAAAzB,EAAA,EAAAyB,CAAST,EAAKU,YAAaV,EAAKW,iBACzCT,EAAOF,EAAK2B,UAAY,EAgB9B,OAfAf,EAAMiC,OAAO,CACX5C,OAAQA,EACRC,KAAMA,EACN0C,SAAS,IAMPhC,EAAMkC,SACRlC,EAAMkC,OAAOC,SACbnC,EAAMkC,OAAS,MAEjBlC,EAAMoC,UAEChB,KAIXlC,EAAImD,SAASrB,GACb9B,EAAImD,SAASvD","file":"mapbox-layer.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Layer from '../src/ol/layer/Layer';\nimport {toLonLat} from '../src/ol/proj';\nimport {Stroke, Style} from '../src/ol/style.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\n\nconst style = new Style({\n  stroke: new Stroke({\n    color: '#319FD3',\n    width: 2\n  })\n});\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/countries.geojson',\n    format: new GeoJSON()\n  }),\n  style: style\n});\n\nconst map = new Map({\n  target: 'map',\n  view: new View({\n    center: [-10997148, 4569099],\n    zoom: 4,\n    minZoom: 1,\n    extent: [-Infinity, -20048966.10, Infinity, 20048966.10],\n    smoothExtentConstraint: false,\n    smoothResolutionConstraint: false\n  })\n});\n\n\n// init Mapbox object\n\nconst view = map.getView();\nconst center = toLonLat(view.getCenter(), view.getProjection());\nconst key = 'ER67WIiPdCQvhgsUjoWK';\n\nconst mbMap = new mapboxgl.Map({\n  style: 'https://maps.tilehosting.com/styles/bright/style.json?key=' + key,\n  attributionControl: false,\n  boxZoom: false,\n  center: center,\n  container: map.getTargetElement(),\n  doubleClickZoom: false,\n  dragPan: false,\n  dragRotate: false,\n  interactive: false,\n  keyboard: false,\n  pitchWithRotate: false,\n  scrollZoom: false,\n  touchZoomRotate: false,\n  zoom: view.getZoom() - 1\n});\n\n\n// init OL layers\n\nconst mbLayer = new Layer({\n  render: function(frameState) {\n    const canvas = mbMap.getCanvas();\n    const view = map.getView();\n\n    const visible = mbLayer.getVisible();\n    canvas.style.display = visible ? 'block' : 'none';\n\n    const opacity = mbLayer.getOpacity();\n    canvas.style.opacity = opacity;\n\n    // adjust view parameters in mapbox\n    const rotation = frameState.viewState.rotation;\n    if (rotation) {\n      mbMap.rotateTo(-rotation * 180 / Math.PI, {\n        animate: false\n      });\n    }\n    const center = toLonLat(view.getCenter(), view.getProjection());\n    const zoom = view.getZoom() - 1;\n    mbMap.jumpTo({\n      center: center,\n      zoom: zoom,\n      animate: false\n    });\n\n    // cancel the scheduled update & trigger synchronous redraw\n    // see https://github.com/mapbox/mapbox-gl-js/issues/7893#issue-408992184\n    // NOTE: THIS MIGHT BREAK WHEN UPDATING MAPBOX\n    if (mbMap._frame) {\n      mbMap._frame.cancel();\n      mbMap._frame = null;\n    }\n    mbMap._render();\n\n    return canvas;\n  }\n});\n\nmap.addLayer(mbLayer);\nmap.addLayer(vectorLayer);\n"],"sourceRoot":""}