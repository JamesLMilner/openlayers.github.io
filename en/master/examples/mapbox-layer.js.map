{"version":3,"sources":["webpack:///./mapbox-layer.js"],"names":["__webpack_require__","r","__webpack_exports__","_src_ol_Map_js__WEBPACK_IMPORTED_MODULE_0__","_src_ol_View_js__WEBPACK_IMPORTED_MODULE_1__","_src_ol_layer_Layer_js__WEBPACK_IMPORTED_MODULE_2__","_src_ol_proj_js__WEBPACK_IMPORTED_MODULE_3__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_4__","_src_ol_style_js__WEBPACK_IMPORTED_MODULE_5__","_src_ol_layer_Vector_js__WEBPACK_IMPORTED_MODULE_6__","_src_ol_source_Vector_js__WEBPACK_IMPORTED_MODULE_7__","_src_ol_format_GeoJSON_js__WEBPACK_IMPORTED_MODULE_8__","center","mbMap","mapboxgl","Map","style","attributionControl","boxZoom","container","doubleClickZoom","dragPan","dragRotate","interactive","keyboard","pitchWithRotate","scrollZoom","touchZoomRotate","mbLayer","render","frameState","const","canvas","getCanvas","viewState","visible","getVisible","display","opacity","getOpacity","rotation","rotateTo","Math","PI","animate","jumpTo","Object","zoom","_frame","cancel","_render","stroke","color","width","vectorLayer","source","url","format","target","view","layers"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,IAAAM,EAAAN,EAAA,GAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IASMY,EAAS,EAAE,KAAM,MAGjBC,EAAQ,IAAIC,SAASC,IAAI,CAC7BC,MAAO,iFACPC,oBAAoB,EACpBC,SAAS,EACTN,OAAQA,EACRO,UAAW,MACXC,iBAAiB,EACjBC,SAAS,EACTC,YAAY,EACZC,aAAa,EACbC,UAAU,EACVC,iBAAiB,EACjBC,YAAY,EACZC,iBAAiB,IAGbC,EAAU,IAAIvB,EAAA,EAAM,CACxBwB,OAAQ,SAASC,GACfC,IAAMC,EAASnB,EAAMoB,YACfC,EAAYJ,EAAWI,UAEvBC,EAAUP,EAAQQ,aACxBJ,EAAOhB,MAAMqB,QAAUF,EAAU,QAAU,OAE3CJ,IAAMO,EAAUV,EAAQW,aACxBP,EAAOhB,MAAMsB,QAAUA,EAGvBP,IAAMS,EAAWN,EAAUM,SAqB3B,OApBIA,GACF3B,EAAM4B,SAAqB,KAAXD,EAAiBE,KAAKC,GAAI,CACxCC,SAAS,IAGb/B,EAAMgC,OAAO,CACXjC,OAAQkC,OAAAxC,EAAA,EAAAwC,CAASZ,EAAUtB,QAC3BmC,KAAMb,EAAUa,KAAO,EACvBH,SAAS,IAMP/B,EAAMmC,SACRnC,EAAMmC,OAAOC,SACbpC,EAAMmC,OAAS,MAEjBnC,EAAMqC,UAEClB,KAILhB,EAAQ,IAAIT,EAAA,EAAM,CACtB4C,OAAQ,IAAI3C,EAAA,EAAO,CACjB4C,MAAO,UACPC,MAAO,MAILC,EAAc,IAAI7C,EAAA,EAAY,CAClC8C,OAAQ,IAAI7C,EAAA,EAAa,CACvB8C,IAAK,iCACLC,OAAQ,IAAI9C,EAAA,IAEdK,MAAOA,IAGG,IAAIb,EAAA,EAAI,CAClBuD,OAAQ,MACRC,KAAM,IAAIvD,EAAA,EAAK,CACbQ,OAAQkC,OAAAxC,EAAA,EAAAwC,CAAWlC,GACnBmC,KAAM,IAERa,OAAQ,CAAChC,EAAS0B","file":"mapbox-layer.js","sourcesContent":["import Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\nimport Layer from '../src/ol/layer/Layer.js';\nimport {toLonLat, fromLonLat} from '../src/ol/proj.js';\nimport {Stroke, Style} from '../src/ol/style.js';\nimport VectorLayer from '../src/ol/layer/Vector.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport GeoJSON from '../src/ol/format/GeoJSON.js';\n\nconst center = [-98.8, 37.9];\nconst key = 'ER67WIiPdCQvhgsUjoWK';\n\nconst mbMap = new mapboxgl.Map({\n  style: 'https://maps.tilehosting.com/styles/bright/style.json?key=' + key,\n  attributionControl: false,\n  boxZoom: false,\n  center: center,\n  container: 'map',\n  doubleClickZoom: false,\n  dragPan: false,\n  dragRotate: false,\n  interactive: false,\n  keyboard: false,\n  pitchWithRotate: false,\n  scrollZoom: false,\n  touchZoomRotate: false\n});\n\nconst mbLayer = new Layer({\n  render: function(frameState) {\n    const canvas = mbMap.getCanvas();\n    const viewState = frameState.viewState;\n\n    const visible = mbLayer.getVisible();\n    canvas.style.display = visible ? 'block' : 'none';\n\n    const opacity = mbLayer.getOpacity();\n    canvas.style.opacity = opacity;\n\n    // adjust view parameters in mapbox\n    const rotation = viewState.rotation;\n    if (rotation) {\n      mbMap.rotateTo(-rotation * 180 / Math.PI, {\n        animate: false\n      });\n    }\n    mbMap.jumpTo({\n      center: toLonLat(viewState.center),\n      zoom: viewState.zoom - 1,\n      animate: false\n    });\n\n    // cancel the scheduled update & trigger synchronous redraw\n    // see https://github.com/mapbox/mapbox-gl-js/issues/7893#issue-408992184\n    // NOTE: THIS MIGHT BREAK WHEN UPDATING MAPBOX\n    if (mbMap._frame) {\n      mbMap._frame.cancel();\n      mbMap._frame = null;\n    }\n    mbMap._render();\n\n    return canvas;\n  }\n});\n\nconst style = new Style({\n  stroke: new Stroke({\n    color: '#319FD3',\n    width: 2\n  })\n});\n\nconst vectorLayer = new VectorLayer({\n  source: new VectorSource({\n    url: 'data/geojson/countries.geojson',\n    format: new GeoJSON()\n  }),\n  style: style\n});\n\nconst map = new Map({\n  target: 'map',\n  view: new View({\n    center: fromLonLat(center),\n    zoom: 4\n  }),\n  layers: [mbLayer, vectorLayer]\n});\n"],"sourceRoot":""}