{"version":3,"file":"feature-move-animation.js","mappings":"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","sources":["webpack:///../src/ol/geom/flat/flip.js","webpack:///../src/ol/format/Polyline.js","webpack:///./feature-move-animation.js"],"sourcesContent":["/**\n * @module ol/geom/flat/flip\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [destOffset] Destination offset.\n * @return {Array<number>} Flat coordinates.\n */\nexport function flipXY(flatCoordinates, offset, end, stride, dest, destOffset) {\n  if (dest !== undefined) {\n    dest = dest;\n    destOffset = destOffset !== undefined ? destOffset : 0;\n  } else {\n    dest = [];\n    destOffset = 0;\n  }\n  let j = offset;\n  while (j < end) {\n    const x = flatCoordinates[j++];\n    dest[destOffset++] = flatCoordinates[j++];\n    dest[destOffset++] = x;\n    for (let k = 2; k < stride; ++k) {\n      dest[destOffset++] = flatCoordinates[j++];\n    }\n  }\n  dest.length = destOffset;\n  return dest;\n}\n","/**\n * @module ol/format/Polyline\n */\nimport Feature from '../Feature.js';\nimport LineString from '../geom/LineString.js';\nimport TextFeature from './TextFeature.js';\nimport {assert} from '../asserts.js';\nimport {flipXY} from '../geom/flat/flip.js';\nimport {get as getProjection} from '../proj.js';\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\nimport {inflateCoordinates} from '../geom/flat/inflate.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.\n * @property {import(\"../geom/Geometry.js\").GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the format reader.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the Encoded\n * Polyline Algorithm Format.\n *\n * When reading features, the coordinates are assumed to be in two dimensions\n * and in [latitude, longitude] order.\n *\n * As Polyline sources contain a single feature,\n * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the\n * feature in an array.\n *\n * @api\n */\nclass Polyline extends TextFeature {\n  /**\n   * @param {Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection('EPSG:4326');\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.factor_ = options.factor ? options.factor : 1e5;\n\n    /**\n     * @private\n     * @type {import(\"../geom/Geometry.js\").GeometryLayout}\n     */\n    this.geometryLayout_ = options.geometryLayout\n      ? options.geometryLayout\n      : 'XY';\n  }\n\n  /**\n   * @protected\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromText(text, options) {\n    const geometry = this.readGeometryFromText(text, options);\n    return new Feature(geometry);\n  }\n\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromText(text, options) {\n    const feature = this.readFeatureFromText(text, options);\n    return [feature];\n  }\n\n  /**\n   * @param {string} text Text.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromText(text, options) {\n    const stride = getStrideForLayout(this.geometryLayout_);\n    const flatCoordinates = decodeDeltas(text, stride, this.factor_);\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n    const coordinates = inflateCoordinates(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride\n    );\n    const lineString = new LineString(coordinates, this.geometryLayout_);\n\n    return transformGeometryWithOptions(\n      lineString,\n      false,\n      this.adaptOptions(options)\n    );\n  }\n\n  /**\n   * @param {import(\"../Feature.js\").default<LineString>} feature Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeFeatureText(feature, options) {\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      return this.writeGeometryText(geometry, options);\n    } else {\n      assert(false, 40); // Expected `feature` to have a geometry\n      return '';\n    }\n  }\n\n  /**\n   * @param {Array<import(\"../Feature.js\").default<LineString>>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeFeaturesText(features, options) {\n    return this.writeFeatureText(features[0], options);\n  }\n\n  /**\n   * @param {LineString} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @protected\n   * @return {string} Text.\n   */\n  writeGeometryText(geometry, options) {\n    geometry =\n      /** @type {LineString} */\n      (\n        transformGeometryWithOptions(geometry, true, this.adaptOptions(options))\n      );\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);\n    return encodeDeltas(flatCoordinates, stride, this.factor_);\n  }\n}\n\n/**\n * Encode a list of n-dimensional points and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of n-dimensional points.\n * @param {number} stride The number of dimension of the points in the list.\n * @param {number} [factor] The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\nexport function encodeDeltas(numbers, stride, factor) {\n  factor = factor ? factor : 1e5;\n  let d;\n\n  const lastNumbers = new Array(stride);\n  for (d = 0; d < stride; ++d) {\n    lastNumbers[d] = 0;\n  }\n\n  for (let i = 0, ii = numbers.length; i < ii; ) {\n    for (d = 0; d < stride; ++d, ++i) {\n      const num = numbers[i];\n      const delta = num - lastNumbers[d];\n      lastNumbers[d] = num;\n\n      numbers[i] = delta;\n    }\n  }\n\n  return encodeFloats(numbers, factor);\n}\n\n/**\n * Decode a list of n-dimensional points from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} stride The number of dimension of the points in the\n *     encoded string.\n * @param {number} [factor] The factor by which the resulting numbers will\n *     be divided. Default is `1e5`.\n * @return {Array<number>} A list of n-dimensional points.\n * @api\n */\nexport function decodeDeltas(encoded, stride, factor) {\n  factor = factor ? factor : 1e5;\n  let d;\n\n  /** @type {Array<number>} */\n  const lastNumbers = new Array(stride);\n  for (d = 0; d < stride; ++d) {\n    lastNumbers[d] = 0;\n  }\n\n  const numbers = decodeFloats(encoded, factor);\n\n  for (let i = 0, ii = numbers.length; i < ii; ) {\n    for (d = 0; d < stride; ++d, ++i) {\n      lastNumbers[d] += numbers[i];\n\n      numbers[i] = lastNumbers[d];\n    }\n  }\n\n  return numbers;\n}\n\n/**\n * Encode a list of floating point numbers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of floating point numbers.\n * @param {number} [factor] The factor by which the numbers will be\n *     multiplied. The remaining decimal places will get rounded away.\n *     Default is `1e5`.\n * @return {string} The encoded string.\n * @api\n */\nexport function encodeFloats(numbers, factor) {\n  factor = factor ? factor : 1e5;\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    numbers[i] = Math.round(numbers[i] * factor);\n  }\n\n  return encodeSignedIntegers(numbers);\n}\n\n/**\n * Decode a list of floating point numbers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @param {number} [factor] The factor by which the result will be divided.\n *     Default is `1e5`.\n * @return {Array<number>} A list of floating point numbers.\n * @api\n */\nexport function decodeFloats(encoded, factor) {\n  factor = factor ? factor : 1e5;\n  const numbers = decodeSignedIntegers(encoded);\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    numbers[i] /= factor;\n  }\n  return numbers;\n}\n\n/**\n * Encode a list of signed integers and return an encoded string\n *\n * Attention: This function will modify the passed array!\n *\n * @param {Array<number>} numbers A list of signed integers.\n * @return {string} The encoded string.\n */\nexport function encodeSignedIntegers(numbers) {\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    const num = numbers[i];\n    numbers[i] = num < 0 ? ~(num << 1) : num << 1;\n  }\n  return encodeUnsignedIntegers(numbers);\n}\n\n/**\n * Decode a list of signed integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array<number>} A list of signed integers.\n */\nexport function decodeSignedIntegers(encoded) {\n  const numbers = decodeUnsignedIntegers(encoded);\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    const num = numbers[i];\n    numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;\n  }\n  return numbers;\n}\n\n/**\n * Encode a list of unsigned integers and return an encoded string\n *\n * @param {Array<number>} numbers A list of unsigned integers.\n * @return {string} The encoded string.\n */\nexport function encodeUnsignedIntegers(numbers) {\n  let encoded = '';\n  for (let i = 0, ii = numbers.length; i < ii; ++i) {\n    encoded += encodeUnsignedInteger(numbers[i]);\n  }\n  return encoded;\n}\n\n/**\n * Decode a list of unsigned integers from an encoded string\n *\n * @param {string} encoded An encoded string.\n * @return {Array<number>} A list of unsigned integers.\n */\nexport function decodeUnsignedIntegers(encoded) {\n  const numbers = [];\n  let current = 0;\n  let shift = 0;\n  for (let i = 0, ii = encoded.length; i < ii; ++i) {\n    const b = encoded.charCodeAt(i) - 63;\n    current |= (b & 0x1f) << shift;\n    if (b < 0x20) {\n      numbers.push(current);\n      current = 0;\n      shift = 0;\n    } else {\n      shift += 5;\n    }\n  }\n  return numbers;\n}\n\n/**\n * Encode one single unsigned integer and return an encoded string\n *\n * @param {number} num Unsigned integer that should be encoded.\n * @return {string} The encoded string.\n */\nexport function encodeUnsignedInteger(num) {\n  let value,\n    encoded = '';\n  while (num >= 0x20) {\n    value = (0x20 | (num & 0x1f)) + 63;\n    encoded += String.fromCharCode(value);\n    num >>= 5;\n  }\n  value = num + 63;\n  encoded += String.fromCharCode(value);\n  return encoded;\n}\n\nexport default Polyline;\n","import Feature from '../src/ol/Feature.js';\nimport Map from '../src/ol/Map.js';\nimport Point from '../src/ol/geom/Point.js';\nimport Polyline from '../src/ol/format/Polyline.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {\n  Circle as CircleStyle,\n  Fill,\n  Icon,\n  Stroke,\n  Style,\n} from '../src/ol/style.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {getVectorContext} from '../src/ol/render.js';\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst center = [-5639523.95, -3501274.52];\nconst map = new Map({\n  target: document.getElementById('map'),\n  view: new View({\n    center: center,\n    zoom: 10,\n    minZoom: 2,\n    maxZoom: 19,\n  }),\n  layers: [\n    new TileLayer({\n      source: new XYZ({\n        attributions: attributions,\n        url: 'https://api.maptiler.com/maps/hybrid/{z}/{x}/{y}.jpg?key=' + key,\n        tileSize: 512,\n      }),\n    }),\n  ],\n});\n\n// The polyline string is read from a JSON similiar to those returned\n// by directions APIs such as Openrouteservice and Mapbox.\nfetch('data/polyline/route.json').then(function (response) {\n  response.json().then(function (result) {\n    const polyline = result.routes[0].geometry;\n\n    const route = new Polyline({\n      factor: 1e6,\n    }).readGeometry(polyline, {\n      dataProjection: 'EPSG:4326',\n      featureProjection: 'EPSG:3857',\n    });\n\n    const routeFeature = new Feature({\n      type: 'route',\n      geometry: route,\n    });\n    const startMarker = new Feature({\n      type: 'icon',\n      geometry: new Point(route.getFirstCoordinate()),\n    });\n    const endMarker = new Feature({\n      type: 'icon',\n      geometry: new Point(route.getLastCoordinate()),\n    });\n    const position = startMarker.getGeometry().clone();\n    const geoMarker = new Feature({\n      type: 'geoMarker',\n      geometry: position,\n    });\n\n    const styles = {\n      'route': new Style({\n        stroke: new Stroke({\n          width: 6,\n          color: [237, 212, 0, 0.8],\n        }),\n      }),\n      'icon': new Style({\n        image: new Icon({\n          anchor: [0.5, 1],\n          src: 'data/icon.png',\n        }),\n      }),\n      'geoMarker': new Style({\n        image: new CircleStyle({\n          radius: 7,\n          fill: new Fill({color: 'black'}),\n          stroke: new Stroke({\n            color: 'white',\n            width: 2,\n          }),\n        }),\n      }),\n    };\n\n    const vectorLayer = new VectorLayer({\n      source: new VectorSource({\n        features: [routeFeature, geoMarker, startMarker, endMarker],\n      }),\n      style: function (feature) {\n        return styles[feature.get('type')];\n      },\n    });\n\n    map.addLayer(vectorLayer);\n\n    const speedInput = document.getElementById('speed');\n    const startButton = document.getElementById('start-animation');\n    let animating = false;\n    let distance = 0;\n    let lastTime;\n\n    function moveFeature(event) {\n      const speed = Number(speedInput.value);\n      const time = event.frameState.time;\n      const elapsedTime = time - lastTime;\n      distance = (distance + (speed * elapsedTime) / 1e6) % 2;\n      lastTime = time;\n\n      const currentCoordinate = route.getCoordinateAt(\n        distance > 1 ? 2 - distance : distance\n      );\n      position.setCoordinates(currentCoordinate);\n      const vectorContext = getVectorContext(event);\n      vectorContext.setStyle(styles.geoMarker);\n      vectorContext.drawGeometry(position);\n      // tell OpenLayers to continue the postrender animation\n      map.render();\n    }\n\n    function startAnimation() {\n      animating = true;\n      lastTime = Date.now();\n      startButton.textContent = 'Stop Animation';\n      vectorLayer.on('postrender', moveFeature);\n      // hide geoMarker and trigger map render through change event\n      geoMarker.setGeometry(null);\n    }\n\n    function stopAnimation() {\n      animating = false;\n      startButton.textContent = 'Start Animation';\n\n      // Keep marker at current animation position\n      geoMarker.setGeometry(position);\n      vectorLayer.un('postrender', moveFeature);\n    }\n\n    startButton.addEventListener('click', function () {\n      if (animating) {\n        stopAnimation();\n      } else {\n        startAnimation();\n      }\n    });\n  });\n});\n"],"names":["flipXY","flatCoordinates","offset","end","stride","dest","destOffset","undefined","j","x","k","length","Polyline","TextFeature","constructor","options","super","this","dataProjection","getProjection","factor_","factor","geometryLayout_","geometryLayout","readFeatureFromText","text","geometry","readGeometryFromText","Feature","readFeaturesFromText","getStrideForLayout","encoded","d","lastNumbers","Array","numbers","current","shift","i","ii","b","charCodeAt","push","decodeUnsignedIntegers","num","decodeSignedIntegers","decodeFloats","decodeDeltas","coordinates","inflateCoordinates","lineString","LineString","transformGeometryWithOptions","adaptOptions","writeFeatureText","feature","getGeometry","writeGeometryText","assert","writeFeaturesText","features","getFlatCoordinates","getStride","delta","Math","round","encodeUnsignedInteger","encodeUnsignedIntegers","encodeSignedIntegers","encodeFloats","encodeDeltas","value","String","fromCharCode","map","Map","target","document","getElementById","view","View","center","zoom","minZoom","maxZoom","layers","TileLayer","source","XYZ","attributions","url","tileSize","fetch","then","response","json","result","polyline","routes","route","readGeometry","featureProjection","routeFeature","type","startMarker","Point","getFirstCoordinate","endMarker","getLastCoordinate","position","clone","geoMarker","styles","Style","stroke","Stroke","width","color","image","Icon","anchor","src","CircleStyle","radius","fill","Fill","vectorLayer","VectorLayer","VectorSource","style","get","addLayer","speedInput","startButton","lastTime","animating","distance","moveFeature","event","speed","Number","time","frameState","currentCoordinate","getCoordinateAt","setCoordinates","vectorContext","getVectorContext","setStyle","drawGeometry","render","addEventListener","textContent","setGeometry","un","Date","now","on"],"sourceRoot":""}