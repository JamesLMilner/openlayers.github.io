{"version":3,"file":"vector-wfs-getfeature.js","mappings":"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","sources":["webpack:///../src/ol/format/GML3.js","webpack:///../src/ol/format/GML32.js","webpack:///../src/ol/format/filter/Filter.js","webpack:///../src/ol/format/filter/LogicalNary.js","webpack:///../src/ol/format/filter/And.js","webpack:///../src/ol/format/filter/Bbox.js","webpack:///../src/ol/format/filter/Comparison.js","webpack:///../src/ol/format/filter/ComparisonBinary.js","webpack:///../src/ol/format/filter/EqualTo.js","webpack:///../src/ol/format/filter/IsLike.js","webpack:///../src/ol/format/filter.js","webpack:///../src/ol/format/WFS.js","webpack:///./vector-wfs-getfeature.js"],"sourcesContent":["/**\n * @module ol/format/GML3\n */\nimport GML2 from './GML2.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  getAllTextContent,\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n  makeSimpleNodeFactory,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {createOrUpdate} from '../extent.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation =\n  GMLNS +\n  ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n  '1.0.0/gmlsf.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember',\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ =\n      options.multiCurve !== undefined ? options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ =\n      options.multiSurface !== undefined ? options.multiSurface : true;\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Polygon.\n   */\n  readFlatCurveRing(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    const flatCoordinates = [];\n    for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n      extend(flatCoordinates, lineStrings[i].getFlatCoordinates());\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop(\n      [],\n      this.MULTISURFACE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  curveMemberParser(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  surfaceMemberParser(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.PATCHES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment(node, objectStack) {\n    return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.FLAT_LINEAR_RINGS_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  interiorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  exteriorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop(\n      [null],\n      this.SURFACE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, 'XYZ', ends);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.CURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, 'XYZ');\n      return lineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.ENVELOPE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    return createOrUpdate(\n      flatCoordinates[1][0],\n      flatCoordinates[1][1],\n      flatCoordinates[2][0],\n      flatCoordinates[2][1]\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while ((m = re.exec(s))) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    if (axisOrientation === 'neu') {\n      let i, ii;\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (\n      /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n    ) {\n      dim = readNonNegativeIntegerString(\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n      );\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    const point = value.getCoordinates();\n    let coords;\n    // only 2d for simple features profile\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = point[0] + ' ' + point[1];\n    } else {\n      coords = point[1] + ' ' + point[0];\n    }\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [srsName] Optional srsName\n   * @param {boolean} [hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, srsName, hasZ) {\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    let coords =\n      axisOrientation.substr(0, 2) === 'en'\n        ? point[0] + ' ' + point[1]\n        : point[1] + ' ' + point[0];\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}),\n      this.ENVELOPE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack,\n      keys,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(\n      parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'interior' : 'exterior'\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS,\n        this.RING_NODE_FACTORY_,\n        rings,\n        objectStack,\n        undefined,\n        this\n      );\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (\n      node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment'\n    ) {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      polygons,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS,\n      makeSimpleNodeFactory('pointMember'),\n      points,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      lines,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const item = Object.assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\n        context\n      );\n    } else {\n      value = transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\n        true,\n        context\n      );\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      this.GEOMETRY_SERIALIZERS,\n      this.GEOMETRY_NODE_FACTORY_,\n      [value],\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n          if (\n            key == geometryName ||\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\n              'function'\n          ) {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(\n                this.writeGeometryElement,\n                this\n              );\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] =\n                makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack,\n      keys\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(\n      this.writeFeatureElement,\n      this\n    );\n    const item = Object.assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      serializers,\n      makeSimpleNodeFactory(featureType, featureNS),\n      features,\n      objectStack\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      this.namespace,\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        value\n      ).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace, nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Node} Node.\n   * @api\n   */\n  writeGeometryNode(geometry, options) {\n    options = this.adaptOptions(options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n   * @return {Element} Node.\n   * @api\n   */\n  writeFeaturesNode(features, options) {\n    options = this.adaptOptions(options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation\n    );\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType,\n    };\n    if (options) {\n      Object.assign(context, options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML3.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML3.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML3.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML3;\n","/**\n * @module ol/format/GML32\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GMLBase from './GMLBase.js';\nimport {\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n} from '../xml.js';\nimport {writeStringTextNode} from '../format/xsd.js';\n\n/**\n * @classdesc Feature format for reading and writing data in the GML format\n *            version 3.2.1.\n * @api\n */\nclass GML32 extends GML3 {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(options);\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';\n  }\n}\n\nGML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML32.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML32.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML32.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOINT_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTILINESTRING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n    'lineStringMembers': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOLYGON_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POINTMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.LINESTRINGMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POLYGONMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML32.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML32.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML32;\n","/**\n * @module ol/format/filter/Filter\n */\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @abstract\n */\nclass Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   */\n  constructor(tagName) {\n    /**\n     * @private\n     * @type {!string}\n     */\n    this.tagName_ = tagName;\n  }\n\n  /**\n   * The XML tag name for a filter.\n   * @return {!string} Name.\n   */\n  getTagName() {\n    return this.tagName_;\n  }\n}\n\nexport default Filter;\n","/**\n * @module ol/format/filter/LogicalNary\n */\nimport Filter from './Filter.js';\nimport {assert} from '../../asserts.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\nclass LogicalNary extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n  constructor(tagName, conditions) {\n    super(tagName);\n\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n    this.conditions = conditions;\n    assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n  }\n}\n\nexport default LogicalNary;\n","/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n}\n\nexport default And;\n","/**\n * @module ol/format/filter/Bbox\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @api\n */\nclass Bbox extends Filter {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\n   * @param {string} [srsName] SRS name. No srsName attribute will be set\n   * on geometries when this is not provided.\n   */\n  constructor(geometryName, extent, srsName) {\n    super('BBOX');\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName;\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent = extent;\n    if (extent.length !== 4) {\n      throw new Error(\n        'Expected an extent with four values ([minX, minY, maxX, maxY])'\n      );\n    }\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = srsName;\n  }\n}\n\nexport default Bbox;\n","/**\n * @module ol/format/filter/Comparison\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @abstract\n */\nclass Comparison extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   */\n  constructor(tagName, propertyName) {\n    super(tagName);\n\n    /**\n     * @type {!string}\n     */\n    this.propertyName = propertyName;\n  }\n}\n\nexport default Comparison;\n","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @abstract\n */\nclass ComparisonBinary extends Comparison {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(tagName, propertyName, expression, matchCase) {\n    super(tagName, propertyName);\n\n    /**\n     * @type {!(string|number)}\n     */\n    this.expression = expression;\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = matchCase;\n  }\n}\n\nexport default ComparisonBinary;\n","/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(propertyName, expression, matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, matchCase);\n  }\n}\n\nexport default EqualTo;\n","/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string} [wildCard] Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string} [singleChar] pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string} [escapeChar] Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean} [matchCase] Case-sensitive?\n   */\n  constructor(\n    propertyName,\n    pattern,\n    wildCard,\n    singleChar,\n    escapeChar,\n    matchCase\n  ) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = wildCard !== undefined ? wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = singleChar !== undefined ? singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = escapeChar !== undefined ? escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = matchCase;\n  }\n}\n\nexport default IsLike;\n","/**\n * @module ol/format/filter\n */\nimport And from './filter/And.js';\nimport Bbox from './filter/Bbox.js';\nimport Contains from './filter/Contains.js';\nimport DWithin from './filter/DWithin.js';\nimport Disjoint from './filter/Disjoint.js';\nimport During from './filter/During.js';\nimport EqualTo from './filter/EqualTo.js';\nimport GreaterThan from './filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\nimport Intersects from './filter/Intersects.js';\nimport IsBetween from './filter/IsBetween.js';\nimport IsLike from './filter/IsLike.js';\nimport IsNull from './filter/IsNull.js';\nimport LessThan from './filter/LessThan.js';\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\nimport Not from './filter/Not.js';\nimport NotEqualTo from './filter/NotEqualTo.js';\nimport Or from './filter/Or.js';\nimport ResourceId from './filter/ResourceId.js';\nimport Within from './filter/Within.js';\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!And} `<And>` operator.\n * @api\n */\nexport function and(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params))();\n}\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!Or} `<Or>` operator.\n * @api\n */\nexport function or(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params))();\n}\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\n * @return {!Not} `<Not>` operator.\n * @api\n */\nexport function not(condition) {\n  return new Not(condition);\n}\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../extent.js\").Extent} extent Extent.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Bbox} `<BBOX>` operator.\n * @api\n */\nexport function bbox(geometryName, extent, srsName) {\n  return new Bbox(geometryName, extent, srsName);\n}\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Contains} `<Contains>` operator.\n * @api\n */\nexport function contains(geometryName, geometry, srsName) {\n  return new Contains(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Intersects} `<Intersects>` operator.\n * @api\n */\nexport function intersects(geometryName, geometry, srsName) {\n  return new Intersects(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Disjoint>` operator to test whether a geometry-valued property\n * is disjoint to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Disjoint} `<Disjoint>` operator.\n * @api\n */\nexport function disjoint(geometryName, geometry, srsName) {\n  return new Disjoint(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Within} `<Within>` operator.\n * @api\n */\nexport function within(geometryName, geometry, srsName) {\n  return new Within(geometryName, geometry, srsName);\n}\n\n/**\n * Create a `<DWithin>` operator to test whether a geometry-valued property\n * is within a distance to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {!number} distance Distance.\n * @param {!string} unit Unit.\n * @param {string} [srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!DWithin} `<DWithin>` operator.\n * @api\n */\nexport function dwithin(geometryName, geometry, distance, unit, srsName) {\n  return new DWithin(geometryName, geometry, distance, unit, srsName);\n}\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\nexport function equalTo(propertyName, expression, matchCase) {\n  return new EqualTo(propertyName, expression, matchCase);\n}\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\nexport function notEqualTo(propertyName, expression, matchCase) {\n  return new NotEqualTo(propertyName, expression, matchCase);\n}\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @return {!IsNull} `<PropertyIsNull>` operator.\n * @api\n */\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @return {!IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string} [wildCard] Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string} [singleChar] pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string} [escapeChar] Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean} [matchCase] Case-sensitive?\n * @return {!IsLike} `<PropertyIsLike>` operator.\n * @api\n */\nexport function like(\n  propertyName,\n  pattern,\n  wildCard,\n  singleChar,\n  escapeChar,\n  matchCase\n) {\n  return new IsLike(\n    propertyName,\n    pattern,\n    wildCard,\n    singleChar,\n    escapeChar,\n    matchCase\n  );\n}\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @return {!During} `<During>` operator.\n * @api\n */\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\n\nexport function resourceId(rid) {\n  return new ResourceId(rid);\n}\n","/**\n * @module ol/format/WFS\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GML32 from './GML32.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport XMLFeature from './XMLFeature.js';\nimport {\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  isDocument,\n  makeArrayPusher,\n  makeChildAppender,\n  makeObjectPropertySetter,\n  makeSimpleNodeFactory,\n  parse,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {and as andFilterFn, bbox as bboxFilterFn} from './filter.js';\nimport {assert} from '../asserts.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  readNonNegativeIntegerString,\n  readPositiveInteger,\n  writeStringTextNode,\n} from './xsd.js';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst FEATURE_COLLECTION_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': makeObjectPropertySetter(\n      GMLBase.prototype.readExtentElement,\n      'bounds'\n    ),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'member': makeArrayPusher(GMLBase.prototype.readFeaturesInternal),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_SUMMARY_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_RESPONSE_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary'\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary'\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst QUERY_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst TRANSACTION_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n};\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.\n * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\n * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * @typedef {Object} WriteGetFeatureOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to\n * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are\n * ignored.).\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {string} [outputFormat] Output format.\n * @property {number} [maxFeatures] Maximum number of features to fetch.\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\n * @property {number} [count] Number of features to retrieve when paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\n * Web Feature Services have repurposed `maxfeatures` instead.\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`\n * option must be set.\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\n * {@link module:ol/format/filter} for more information.\n * @property {string} [resultType] Indicates what response should be returned,\n * e.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\n */\n\n/**\n * @typedef {Object} FeatureType\n * @property {!string} name The feature type name.\n * @property {!import(\"../extent.js\").Extent} bbox Extent to use for the BBOX filter.\n * @property {!string} geometryName Geometry name to use in the BBOX filter.\n */\n\n/**\n * @typedef {Object} WriteTransactionOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {string} featureType The feature type name.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * Number of features; bounds/extent.\n * @typedef {Object} FeatureCollectionMetadata\n * @property {number} numberOfFeatures NumberOfFeatures.\n * @property {import(\"../extent.js\").Extent} bounds Bounds.\n */\n\n/**\n * Total deleted; total inserted; total updated; array of insert ids.\n * @typedef {Object} TransactionResponse\n * @property {number} totalDeleted TotalDeleted.\n * @property {number} totalInserted TotalInserted.\n * @property {number} totalUpdated TotalUpdated.\n * @property {Array<string>} insertIds InsertIds.\n */\n\n/**\n * @type {string}\n */\nconst FEATURE_PREFIX = 'feature';\n\n/**\n * @type {string}\n */\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n/**\n * @type {Object<string, string>}\n */\nconst OGCNS = {\n  '2.0.0': 'http://www.opengis.net/ogc/1.1',\n  '1.1.0': 'http://www.opengis.net/ogc',\n  '1.0.0': 'http://www.opengis.net/ogc',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst WFSNS = {\n  '2.0.0': 'http://www.opengis.net/wfs/2.0',\n  '1.1.0': 'http://www.opengis.net/wfs',\n  '1.0.0': 'http://www.opengis.net/wfs',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst FESNS = {\n  '2.0.0': 'http://www.opengis.net/fes/2.0',\n  '1.1.0': 'http://www.opengis.net/fes',\n  '1.0.0': 'http://www.opengis.net/fes',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst SCHEMA_LOCATIONS = {\n  '2.0.0':\n    'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',\n  '1.1.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',\n};\n\n/**\n * @type {Object<string, object>}\n */\nconst GML_FORMATS = {\n  '2.0.0': GML32,\n  '1.1.0': GML3,\n  '1.0.0': GML2,\n};\n\n/**\n * @const\n * @type {string}\n */\nconst DEFAULT_VERSION = '1.1.0';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option to override the default.\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\n *\n * @api\n */\nclass WFS extends XMLFeature {\n  /**\n   * @param {Options} [options] Optional configuration object.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version ? options.version : DEFAULT_VERSION;\n\n    /**\n     * @private\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType_ = options.featureType;\n\n    /**\n     * @private\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS_ = options.featureNS;\n\n    /**\n     * @private\n     * @type {GMLBase}\n     */\n    this.gmlFormat_ = options.gmlFormat\n      ? options.gmlFormat\n      : new GML_FORMATS[this.version_]();\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.schemaLocation_ = options.schemaLocation\n      ? options.schemaLocation\n      : SCHEMA_LOCATIONS[this.version_];\n  }\n\n  /**\n   * @return {Array<string>|string|undefined} featureType\n   */\n  getFeatureType() {\n    return this.featureType_;\n  }\n\n  /**\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\n   */\n  setFeatureType(featureType) {\n    this.featureType_ = featureType;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, options) {\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    Object.assign(context, {\n      'featureType': this.featureType_,\n      'featureNS': this.featureNS_,\n    });\n\n    Object.assign(context, this.getReadOptions(node, options ? options : {}));\n    const objectStack = [context];\n    let featuresNS;\n    if (this.version_ === '2.0.0') {\n      featuresNS = FEATURE_COLLECTION_PARSERS;\n    } else {\n      featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;\n    }\n    let features = pushParseAndPop(\n      [],\n      featuresNS,\n      node,\n      objectStack,\n      this.gmlFormat_\n    );\n    if (!features) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * Read transaction response of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {TransactionResponse|undefined} Transaction response.\n   * @api\n   */\n  readTransactionResponse(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readTransactionResponseFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readTransactionResponseFromDocument(\n        /** @type {Document} */ (source)\n      );\n    } else {\n      return this.readTransactionResponseFromNode(\n        /** @type {Element} */ (source)\n      );\n    }\n  }\n\n  /**\n   * Read feature collection metadata of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   * @api\n   */\n  readFeatureCollectionMetadata(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureCollectionMetadataFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readFeatureCollectionMetadataFromDocument(\n        /** @type {Document} */ (source)\n      );\n    } else {\n      return this.readFeatureCollectionMetadataFromNode(\n        /** @type {Element} */ (source)\n      );\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFeatureCollectionMetadataFromNode(\n          /** @type {Element} */ (n)\n        );\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromNode(node) {\n    const result = {};\n    const value = readNonNegativeIntegerString(\n      node.getAttribute('numberOfFeatures')\n    );\n    result['numberOfFeatures'] = value;\n    return pushParseAndPop(\n      /** @type {FeatureCollectionMetadata} */ (result),\n      FEATURE_COLLECTION_PARSERS,\n      node,\n      [],\n      this.gmlFormat_\n    );\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readTransactionResponseFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromNode(node) {\n    return pushParseAndPop(\n      /** @type {TransactionResponse} */ ({}),\n      TRANSACTION_RESPONSE_PARSERS,\n      node,\n      []\n    );\n  }\n\n  /**\n   * Encode format as WFS `GetFeature` and return the Node.\n   *\n   * @param {WriteGetFeatureOptions} options Options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeGetFeature(options) {\n    const node = createElementNS(WFSNS[this.version_], 'GetFeature');\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', this.version_);\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', String(options.maxFeatures));\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', String(options.startIndex));\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', String(options.count));\n    }\n    if (options.viewParams !== undefined) {\n      node.setAttribute('viewParams', options.viewParams);\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation_\n    );\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    Object.assign(context, {\n      'version': this.version_,\n      'srsName': options.srsName,\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n      'featurePrefix': options.featurePrefix,\n      'propertyNames': options.propertyNames ? options.propertyNames : [],\n    });\n    assert(Array.isArray(options.featureTypes), 11); // `options.featureTypes` must be an Array\n    if (typeof options.featureTypes[0] === 'string') {\n      let filter = options.filter;\n      if (options.bbox) {\n        assert(options.geometryName, 12); // `options.geometryName` must also be provided when `options.bbox` is set\n        filter = this.combineBboxAndFilter(\n          options.geometryName,\n          options.bbox,\n          options.srsName,\n          filter\n        );\n      }\n      Object.assign(context, {\n        'geometryName': options.geometryName,\n        'filter': filter,\n      });\n      writeGetFeature(\n        node,\n        /** @type {!Array<string>} */ (options.featureTypes),\n        [context]\n      );\n    } else {\n      // Write one query node per element in featuresType.\n      options.featureTypes.forEach((/** @type {FeatureType} */ featureType) => {\n        const completeFilter = this.combineBboxAndFilter(\n          featureType.geometryName,\n          featureType.bbox,\n          options.srsName,\n          options.filter\n        );\n        Object.assign(context, {\n          'geometryName': featureType.geometryName,\n          'filter': completeFilter,\n        });\n        writeGetFeature(node, [featureType.name], [context]);\n      });\n    }\n    return node;\n  }\n\n  /**\n   * Create a bbox filter and combine it with another optional filter.\n   *\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../extent.js\").Extent} extent Extent.\n   * @param {string} [srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   * @param {import(\"./filter/Filter.js\").default} [filter] Filter condition.\n   * @return {import(\"./filter/Filter.js\").default} The filter.\n   */\n  combineBboxAndFilter(geometryName, extent, srsName, filter) {\n    const bboxFilter = bboxFilterFn(geometryName, extent, srsName);\n    if (filter) {\n      // if bbox and filter are both set, combine the two into a single filter\n      return andFilterFn(filter, bboxFilter);\n    }\n    return bboxFilter;\n  }\n\n  /**\n   * Encode format as WFS `Transaction` and return the Node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\n   * @param {WriteTransactionOptions} options Write options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeTransaction(inserts, updates, deletes, options) {\n    const objectStack = [];\n    const version = options.version ? options.version : this.version_;\n    const node = createElementNS(WFSNS[version], 'Transaction');\n\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', version);\n    let baseObj;\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    if (options) {\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      SCHEMA_LOCATIONS[version]\n    );\n\n    const request = createTransactionRequest(node, baseObj, version, options);\n    if (inserts) {\n      serializeTransactionRequest('Insert', inserts, objectStack, request);\n    }\n    if (updates) {\n      serializeTransactionRequest('Update', updates, objectStack, request);\n    }\n    if (deletes) {\n      serializeTransactionRequest('Delete', deletes, objectStack, request);\n    }\n    if (options.nativeElements) {\n      serializeTransactionRequest(\n        'Native',\n        options.nativeElements,\n        objectStack,\n        request\n      );\n    }\n    return node;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromDocument(doc) {\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readProjectionFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromNode(node) {\n    if (node.firstElementChild && node.firstElementChild.firstElementChild) {\n      node = node.firstElementChild.firstElementChild;\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        if (\n          !(\n            n.childNodes.length === 0 ||\n            (n.childNodes.length === 1 && n.firstChild.nodeType === 3)\n          )\n        ) {\n          const objectStack = [{}];\n          this.gmlFormat_.readGeometryElement(n, objectStack);\n          return getProjection(objectStack.pop().srsName);\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {*} baseObj Base object.\n * @param {string} version Version.\n * @param {WriteTransactionOptions} options Options.\n * @return {Object} Request object.\n */\nfunction createTransactionRequest(node, baseObj, version, options) {\n  const featurePrefix = options.featurePrefix\n    ? options.featurePrefix\n    : FEATURE_PREFIX;\n  let gmlVersion;\n  if (version === '1.0.0') {\n    gmlVersion = 2;\n  } else if (version === '1.1.0') {\n    gmlVersion = 3;\n  } else if (version === '2.0.0') {\n    gmlVersion = 3.2;\n  }\n  const obj = Object.assign(\n    {node},\n    {\n      version,\n      'featureNS': options.featureNS,\n      'featureType': options.featureType,\n      'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion,\n      'hasZ': options.hasZ,\n      'srsName': options.srsName,\n    },\n    baseObj\n  );\n  return obj;\n}\n\n/**\n * @param {string} type Request type.\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {Array<*>} objectStack Object stack.\n * @param {Element} request Transaction Request.\n */\nfunction serializeTransactionRequest(type, features, objectStack, request) {\n  pushSerializeAndPop(\n    request,\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory(type),\n    features,\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n */\nfunction readTransactionSummary(node, objectStack) {\n  return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst OGC_FID_PARSERS = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n  'http://www.opengis.net/ogc/1.1': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction fidParser(node, objectStack) {\n  parseNode(OGC_FID_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst INSERT_RESULTS_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'Feature': fidParser,\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Feature': fidParser,\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Insert results.\n */\nfunction readInsertResults(node, objectStack) {\n  return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFeature(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else if (gmlVersion === 3) {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML32.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeOgcFidFilter(node, fid, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = OGCNS[version];\n  const filter = createElementNS(ns, 'Filter');\n  const child = createElementNS(ns, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', /** @type {string} */ (fid));\n  node.appendChild(filter);\n}\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @return {string} The value of the typeName property.\n */\nfunction getTypeName(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.startsWith(prefix)) {\n    return featureType;\n  } else {\n    return prefix + featureType;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDelete(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeUpdate(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const version = context['version'];\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (\n          value &&\n          typeof (/** @type {?} */ (value).getSimplifiedGeometry) === 'function'\n        ) {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */ ({\n        version,\n        'gmlVersion': context['gmlVersion'],\n        node,\n        'hasZ': context['hasZ'],\n        'srsName': context['srsName'],\n      }),\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Property'),\n      values,\n      objectStack\n    );\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeProperty(node, pair, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = WFSNS[version];\n  const name = createElementNS(ns, 'Name');\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = createElementNS(ns, 'Value');\n    node.appendChild(value);\n    if (\n      pair.value &&\n      typeof (/** @type {?} */ (pair.value).getSimplifiedGeometry) ===\n        'function'\n    ) {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else if (gmlVersion === 3) {\n        GML3.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else {\n        GML32.prototype.writeGeometryElement(value, pair.value, objectStack);\n      }\n    } else {\n      writeStringTextNode(value, pair.value);\n    }\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNative(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\n  }\n  if (nativeElement.value !== undefined) {\n    writeStringTextNode(node, nativeElement.value);\n  }\n}\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst GETFEATURE_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/ogc': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n  'http://www.opengis.net/fes/2.0': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Disjoint': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'ResourceId': makeChildAppender(writeResourceIdFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {string} featureType Feature type.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeQuery(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const version = context['version'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = getTypeName(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  let typeNameAttr;\n  if (version === '2.0.0') {\n    typeNameAttr = 'typeNames';\n  } else {\n    typeNameAttr = 'typeName';\n  }\n  node.setAttribute(typeNameAttr, typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  }\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    Object.assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    QUERY_SERIALIZERS,\n    makeSimpleNodeFactory('PropertyName'),\n    propertyNames,\n    objectStack\n  );\n  const filter = context['filter'];\n  if (filter) {\n    const child = createElementNS(getFilterNS(version), 'Filter');\n    node.appendChild(child);\n    writeFilterCondition(child, filter, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFilterCondition(node, filter, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(filter.getTagName()),\n    [filter],\n    objectStack\n  );\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeBboxFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.extent, objectStack);\n}\n\n/**\n * @param {Element} node Element.\n * @param {import(\"./filter/ResourceId.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeResourceIdFilter(node, filter, objectStack) {\n  node.setAttribute('rid', /** @type {string} */ (filter.rid));\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Spatial.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeSpatialFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/DWithin.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDWithinFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writeSpatialFilter(node, filter, objectStack);\n  const distance = createElementNS(getFilterNS(version), 'Distance');\n  writeStringTextNode(distance, filter.distance.toString());\n  if (version === '2.0.0') {\n    distance.setAttribute('uom', filter.unit);\n  } else {\n    distance.setAttribute('units', filter.unit);\n  }\n  node.appendChild(distance);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/During.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDuringFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n\n  writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = createElementNS(GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  writeTimeInstant(begin, filter.begin);\n\n  const end = createElementNS(GMLNS, 'end');\n  timePeriod.appendChild(end);\n  writeTimeInstant(end, filter.end);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLogicalFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    pushSerializeAndPop(\n      item,\n      GETFEATURE_SERIALIZERS,\n      makeSimpleNodeFactory(condition.getTagName()),\n      [condition],\n      objectStack\n    );\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Not.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNotFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  Object.assign(item, {context});\n  const condition = filter.condition;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(condition.getTagName()),\n    [condition],\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeComparisonFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.expression);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsNullFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writePropertyName(version, node, filter.propertyName);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsBetweenFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  const ns = getFilterNS(version);\n\n  writePropertyName(version, node, filter.propertyName);\n\n  const lowerBoundary = createElementNS(ns, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = createElementNS(ns, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  writeLiteral(version, upperBoundary, '' + filter.upperBoundary);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsLikeFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.pattern);\n}\n\n/**\n * @param {string} ns Namespace.\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n */\nfunction writeExpression(ns, tagName, node, value) {\n  const property = createElementNS(ns, tagName);\n  writeStringTextNode(property, value);\n  node.appendChild(property);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeLiteral(version, node, value) {\n  writeExpression(getFilterNS(version), 'Literal', node, value);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writePropertyName(version, node, value) {\n  if (version === '2.0.0') {\n    writeExpression(FESNS[version], 'ValueReference', node, value);\n  } else {\n    writeExpression(OGCNS[version], 'PropertyName', node, value);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n */\nfunction writeTimeInstant(node, time) {\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = createElementNS(GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  writeStringTextNode(timePosition, time);\n}\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {string} version WFS version. If not provided defaults to '1.1.0'\n * @return {Node} Result.\n * @api\n */\nexport function writeFilter(filter, version) {\n  version = version || '1.1.0';\n  const child = createElementNS(getFilterNS(version), 'Filter');\n  const context = {\n    node: child,\n  };\n  Object.assign(context, {\n    'version': version,\n    'filter': filter,\n  });\n  writeFilterCondition(child, filter, [context]);\n  return child;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<string>} featureTypes Feature types.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeGetFeature(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    Object.assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory('Query'),\n    featureTypes,\n    objectStack\n  );\n}\n\nfunction getFilterNS(version) {\n  let ns;\n  if (version === '2.0.0') {\n    ns = FESNS[version];\n  } else {\n    ns = OGCNS[version];\n  }\n  return ns;\n}\n\nexport default WFS;\n","import Map from '../src/ol/Map.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {GeoJSON, WFS} from '../src/ol/format.js';\nimport {Stroke, Style} from '../src/ol/style.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {\n  and as andFilter,\n  equalTo as equalToFilter,\n  like as likeFilter,\n} from '../src/ol/format/filter.js';\n\nconst vectorSource = new VectorSource();\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 255, 1.0)',\n      width: 2,\n    }),\n  }),\n});\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst raster = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    maxZoom: 20,\n  }),\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [-8908887.277395891, 5381918.072437216],\n    maxZoom: 19,\n    zoom: 12,\n  }),\n});\n\n// generate a GetFeature request\nconst featureRequest = new WFS().writeGetFeature({\n  srsName: 'EPSG:3857',\n  featureNS: 'http://openstreemap.org',\n  featurePrefix: 'osm',\n  featureTypes: ['water_areas'],\n  outputFormat: 'application/json',\n  filter: andFilter(\n    likeFilter('name', 'Mississippi*'),\n    equalToFilter('waterway', 'riverbank')\n  ),\n});\n\n// then post the request and add the received features to a layer\nfetch('https://ahocevar.com/geoserver/wfs', {\n  method: 'POST',\n  body: new XMLSerializer().serializeToString(featureRequest),\n})\n  .then(function (response) {\n    return response.json();\n  })\n  .then(function (json) {\n    const features = new GeoJSON().readFeatures(json);\n    vectorSource.addFeatures(features);\n    map.getView().fit(vectorSource.getExtent());\n  });\n"],"names":["schemaLocation","GMLNS","MULTIGEOMETRY_TO_MEMBER_NODENAME","GML3","GMLBase","constructor","options","super","this","surface_","undefined","surface","curve_","curve","multiCurve_","multiCurve","multiSurface_","multiSurface","hasZ","readMultiCurve","node","objectStack","lineStrings","pushParseAndPop","MULTICURVE_PARSERS","MultiLineString","readFlatCurveRing","flatCoordinates","i","ii","length","extend","getFlatCoordinates","readMultiSurface","polygons","MULTISURFACE_PARSERS","MultiPolygon","curveMemberParser","parseNode","CURVEMEMBER_PARSERS","surfaceMemberParser","SURFACEMEMBER_PARSERS","readPatch","PATCHES_PARSERS","readSegment","SEGMENTS_PARSERS","readPolygonPatch","FLAT_LINEAR_RINGS_PARSERS","readLineStringSegment","GEOMETRY_FLAT_COORDINATES_PARSERS","interiorParser","flatLinearRing","RING_PARSERS","push","exteriorParser","readSurface","flatLinearRings","SURFACE_PARSERS","ends","Polygon","readCurve","CURVE_PARSERS","LineString","readEnvelope","ENVELOPE_PARSERS","createOrUpdate","readFlatPos","s","getAllTextContent","re","m","exec","parseFloat","substr","containerSrs","axisOrientation","getProjection","getAxisOrientation","y","x","len","readFlatPosList","replace","context","contextDimension","coords","split","z","dim","getAttribute","readNonNegativeIntegerString","parentNode","writePos_","value","srsDimension","setAttribute","srsName","point","getCoordinates","writeStringTextNode","getCoords_","writePosList_","points","parts","Array","join","writePoint","geometry","pos","createElementNS","namespaceURI","appendChild","writeEnvelope","extent","values","pushSerializeAndPop","ENVELOPE_SERIALIZERS","OBJECT_PROPERTY_NODE_FACTORY","writeLinearRing","posList","RING_NODE_FACTORY_","nodeName","exteriorWritten","writeSurfaceOrPolygon","rings","getLinearRings","RING_SERIALIZERS","patches","writeSurfacePatches_","writeCurveOrLineString","segments","writeCurveSegments_","writeMultiSurfaceOrPolygon","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writeMultiPoint","getPoints","POINTMEMBER_SERIALIZERS","makeSimpleNodeFactory","writeMultiCurveOrLineString","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS","writeRing","ring","linearRing","writeSurfaceOrPolygonMember","polygon","child","GEOMETRY_NODE_FACTORY_","writePointMember","writeLineStringOrCurveMember","line","writeGeometryElement","item","Object","assign","isArray","transformExtentWithOptions","transformGeometryWithOptions","GEOMETRY_SERIALIZERS","writeFeatureElement","feature","fid","getId","featureNS","geometryName","getGeometryName","serializers","keys","hasProperties","properties","getProperties","key","getSimplifiedGeometry","makeChildAppender","writeFeatureMembers_","features","featureType","namespace","getType","writeGeometryNode","adaptOptions","geom","writeFeaturesNode","setAttributeNS","XML_SCHEMA_INSTANCE_URI","prototype","makeReplacer","GML2","GEOMETRY_PARSERS","makeArrayPusher","makeArrayExtender","writeFeatures","GML32","MULTIPOINT_PARSERS","MULTILINESTRING_PARSERS","MULTIPOLYGON_PARSERS","POINTMEMBER_PARSERS","LINESTRINGMEMBER_PARSERS","POLYGONMEMBER_PARSERS","tagName","tagName_","getTagName","Filter","conditions","assert","LogicalNary","slice","call","arguments","Error","propertyName","Comparison","expression","matchCase","ComparisonBinary","pattern","wildCard","singleChar","escapeChar","and","params","concat","Function","bind","apply","And","FEATURE_COLLECTION_PARSERS","makeObjectPropertySetter","TRANSACTION_SUMMARY_PARSERS","readPositiveInteger","TRANSACTION_RESPONSE_PARSERS","readTransactionSummary","readInsertResults","QUERY_SERIALIZERS","TRANSACTION_SERIALIZERS","writeFeature","writeUpdate","writeDelete","writeProperty","writeNative","FEATURE_PREFIX","XMLNS","OGCNS","WFSNS","FESNS","SCHEMA_LOCATIONS","GML_FORMATS","WFS","XMLFeature","version_","version","featureType_","featureNS_","gmlFormat_","gmlFormat","schemaLocation_","getFeatureType","setFeatureType","readFeaturesFromNode","getReadOptions","featuresNS","readTransactionResponse","source","doc","parse","readTransactionResponseFromDocument","isDocument","readTransactionResponseFromNode","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","n","firstChild","nextSibling","nodeType","Node","ELEMENT_NODE","result","writeGetFeature","handle","outputFormat","maxFeatures","String","resultType","startIndex","count","viewParams","featurePrefix","propertyNames","featureTypes","filter","bbox","combineBboxAndFilter","forEach","completeFilter","name","bboxFilter","Bbox","bboxFilterFn","andFilterFn","writeTransaction","inserts","updates","deletes","baseObj","gmlOptions","request","gmlVersion","createTransactionRequest","serializeTransactionRequest","nativeElements","readProjectionFromDocument","readProjectionFromNode","firstElementChild","nextElementSibling","childNodes","readGeometryElement","pop","type","OGC_FID_PARSERS","fidParser","INSERT_RESULTS_PARSERS","writeOgcFidFilter","ns","getTypeName","prefix","startsWith","typeName","getKeys","get","pair","nativeElement","vendorId","safeToIgnore","GETFEATURE_SERIALIZERS","writeQuery","writeDuringFilter","writeLogicalFilter","writeNotFilter","writeBboxFilter","writeSpatialFilter","writeDWithinFilter","writeComparisonFilter","writeIsNullFilter","writeIsBetweenFilter","writeIsLikeFilter","rid","typeNameAttr","getFilterNS","writeFilterCondition","parent","format","writePropertyName","distance","toString","unit","writeExpression","timePeriod","begin","writeTimeInstant","end","condition","writeLiteral","lowerBoundary","upperBoundary","property","time","timeInstant","timePosition","vectorSource","VectorSource","vector","VectorLayer","style","Style","stroke","Stroke","color","width","raster","TileLayer","XYZ","attributions","url","maxZoom","map","Map","layers","target","document","getElementById","view","View","center","zoom","featureRequest","andFilter","IsLike","EqualTo","equalToFilter","fetch","method","body","XMLSerializer","serializeToString","then","response","json","GeoJSON","readFeatures","addFeatures","getView","fit","getExtent"],"sourceRoot":""}