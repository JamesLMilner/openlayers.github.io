"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5898],{8012:function(e,t,r){var i=r(4805),s=r(1462),n=r(1055),h=r(5117),a=r(463),o=r(4711),l=r(824),c=r(3778),_=r(1316),d=r(3214),u=r(2925),p=r(3497),f=r(487),S=r(7334),m=r(9295),g=r(439),b=r(6725),k=r(6117),R=r(4704),F=r(4669),A=r(1275),y=r(1507),x=r(569);const w={...g.ZC,RENDER_EXTENT:"u_renderExtent",GLOBAL_ALPHA:"u_globalAlpha"};class v extends m.Z{constructor(e,t){const r=t.uniforms||{};r[w.RENDER_EXTENT]=[0,0,0,0],r[w.GLOBAL_ALPHA]=1,super(e,{uniforms:r,postProcesses:t.postProcesses}),this.sourceRevision_=-1,this.previousExtent_=(0,k.lJ)(),this.currentTransform_=(0,F.Ue)(),this.tmpTransform_=(0,F.Ue)(),this.tmpMat4_=(0,R.U)(),this.currentFrameStateTransform_=(0,F.Ue)(),this.worker_=(0,A.U)(),this.polygonRenderer_=null,this.pointRenderer_=null,this.lineStringRenderer_=null,this.fillVertexShader_,this.fillFragmentShader_,this.strokeVertexShader_,this.strokeFragmentShader_,this.pointVertexShader_,this.pointFragmentShader_,this.fillAttributes_,this.strokeAttributes_,this.pointAttributes_,this.applyOptions_(t),this.batch_=new d.Z;const i=this.getLayer().getSource();this.batch_.addFeatures(i.getFeatures()),this.sourceListenKeys_=[(0,y.oL)(i,f.Z.ADDFEATURE,this.handleSourceFeatureAdded_,this),(0,y.oL)(i,f.Z.CHANGEFEATURE,this.handleSourceFeatureChanged_,this),(0,y.oL)(i,f.Z.REMOVEFEATURE,this.handleSourceFeatureDelete_,this),(0,y.oL)(i,f.Z.CLEAR,this.handleSourceFeatureClear_,this)]}applyOptions_(e){if(this.fillAttributes_=[],this.strokeAttributes_=[],this.pointAttributes_=[],e.fill&&"vertexShader"in e.fill)this.fillVertexShader_=e.fill.vertexShader,this.fillFragmentShader_=e.fill.fragmentShader;else{this.fillVertexShader_=b.W7,this.fillFragmentShader_=b.sH;const t=e.fill&&"color"in e.fill?e.fill.color:()=>(0,x.zO)("#ddd");this.fillAttributes_.push({name:"color",size:2,callback:t})}if(e.stroke&&"vertexShader"in e.stroke)this.strokeVertexShader_=e.stroke.vertexShader,this.strokeFragmentShader_=e.stroke.fragmentShader;else{this.strokeVertexShader_=b.mC,this.strokeFragmentShader_=b.dr;const t=e.stroke&&"color"in e.stroke?e.stroke.color:()=>(0,x.zO)("#eee"),r=e.stroke&&"width"in e.stroke?e.stroke.width:()=>1.5;this.strokeAttributes_.push({name:"color",size:2,callback:t},{name:"width",callback:r})}if(e.point&&"vertexShader"in e.point)this.pointVertexShader_=e.point.vertexShader,this.pointFragmentShader_=e.point.fragmentShader;else{this.pointVertexShader_=b.br,this.pointFragmentShader_=b.mz;const t=e.point&&"color"in e.point?e.point.color:()=>(0,x.zO)("#eee");this.pointAttributes_.push({name:"color",size:2,callback:t})}e.attributes&&(this.fillAttributes_=this.fillAttributes_.concat(e.attributes),this.strokeAttributes_=this.strokeAttributes_.concat(e.attributes),this.pointAttributes_=this.pointAttributes_.concat(e.attributes))}createRenderers_(){this.polygonRenderer_=new p.Z(this.helper,this.worker_,this.fillVertexShader_,this.fillFragmentShader_,this.fillAttributes_),this.pointRenderer_=new u.Z(this.helper,this.worker_,this.pointVertexShader_,this.pointFragmentShader_,this.pointAttributes_),this.lineStringRenderer_=new _.Z(this.helper,this.worker_,this.strokeVertexShader_,this.strokeFragmentShader_,this.strokeAttributes_)}reset(e){this.applyOptions_(e),this.helper&&this.createRenderers_(),super.reset(e)}afterHelperCreated(){this.createRenderers_()}handleSourceFeatureAdded_(e){const t=e.feature;this.batch_.addFeature(t)}handleSourceFeatureChanged_(e){const t=e.feature;this.batch_.changeFeature(t)}handleSourceFeatureDelete_(e){const t=e.feature;this.batch_.removeFeature(t)}handleSourceFeatureClear_(){this.batch_.clear()}applyUniforms_(e){(0,F.lk)(this.tmpTransform_,this.currentFrameStateTransform_),(0,F.Jp)(this.tmpTransform_,e),this.helper.setUniformMatrixValue(w.PROJECTION_MATRIX,(0,R.u)(this.tmpMat4_,this.tmpTransform_))}renderFrame(e){const t=this.helper.getGL();this.preRender(t,e),this.helper.prepareDraw(e),this.currentFrameStateTransform_=this.helper.makeProjectionTransform(e,this.currentFrameStateTransform_);const r=this.getLayer().getSource(),i=e.viewState.projection,s=r.getWrapX()&&i.canWrapX(),n=i.getExtent(),h=e.extent,a=s?(0,k.dz)(n):null,o=s?Math.ceil((h[2]-n[2])/a)+1:1;let l=s?Math.floor((h[0]-n[0])/a):0;(0,F.Iu)(this.tmpTransform_,l*a,0);do{this.polygonRenderer_.preRender(this.batch_.polygonBatch,e),this.applyUniforms_(this.batch_.polygonBatch.invertVerticesBufferTransform),this.polygonRenderer_.render(this.batch_.polygonBatch),this.lineStringRenderer_.preRender(this.batch_.lineStringBatch,e),this.applyUniforms_(this.batch_.lineStringBatch.invertVerticesBufferTransform),this.lineStringRenderer_.render(this.batch_.lineStringBatch),this.pointRenderer_.preRender(this.batch_.pointBatch,e),this.applyUniforms_(this.batch_.pointBatch.invertVerticesBufferTransform),this.pointRenderer_.render(this.batch_.pointBatch),(0,F.Iu)(this.currentFrameStateTransform_,a,0)}while(++l<o);this.helper.finalizeDraw(e);const c=this.helper.getCanvas(),_=e.layerStatesArray[e.layerIndex].opacity;return _!==parseFloat(c.style.opacity)&&(c.style.opacity=String(_)),this.postRender(t,e),c}prepareFrameInternal(e){const t=this.getLayer(),r=t.getSource(),i=e.viewState,s=!e.viewHints[S.Z.ANIMATING]&&!e.viewHints[S.Z.INTERACTING],n=!(0,k.fS)(this.previousExtent_,e.extent),h=this.sourceRevision_<r.getRevision();if(h&&(this.sourceRevision_=r.getRevision()),s&&(n||h)){const s=i.projection,n=i.resolution,h=t instanceof c.Z?t.getRenderBuffer():0,a=(0,k.f3)(e.extent,h*n);r.loadFeatures(a,n,s),this.ready=!1;let o=3;const l=()=>{o--,this.ready=o<=0,this.getLayer().changed()},_=this.helper.makeProjectionTransform(e,(0,F.Ue)());this.polygonRenderer_.rebuild(this.batch_.polygonBatch,_,"Polygon",l),this.lineStringRenderer_.rebuild(this.batch_.lineStringBatch,_,"LineString",l),this.pointRenderer_.rebuild(this.batch_.pointBatch,_,"Point",l),this.previousExtent_=e.extent.slice()}return!0}forEachFeatureAtCoordinate(e,t,r,i,s){}disposeInternal(){this.worker_.terminate(),this.layer_=null,this.sourceListenKeys_.forEach((function(e){(0,y.bN)(e)})),this.sourceListenKeys_=null,super.disposeInternal()}}var T=v;const E={"stroke-color":["*",["get","COLOR"],[220,220,220]],"stroke-width":1.5,"fill-color":["*",["get","COLOR"],[255,255,255,.6]]};class L extends s.Z{createRenderer(){const e=(0,x.Zh)(E);return new T(this,{fill:{vertexShader:e.builder.getFillVertexShader(),fragmentShader:e.builder.getFillFragmentShader()},stroke:{vertexShader:e.builder.getStrokeVertexShader(),fragmentShader:e.builder.getStrokeFragmentShader()},attributes:e.attributes,uniforms:e.uniforms})}}const Z=new a.Z({source:new h.Z}),V=new L({source:new o.Z({url:"https://openlayers.org/data/vector/ecoregions.json",format:new i.Z})});new n.Z({layers:[Z,V],target:"map",view:new l.ZP({center:[0,0],zoom:1})})}},function(e){var t;t=8012,e(e.s=t)}]);
//# sourceMappingURL=webgl-vector-layer.js.map