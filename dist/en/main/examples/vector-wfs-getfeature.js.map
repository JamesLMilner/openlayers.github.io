{"version":3,"file":"vector-wfs-getfeature.js","mappings":"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","sources":["webpack:///../src/ol/format/GML3.js","webpack:///../src/ol/format/GML32.js","webpack:///../src/ol/format/filter/Filter.js","webpack:///../src/ol/format/filter/LogicalNary.js","webpack:///../src/ol/format/filter/And.js","webpack:///../src/ol/format/filter/Bbox.js","webpack:///../src/ol/format/filter/Comparison.js","webpack:///../src/ol/format/filter/ComparisonBinary.js","webpack:///../src/ol/format/filter/EqualTo.js","webpack:///../src/ol/format/filter/IsLike.js","webpack:///../src/ol/format/filter.js","webpack:///../src/ol/format/WFS.js","webpack:///./vector-wfs-getfeature.js"],"sourcesContent":["/**\n * @module ol/format/GML3\n */\nimport GML2 from './GML2.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {\n  OBJECT_PROPERTY_NODE_FACTORY,\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  getAllTextContent,\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n  makeSimpleNodeFactory,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {assign} from '../obj.js';\nimport {createOrUpdate} from '../extent.js';\nimport {extend} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport {readNonNegativeIntegerString, writeStringTextNode} from './xsd.js';\nimport {\n  transformExtentWithOptions,\n  transformGeometryWithOptions,\n} from './Feature.js';\n\n/**\n * @const\n * @type {string}\n * @private\n */\nconst schemaLocation =\n  GMLNS +\n  ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n  '1.0.0/gmlsf.xsd';\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst MULTIGEOMETRY_TO_MEMBER_NODENAME = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember',\n};\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @api\n */\nclass GML3 extends GMLBase {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [opt_options] Optional configuration object.\n   */\n  constructor(opt_options) {\n    const options =\n      /** @type {import(\"./GMLBase.js\").Options} */\n      (opt_options ? opt_options : {});\n\n    super(options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.surface_ = options.surface !== undefined ? options.surface : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.curve_ = options.curve !== undefined ? options.curve : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiCurve_ =\n      options.multiCurve !== undefined ? options.multiCurve : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.multiSurface_ =\n      options.multiSurface !== undefined ? options.multiSurface : true;\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : schemaLocation;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hasZ = options.hasZ !== undefined ? options.hasZ : false;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiLineString|undefined} MultiLineString.\n   */\n  readMultiCurve(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (lineStrings) {\n      const multiLineString = new MultiLineString(lineStrings);\n      return multiLineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Polygon.\n   */\n  readFlatCurveRing(node, objectStack) {\n    /** @type {Array<LineString>} */\n    const lineStrings = pushParseAndPop(\n      [],\n      this.MULTICURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    const flatCoordinates = [];\n    for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n      extend(flatCoordinates, lineStrings[i].getFlatCoordinates());\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {MultiPolygon|undefined} MultiPolygon.\n   */\n  readMultiSurface(node, objectStack) {\n    /** @type {Array<Polygon>} */\n    const polygons = pushParseAndPop(\n      [],\n      this.MULTISURFACE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (polygons) {\n      return new MultiPolygon(polygons);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  curveMemberParser(node, objectStack) {\n    parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  surfaceMemberParser(node, objectStack) {\n    parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.PATCHES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readSegment(node, objectStack) {\n    return pushParseAndPop([], this.SEGMENTS_PARSERS, node, objectStack, this);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<(Array<number>)>|undefined} flat coordinates.\n   */\n  readPolygonPatch(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.FLAT_LINEAR_RINGS_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} flat coordinates.\n   */\n  readLineStringSegment(node, objectStack) {\n    return pushParseAndPop(\n      [null],\n      this.GEOMETRY_FLAT_COORDINATES_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  interiorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings.push(flatLinearRing);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   */\n  exteriorParser(node, objectStack) {\n    /** @type {Array<number>|undefined} */\n    const flatLinearRing = pushParseAndPop(\n      undefined,\n      this.RING_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRing) {\n      const flatLinearRings =\n        /** @type {Array<Array<number>>} */\n        (objectStack[objectStack.length - 1]);\n      flatLinearRings[0] = flatLinearRing;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Polygon|undefined} Polygon.\n   */\n  readSurface(node, objectStack) {\n    /** @type {Array<Array<number>>} */\n    const flatLinearRings = pushParseAndPop(\n      [null],\n      this.SURFACE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatLinearRings && flatLinearRings[0]) {\n      const flatCoordinates = flatLinearRings[0];\n      const ends = [flatCoordinates.length];\n      let i, ii;\n      for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n        extend(flatCoordinates, flatLinearRings[i]);\n        ends.push(flatCoordinates.length);\n      }\n      return new Polygon(flatCoordinates, 'XYZ', ends);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {LineString|undefined} LineString.\n   */\n  readCurve(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.CURVE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    if (flatCoordinates) {\n      const lineString = new LineString(flatCoordinates, 'XYZ');\n      return lineString;\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {import(\"../extent.js\").Extent|undefined} Envelope.\n   */\n  readEnvelope(node, objectStack) {\n    /** @type {Array<number>} */\n    const flatCoordinates = pushParseAndPop(\n      [null],\n      this.ENVELOPE_PARSERS,\n      node,\n      objectStack,\n      this\n    );\n    return createOrUpdate(\n      flatCoordinates[1][0],\n      flatCoordinates[1][1],\n      flatCoordinates[2][0],\n      flatCoordinates[2][1]\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPos(node, objectStack) {\n    let s = getAllTextContent(node, false);\n    const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n    /** @type {Array<number>} */\n    const flatCoordinates = [];\n    let m;\n    while ((m = re.exec(s))) {\n      flatCoordinates.push(parseFloat(m[1]));\n      s = s.substr(m[0].length);\n    }\n    if (s !== '') {\n      return undefined;\n    }\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    if (axisOrientation === 'neu') {\n      let i, ii;\n      for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n        const y = flatCoordinates[i];\n        const x = flatCoordinates[i + 1];\n        flatCoordinates[i] = x;\n        flatCoordinates[i + 1] = y;\n      }\n    }\n    const len = flatCoordinates.length;\n    if (len == 2) {\n      flatCoordinates.push(0);\n    }\n    if (len === 0) {\n      return undefined;\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Array<*>} objectStack Object stack.\n   * @return {Array<number>|undefined} Flat coordinates.\n   */\n  readFlatPosList(node, objectStack) {\n    const s = getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n    const context = objectStack[0];\n    const containerSrs = context['srsName'];\n    const contextDimension = context['srsDimension'];\n    let axisOrientation = 'enu';\n    if (containerSrs) {\n      const proj = getProjection(containerSrs);\n      axisOrientation = proj.getAxisOrientation();\n    }\n    const coords = s.split(/\\s+/);\n    // The \"dimension\" attribute is from the GML 3.0.1 spec.\n    let dim = 2;\n    if (node.getAttribute('srsDimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('srsDimension'));\n    } else if (node.getAttribute('dimension')) {\n      dim = readNonNegativeIntegerString(node.getAttribute('dimension'));\n    } else if (\n      /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n    ) {\n      dim = readNonNegativeIntegerString(\n        /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')\n      );\n    } else if (contextDimension) {\n      dim = readNonNegativeIntegerString(contextDimension);\n    }\n    let x, y, z;\n    const flatCoordinates = [];\n    for (let i = 0, ii = coords.length; i < ii; i += dim) {\n      x = parseFloat(coords[i]);\n      y = parseFloat(coords[i + 1]);\n      z = dim === 3 ? parseFloat(coords[i + 2]) : 0;\n      if (axisOrientation.substr(0, 2) === 'en') {\n        flatCoordinates.push(x, y, z);\n      } else {\n        flatCoordinates.push(y, x, z);\n      }\n    }\n    return flatCoordinates;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} value Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePos_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    let axisOrientation = 'enu';\n    if (srsName) {\n      axisOrientation = getProjection(srsName).getAxisOrientation();\n    }\n    const point = value.getCoordinates();\n    let coords;\n    // only 2d for simple features profile\n    if (axisOrientation.substr(0, 2) === 'en') {\n      coords = point[0] + ' ' + point[1];\n    } else {\n      coords = point[1] + ' ' + point[0];\n    }\n    if (hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n    writeStringTextNode(node, coords);\n  }\n\n  /**\n   * @param {Array<number>} point Point geometry.\n   * @param {string} [opt_srsName] Optional srsName\n   * @param {boolean} [opt_hasZ] whether the geometry has a Z coordinate (is 3D) or not.\n   * @return {string} The coords string.\n   * @private\n   */\n  getCoords_(point, opt_srsName, opt_hasZ) {\n    let axisOrientation = 'enu';\n    if (opt_srsName) {\n      axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n    }\n    let coords =\n      axisOrientation.substr(0, 2) === 'en'\n        ? point[0] + ' ' + point[1]\n        : point[1] + ' ' + point[0];\n    if (opt_hasZ) {\n      // For newly created points, Z can be undefined.\n      const z = point[2] || 0;\n      coords += ' ' + z;\n    }\n\n    return coords;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString|import(\"../geom/LinearRing.js\").default} value Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writePosList_(node, value, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsDimension = hasZ ? '3' : '2';\n    node.setAttribute('srsDimension', srsDimension);\n    const srsName = context['srsName'];\n    // only 2d for simple features profile\n    const points = value.getCoordinates();\n    const len = points.length;\n    const parts = new Array(len);\n    let point;\n    for (let i = 0; i < len; ++i) {\n      point = points[i];\n      parts[i] = this.getCoords_(point, srsName, hasZ);\n    }\n    writeStringTextNode(node, parts.join(' '));\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} geometry Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const pos = createElementNS(node.namespaceURI, 'pos');\n    node.appendChild(pos);\n    this.writePos_(pos, geometry, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeEnvelope(node, extent, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const keys = ['lowerCorner', 'upperCorner'];\n    const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      ({node: node}),\n      this.ENVELOPE_SERIALIZERS,\n      OBJECT_PROPERTY_NODE_FACTORY,\n      values,\n      objectStack,\n      keys,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} geometry LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLinearRing(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const posList = createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  }\n\n  /**\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node} Node.\n   * @private\n   */\n  RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const parentNode = context.node;\n    const exteriorWritten = context['exteriorWritten'];\n    if (exteriorWritten === undefined) {\n      context['exteriorWritten'] = true;\n    }\n    return createElementNS(\n      parentNode.namespaceURI,\n      exteriorWritten !== undefined ? 'interior' : 'exterior'\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} geometry Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'PolygonPatch' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n      const rings = geometry.getLinearRings();\n      pushSerializeAndPop(\n        {node: node, hasZ: hasZ, srsName: srsName},\n        this.RING_SERIALIZERS,\n        this.RING_NODE_FACTORY_,\n        rings,\n        objectStack,\n        undefined,\n        this\n      );\n    } else if (node.nodeName === 'Surface') {\n      const patches = createElementNS(node.namespaceURI, 'patches');\n      node.appendChild(patches);\n      this.writeSurfacePatches_(patches, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} geometry LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    if (node.nodeName !== 'LineStringSegment' && srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    if (\n      node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment'\n    ) {\n      const posList = createElementNS(node.namespaceURI, 'posList');\n      node.appendChild(posList);\n      this.writePosList_(posList, geometry, objectStack);\n    } else if (node.nodeName === 'Curve') {\n      const segments = createElementNS(node.namespaceURI, 'segments');\n      node.appendChild(segments);\n      this.writeCurveSegments_(segments, geometry, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiPolygon} geometry MultiPolygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiSurfaceOrPolygon(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const surface = context['surface'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const polygons = geometry.getPolygons();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n      this.SURFACEORPOLYGONMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      polygons,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry MultiPoint geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiPoint(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const srsName = context['srsName'];\n    const hasZ = context['hasZ'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const points = geometry.getPoints();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      this.POINTMEMBER_SERIALIZERS,\n      makeSimpleNodeFactory('pointMember'),\n      points,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {MultiLineString} geometry MultiLineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeMultiCurveOrLineString(node, geometry, objectStack) {\n    const context = objectStack[objectStack.length - 1];\n    const hasZ = context['hasZ'];\n    const srsName = context['srsName'];\n    const curve = context['curve'];\n    if (srsName) {\n      node.setAttribute('srsName', srsName);\n    }\n    const lines = geometry.getLineStrings();\n    pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n      this.LINESTRINGORCURVEMEMBER_SERIALIZERS,\n      this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,\n      lines,\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/LinearRing.js\").default} ring LinearRing geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeRing(node, ring, objectStack) {\n    const linearRing = createElementNS(node.namespaceURI, 'LinearRing');\n    node.appendChild(linearRing);\n    this.writeLinearRing(linearRing, ring, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeSurfaceOrPolygonMember(node, polygon, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeSurfaceOrPolygon(child, polygon, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../geom/Point.js\").default} point Point geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writePointMember(node, point, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'Point');\n    node.appendChild(child);\n    this.writePoint(child, point, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeLineStringOrCurveMember(node, line, objectStack) {\n    const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n    if (child) {\n      node.appendChild(child);\n      this.writeCurveOrLineString(child, line, objectStack);\n    }\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {Polygon} polygon Polygon geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeSurfacePatches_(node, polygon, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'PolygonPatch');\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon(child, polygon, objectStack);\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {LineString} line LineString geometry.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeCurveSegments_(node, line, objectStack) {\n    const child = createElementNS(node.namespaceURI, 'LineStringSegment');\n    node.appendChild(child);\n    this.writeCurveOrLineString(child, line, objectStack);\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeGeometryElement(node, geometry, objectStack) {\n    const context = /** @type {import(\"./Feature.js\").WriteOptions} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const item = assign({}, context);\n    item['node'] = node;\n    let value;\n    if (Array.isArray(geometry)) {\n      value = transformExtentWithOptions(\n        /** @type {import(\"../extent.js\").Extent} */ (geometry),\n        context\n      );\n    } else {\n      value = transformGeometryWithOptions(\n        /** @type {import(\"../geom/Geometry.js\").default} */ (geometry),\n        true,\n        context\n      );\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      this.GEOMETRY_SERIALIZERS,\n      this.GEOMETRY_NODE_FACTORY_,\n      [value],\n      objectStack,\n      undefined,\n      this\n    );\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {Array<*>} objectStack Node stack.\n   */\n  writeFeatureElement(node, feature, objectStack) {\n    const fid = feature.getId();\n    if (fid) {\n      node.setAttribute('fid', /** @type {string} */ (fid));\n    }\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureNS = context['featureNS'];\n    const geometryName = feature.getGeometryName();\n    if (!context.serializers) {\n      context.serializers = {};\n      context.serializers[featureNS] = {};\n    }\n    const keys = [];\n    const values = [];\n    if (feature.hasProperties()) {\n      const properties = feature.getProperties();\n      for (const key in properties) {\n        const value = properties[key];\n        if (value !== null) {\n          keys.push(key);\n          values.push(value);\n          if (\n            key == geometryName ||\n            typeof (/** @type {?} */ (value).getSimplifiedGeometry) ===\n              'function'\n          ) {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] = makeChildAppender(\n                this.writeGeometryElement,\n                this\n              );\n            }\n          } else {\n            if (!(key in context.serializers[featureNS])) {\n              context.serializers[featureNS][key] =\n                makeChildAppender(writeStringTextNode);\n            }\n          }\n        }\n      }\n    }\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      context.serializers,\n      makeSimpleNodeFactory(undefined, featureNS),\n      values,\n      objectStack,\n      keys\n    );\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {Array<*>} objectStack Node stack.\n   * @private\n   */\n  writeFeatureMembers_(node, features, objectStack) {\n    const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n    const featureType = context['featureType'];\n    const featureNS = context['featureNS'];\n    /** @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>} */\n    const serializers = {};\n    serializers[featureNS] = {};\n    serializers[featureNS][featureType] = makeChildAppender(\n      this.writeFeatureElement,\n      this\n    );\n    const item = assign({}, context);\n    item.node = node;\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */\n      (item),\n      serializers,\n      makeSimpleNodeFactory(featureType, featureNS),\n      features,\n      objectStack\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Node|undefined} Node.\n   * @private\n   */\n  MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const parentNode = objectStack[objectStack.length - 1].node;\n    return createElementNS(\n      this.namespace,\n      MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]\n    );\n  }\n\n  /**\n   * @const\n   * @param {*} value Value.\n   * @param {Array<*>} objectStack Object stack.\n   * @param {string} [opt_nodeName] Node name.\n   * @return {Element|undefined} Node.\n   * @private\n   */\n  GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {\n    const context = objectStack[objectStack.length - 1];\n    const multiSurface = context['multiSurface'];\n    const surface = context['surface'];\n    const curve = context['curve'];\n    const multiCurve = context['multiCurve'];\n    let nodeName;\n    if (!Array.isArray(value)) {\n      nodeName = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        value\n      ).getType();\n      if (nodeName === 'MultiPolygon' && multiSurface === true) {\n        nodeName = 'MultiSurface';\n      } else if (nodeName === 'Polygon' && surface === true) {\n        nodeName = 'Surface';\n      } else if (nodeName === 'LineString' && curve === true) {\n        nodeName = 'Curve';\n      } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n        nodeName = 'MultiCurve';\n      }\n    } else {\n      nodeName = 'Envelope';\n    }\n    return createElementNS(this.namespace, nodeName);\n  }\n\n  /**\n   * Encode a geometry in GML 3.1.1 Simple Features.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @return {Node} Node.\n   * @api\n   */\n  writeGeometryNode(geometry, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const geom = createElementNS(this.namespace, 'geom');\n    const context = {\n      node: geom,\n      hasZ: this.hasZ,\n      srsName: this.srsName,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n    };\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n    this.writeGeometryElement(geom, geometry, [context]);\n    return geom;\n  }\n\n  /**\n   * Encode an array of features in the GML 3.1.1 format as an XML node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n   * @return {Element} Node.\n   * @api\n   */\n  writeFeaturesNode(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const node = createElementNS(this.namespace, 'featureMembers');\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation\n    );\n    const context = {\n      srsName: this.srsName,\n      hasZ: this.hasZ,\n      curve: this.curve_,\n      surface: this.surface_,\n      multiSurface: this.multiSurface_,\n      multiCurve: this.multiCurve_,\n      featureNS: this.featureNS,\n      featureType: this.featureType,\n    };\n    if (opt_options) {\n      assign(context, opt_options);\n    }\n    this.writeFeatureMembers_(node, features, [context]);\n    return node;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML3.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML3.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML3.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML3.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML3.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML3.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML3.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML3;\n","/**\n * @module ol/format/GML32\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GMLBase from './GMLBase.js';\nimport {\n  makeArrayExtender,\n  makeArrayPusher,\n  makeChildAppender,\n  makeReplacer,\n} from '../xml.js';\nimport {writeStringTextNode} from '../format/xsd.js';\n\n/**\n * @classdesc Feature format for reading and writing data in the GML format\n *            version 3.2.1.\n * @api\n */\nclass GML32 extends GML3 {\n  /**\n   * @param {import(\"./GMLBase.js\").Options} [opt_options] Optional configuration object.\n   */\n  constructor(opt_options) {\n    const options = /** @type {import(\"./GMLBase.js\").Options} */ (\n      opt_options ? opt_options : {}\n    );\n\n    super(options);\n\n    /**\n     * @type {string}\n     */\n    this.schemaLocation = options.schemaLocation\n      ? options.schemaLocation\n      : this.namespace + ' http://schemas.opengis.net/gml/3.2.1/gml.xsd';\n  }\n}\n\nGML32.prototype.namespace = 'http://www.opengis.net/gml/3.2';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pos': makeReplacer(GML3.prototype.readFlatPos),\n    'posList': makeReplacer(GML3.prototype.readFlatPosList),\n    'coordinates': makeReplacer(GML2.prototype.readFlatCoordinates),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.FLAT_LINEAR_RINGS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'interior': GML3.prototype.interiorParser,\n    'exterior': GML3.prototype.exteriorParser,\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.GEOMETRY_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': makeReplacer(GMLBase.prototype.readMultiPoint),\n    'LineString': makeReplacer(GMLBase.prototype.readLineString),\n    'MultiLineString': makeReplacer(GMLBase.prototype.readMultiLineString),\n    'LinearRing': makeReplacer(GMLBase.prototype.readLinearRing),\n    'Polygon': makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': makeReplacer(GMLBase.prototype.readMultiPolygon),\n    'Surface': makeReplacer(GML32.prototype.readSurface),\n    'MultiSurface': makeReplacer(GML3.prototype.readMultiSurface),\n    'Curve': makeReplacer(GML32.prototype.readCurve),\n    'MultiCurve': makeReplacer(GML3.prototype.readMultiCurve),\n    'Envelope': makeReplacer(GML32.prototype.readEnvelope),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTICURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'curveMember': makeArrayPusher(GML3.prototype.curveMemberParser),\n    'curveMembers': makeArrayPusher(GML3.prototype.curveMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTISURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n    'surfaceMembers': makeArrayPusher(GML3.prototype.surfaceMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n    'Curve': makeArrayPusher(GML3.prototype.readCurve),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACEMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': makeArrayPusher(GML3.prototype.readSurface),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SURFACE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'patches': makeReplacer(GML3.prototype.readPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.CURVE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'segments': makeReplacer(GML3.prototype.readSegment),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.ENVELOPE_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n    'upperCorner': makeArrayPusher(GML3.prototype.readFlatPosList),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.PATCHES_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'PolygonPatch': makeReplacer(GML3.prototype.readPolygonPatch),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.SEGMENTS_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineStringSegment': makeArrayExtender(\n      GML3.prototype.readLineStringSegment\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOINT_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n    'pointMembers': makeArrayPusher(GMLBase.prototype.pointMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTILINESTRING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n    'lineStringMembers': makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser\n    ),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.MULTIPOLYGON_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'polygonMember': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n    'polygonMembers': makeArrayPusher(GMLBase.prototype.polygonMemberParser),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POINTMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Point': makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.LINESTRINGMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LineString': makeArrayPusher(GMLBase.prototype.readLineString),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.POLYGONMEMBER_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Polygon': makeArrayPusher(GMLBase.prototype.readPolygon),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nGML32.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'LinearRing': makeReplacer(GMLBase.prototype.readFlatLinearRing),\n    'Ring': makeReplacer(GML32.prototype.readFlatCurveRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.RING_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'exterior': makeChildAppender(GML3.prototype.writeRing),\n    'interior': makeChildAppender(GML3.prototype.writeRing),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.ENVELOPE_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lowerCorner': makeChildAppender(writeStringTextNode),\n    'upperCorner': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'surfaceMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n    'polygonMember': makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.POINTMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'pointMember': makeChildAppender(GML3.prototype.writePointMember),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'lineStringMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n    'curveMember': makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember\n    ),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nGML32.prototype.GEOMETRY_SERIALIZERS = {\n  'http://www.opengis.net/gml/3.2': {\n    'Curve': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiCurve': makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),\n    'Point': makeChildAppender(GML32.prototype.writePoint),\n    'MultiPoint': makeChildAppender(GML3.prototype.writeMultiPoint),\n    'LineString': makeChildAppender(GML3.prototype.writeCurveOrLineString),\n    'MultiLineString': makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString\n    ),\n    'LinearRing': makeChildAppender(GML3.prototype.writeLinearRing),\n    'Polygon': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiPolygon': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Surface': makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),\n    'MultiSurface': makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon\n    ),\n    'Envelope': makeChildAppender(GML3.prototype.writeEnvelope),\n  },\n};\n\nexport default GML32;\n","/**\n * @module ol/format/filter/Filter\n */\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @abstract\n */\nclass Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   */\n  constructor(tagName) {\n    /**\n     * @private\n     * @type {!string}\n     */\n    this.tagName_ = tagName;\n  }\n\n  /**\n   * The XML tag name for a filter.\n   * @return {!string} Name.\n   */\n  getTagName() {\n    return this.tagName_;\n  }\n}\n\nexport default Filter;\n","/**\n * @module ol/format/filter/LogicalNary\n */\nimport Filter from './Filter.js';\nimport {assert} from '../../asserts.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @abstract\n */\nclass LogicalNary extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {Array<import(\"./Filter.js\").default>} conditions Conditions.\n   */\n  constructor(tagName, conditions) {\n    super(tagName);\n\n    /**\n     * @type {Array<import(\"./Filter.js\").default>}\n     */\n    this.conditions = conditions;\n    assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n  }\n}\n\nexport default LogicalNary;\n","/**\n * @module ol/format/filter/And\n */\nimport LogicalNary from './LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @abstract\n */\nclass And extends LogicalNary {\n  /**\n   * @param {...import(\"./Filter.js\").default} conditions Conditions.\n   */\n  constructor(conditions) {\n    super('And', Array.prototype.slice.call(arguments));\n  }\n}\n\nexport default And;\n","/**\n * @module ol/format/filter/Bbox\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @api\n */\nclass Bbox extends Filter {\n  /**\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../../extent.js\").Extent} extent Extent.\n   * @param {string} [opt_srsName] SRS name. No srsName attribute will be set\n   * on geometries when this is not provided.\n   */\n  constructor(geometryName, extent, opt_srsName) {\n    super('BBOX');\n\n    /**\n     * @type {!string}\n     */\n    this.geometryName = geometryName;\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent = extent;\n    if (extent.length !== 4) {\n      throw new Error(\n        'Expected an extent with four values ([minX, minY, maxX, maxY])'\n      );\n    }\n\n    /**\n     * @type {string|undefined}\n     */\n    this.srsName = opt_srsName;\n  }\n}\n\nexport default Bbox;\n","/**\n * @module ol/format/filter/Comparison\n */\nimport Filter from './Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @abstract\n */\nclass Comparison extends Filter {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   */\n  constructor(tagName, propertyName) {\n    super(tagName);\n\n    /**\n     * @type {!string}\n     */\n    this.propertyName = propertyName;\n  }\n}\n\nexport default Comparison;\n","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @abstract\n */\nclass ComparisonBinary extends Comparison {\n  /**\n   * @param {!string} tagName The XML tag name for this filter.\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [opt_matchCase] Case-sensitive?\n   */\n  constructor(tagName, propertyName, expression, opt_matchCase) {\n    super(tagName, propertyName);\n\n    /**\n     * @type {!(string|number)}\n     */\n    this.expression = expression;\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = opt_matchCase;\n  }\n}\n\nexport default ComparisonBinary;\n","/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean} [opt_matchCase] Case-sensitive?\n   */\n  constructor(propertyName, expression, opt_matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n  }\n}\n\nexport default EqualTo;\n","/**\n * @module ol/format/filter/IsLike\n */\nimport Comparison from './Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n * @api\n */\nclass IsLike extends Comparison {\n  /**\n   * [constructor description]\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!string} pattern Text pattern.\n   * @param {string} [opt_wildCard] Pattern character which matches any sequence of\n   *    zero or more string characters. Default is '*'.\n   * @param {string} [opt_singleChar] pattern character which matches any single\n   *    string character. Default is '.'.\n   * @param {string} [opt_escapeChar] Escape character which can be used to escape\n   *    the pattern characters. Default is '!'.\n   * @param {boolean} [opt_matchCase] Case-sensitive?\n   */\n  constructor(\n    propertyName,\n    pattern,\n    opt_wildCard,\n    opt_singleChar,\n    opt_escapeChar,\n    opt_matchCase\n  ) {\n    super('PropertyIsLike', propertyName);\n\n    /**\n     * @type {!string}\n     */\n    this.pattern = pattern;\n\n    /**\n     * @type {!string}\n     */\n    this.wildCard = opt_wildCard !== undefined ? opt_wildCard : '*';\n\n    /**\n     * @type {!string}\n     */\n    this.singleChar = opt_singleChar !== undefined ? opt_singleChar : '.';\n\n    /**\n     * @type {!string}\n     */\n    this.escapeChar = opt_escapeChar !== undefined ? opt_escapeChar : '!';\n\n    /**\n     * @type {boolean|undefined}\n     */\n    this.matchCase = opt_matchCase;\n  }\n}\n\nexport default IsLike;\n","/**\n * @module ol/format/filter\n */\nimport And from './filter/And.js';\nimport Bbox from './filter/Bbox.js';\nimport Contains from './filter/Contains.js';\nimport DWithin from './filter/DWithin.js';\nimport Disjoint from './filter/Disjoint.js';\nimport During from './filter/During.js';\nimport EqualTo from './filter/EqualTo.js';\nimport GreaterThan from './filter/GreaterThan.js';\nimport GreaterThanOrEqualTo from './filter/GreaterThanOrEqualTo.js';\nimport Intersects from './filter/Intersects.js';\nimport IsBetween from './filter/IsBetween.js';\nimport IsLike from './filter/IsLike.js';\nimport IsNull from './filter/IsNull.js';\nimport LessThan from './filter/LessThan.js';\nimport LessThanOrEqualTo from './filter/LessThanOrEqualTo.js';\nimport Not from './filter/Not.js';\nimport NotEqualTo from './filter/NotEqualTo.js';\nimport Or from './filter/Or.js';\nimport ResourceId from './filter/ResourceId.js';\nimport Within from './filter/Within.js';\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!And} `<And>` operator.\n * @api\n */\nexport function and(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(And, params))();\n}\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...import(\"./filter/Filter.js\").default} conditions Filter conditions.\n * @return {!Or} `<Or>` operator.\n * @api\n */\nexport function or(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(Or, params))();\n}\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!import(\"./filter/Filter.js\").default} condition Filter condition.\n * @return {!Not} `<Not>` operator.\n * @api\n */\nexport function not(condition) {\n  return new Not(condition);\n}\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../extent.js\").Extent} extent Extent.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Bbox} `<BBOX>` operator.\n * @api\n */\nexport function bbox(geometryName, extent, opt_srsName) {\n  return new Bbox(geometryName, extent, opt_srsName);\n}\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Contains} `<Contains>` operator.\n * @api\n */\nexport function contains(geometryName, geometry, opt_srsName) {\n  return new Contains(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Intersects} `<Intersects>` operator.\n * @api\n */\nexport function intersects(geometryName, geometry, opt_srsName) {\n  return new Intersects(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Disjoint>` operator to test whether a geometry-valued property\n * is disjoint to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Disjoint} `<Disjoint>` operator.\n * @api\n */\nexport function disjoint(geometryName, geometry, opt_srsName) {\n  return new Disjoint(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!Within} `<Within>` operator.\n * @api\n */\nexport function within(geometryName, geometry, opt_srsName) {\n  return new Within(geometryName, geometry, opt_srsName);\n}\n\n/**\n * Create a `<DWithin>` operator to test whether a geometry-valued property\n * is within a distance to a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {!number} distance Distance.\n * @param {!string} unit Unit.\n * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @return {!DWithin} `<DWithin>` operator.\n * @api\n */\nexport function dwithin(geometryName, geometry, distance, unit, opt_srsName) {\n  return new DWithin(geometryName, geometry, distance, unit, opt_srsName);\n}\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [opt_matchCase] Case-sensitive?\n * @return {!EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\nexport function equalTo(propertyName, expression, opt_matchCase) {\n  return new EqualTo(propertyName, expression, opt_matchCase);\n}\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean} [opt_matchCase] Case-sensitive?\n * @return {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\nexport function notEqualTo(propertyName, expression, opt_matchCase) {\n  return new NotEqualTo(propertyName, expression, opt_matchCase);\n}\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\nexport function lessThan(propertyName, expression) {\n  return new LessThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\nexport function lessThanOrEqualTo(propertyName, expression) {\n  return new LessThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\nexport function greaterThan(propertyName, expression) {\n  return new GreaterThan(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @return {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\nexport function greaterThanOrEqualTo(propertyName, expression) {\n  return new GreaterThanOrEqualTo(propertyName, expression);\n}\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @return {!IsNull} `<PropertyIsNull>` operator.\n * @api\n */\nexport function isNull(propertyName) {\n  return new IsNull(propertyName);\n}\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @return {!IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\nexport function between(propertyName, lowerBoundary, upperBoundary) {\n  return new IsBetween(propertyName, lowerBoundary, upperBoundary);\n}\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string} [opt_wildCard] Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string} [opt_singleChar] pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string} [opt_escapeChar] Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean} [opt_matchCase] Case-sensitive?\n * @return {!IsLike} `<PropertyIsLike>` operator.\n * @api\n */\nexport function like(\n  propertyName,\n  pattern,\n  opt_wildCard,\n  opt_singleChar,\n  opt_escapeChar,\n  opt_matchCase\n) {\n  return new IsLike(\n    propertyName,\n    pattern,\n    opt_wildCard,\n    opt_singleChar,\n    opt_escapeChar,\n    opt_matchCase\n  );\n}\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @return {!During} `<During>` operator.\n * @api\n */\nexport function during(propertyName, begin, end) {\n  return new During(propertyName, begin, end);\n}\n\nexport function resourceId(rid) {\n  return new ResourceId(rid);\n}\n","/**\n * @module ol/format/WFS\n */\nimport GML2 from './GML2.js';\nimport GML3 from './GML3.js';\nimport GML32 from './GML32.js';\nimport GMLBase, {GMLNS} from './GMLBase.js';\nimport XMLFeature from './XMLFeature.js';\nimport {\n  XML_SCHEMA_INSTANCE_URI,\n  createElementNS,\n  isDocument,\n  makeArrayPusher,\n  makeChildAppender,\n  makeObjectPropertySetter,\n  makeSimpleNodeFactory,\n  parse,\n  parseNode,\n  pushParseAndPop,\n  pushSerializeAndPop,\n} from '../xml.js';\nimport {and as andFilterFn, bbox as bboxFilterFn} from './filter.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {\n  readNonNegativeIntegerString,\n  readPositiveInteger,\n  writeStringTextNode,\n} from './xsd.js';\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst FEATURE_COLLECTION_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': makeObjectPropertySetter(\n      GMLBase.prototype.readExtentElement,\n      'bounds'\n    ),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'member': makeArrayPusher(GMLBase.prototype.readFeaturesInternal),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_SUMMARY_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'totalInserted': makeObjectPropertySetter(readPositiveInteger),\n    'totalUpdated': makeObjectPropertySetter(readPositiveInteger),\n    'totalDeleted': makeObjectPropertySetter(readPositiveInteger),\n  },\n};\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst TRANSACTION_RESPONSE_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary'\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'TransactionSummary': makeObjectPropertySetter(\n      readTransactionSummary,\n      'transactionSummary'\n    ),\n    'InsertResults': makeObjectPropertySetter(readInsertResults, 'insertIds'),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst QUERY_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'PropertyName': makeChildAppender(writeStringTextNode),\n  },\n};\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst TRANSACTION_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Insert': makeChildAppender(writeFeature),\n    'Update': makeChildAppender(writeUpdate),\n    'Delete': makeChildAppender(writeDelete),\n    'Property': makeChildAppender(writeProperty),\n    'Native': makeChildAppender(writeNative),\n  },\n};\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.\n * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.\n * @property {GMLBase} [gmlFormat] The GML format to use to parse the response.\n * Default is `ol/format/GML2` for WFS 1.0.0, `ol/format/GML3` for WFS 1.1.0 and `ol/format/GML32` for WFS 2.0.0.\n * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.\n * @property {string} [version='1.1.0'] WFS version to use. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * @typedef {Object} WriteGetFeatureOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {Array<string|FeatureType>} featureTypes The feature type names or FeatureType objects to\n * define a unique bbox filter per feature type name (in this case, options `bbox` and `geometryName` are\n * ignored.).\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {string} [outputFormat] Output format.\n * @property {number} [maxFeatures] Maximum number of features to fetch.\n * @property {string} [geometryName] Geometry name to use in a BBOX filter.\n * @property {Array<string>} [propertyNames] Optional list of property names to serialize.\n * @property {string} [viewParams] viewParams GeoServer vendor parameter.\n * @property {number} [startIndex] Start index to use for WFS paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.\n * @property {number} [count] Number of features to retrieve when paging. This is a\n * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some\n * Web Feature Services have repurposed `maxfeatures` instead.\n * @property {import(\"../extent.js\").Extent} [bbox] Extent to use for the BBOX filter. The `geometryName`\n * option must be set.\n * @property {import(\"./filter/Filter.js\").default} [filter] Filter condition. See\n * {@link module:ol/format/filter} for more information.\n * @property {string} [resultType] Indicates what response should be returned,\n * e.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.\n */\n\n/**\n * @typedef {Object} FeatureType\n * @property {!string} name The feature type name.\n * @property {!import(\"../extent.js\").Extent} bbox Extent to use for the BBOX filter.\n * @property {!string} geometryName Geometry name to use in the BBOX filter.\n */\n\n/**\n * @typedef {Object} WriteTransactionOptions\n * @property {string} featureNS The namespace URI used for features.\n * @property {string} featurePrefix The prefix for the feature namespace.\n * @property {string} featureType The feature type name.\n * @property {string} [srsName] SRS name. No srsName attribute will be set on\n * geometries when this is not provided.\n * @property {string} [handle] Handle.\n * @property {boolean} [hasZ] Must be set to true if the transaction is for\n * a 3D layer. This will allow the Z coordinate to be included in the transaction.\n * @property {Array<Object>} nativeElements Native elements. Currently not supported.\n * @property {import(\"./GMLBase.js\").Options} [gmlOptions] GML options for the WFS transaction writer.\n * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0`, `1.1.0` or `2.0.0`.\n */\n\n/**\n * Number of features; bounds/extent.\n * @typedef {Object} FeatureCollectionMetadata\n * @property {number} numberOfFeatures NumberOfFeatures.\n * @property {import(\"../extent.js\").Extent} bounds Bounds.\n */\n\n/**\n * Total deleted; total inserted; total updated; array of insert ids.\n * @typedef {Object} TransactionResponse\n * @property {number} totalDeleted TotalDeleted.\n * @property {number} totalInserted TotalInserted.\n * @property {number} totalUpdated TotalUpdated.\n * @property {Array<string>} insertIds InsertIds.\n */\n\n/**\n * @type {string}\n */\nconst FEATURE_PREFIX = 'feature';\n\n/**\n * @type {string}\n */\nconst XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n/**\n * @type {Object<string, string>}\n */\nconst OGCNS = {\n  '2.0.0': 'http://www.opengis.net/ogc/1.1',\n  '1.1.0': 'http://www.opengis.net/ogc',\n  '1.0.0': 'http://www.opengis.net/ogc',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst WFSNS = {\n  '2.0.0': 'http://www.opengis.net/wfs/2.0',\n  '1.1.0': 'http://www.opengis.net/wfs',\n  '1.0.0': 'http://www.opengis.net/wfs',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst FESNS = {\n  '2.0.0': 'http://www.opengis.net/fes/2.0',\n  '1.1.0': 'http://www.opengis.net/fes',\n  '1.0.0': 'http://www.opengis.net/fes',\n};\n\n/**\n * @type {Object<string, string>}\n */\nconst SCHEMA_LOCATIONS = {\n  '2.0.0':\n    'http://www.opengis.net/wfs/2.0 http://schemas.opengis.net/wfs/2.0/wfs.xsd',\n  '1.1.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0':\n    'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',\n};\n\n/**\n * @type {Object<string, object>}\n */\nconst GML_FORMATS = {\n  '2.0.0': GML32,\n  '1.1.0': GML3,\n  '1.0.0': GML2,\n};\n\n/**\n * @const\n * @type {string}\n */\nconst DEFAULT_VERSION = '1.1.0';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option to override the default.\n * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.\n *\n * @api\n */\nclass WFS extends XMLFeature {\n  /**\n   * @param {Options} [opt_options] Optional configuration object.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version ? options.version : DEFAULT_VERSION;\n\n    /**\n     * @private\n     * @type {Array<string>|string|undefined}\n     */\n    this.featureType_ = options.featureType;\n\n    /**\n     * @private\n     * @type {Object<string, string>|string|undefined}\n     */\n    this.featureNS_ = options.featureNS;\n\n    /**\n     * @private\n     * @type {GMLBase}\n     */\n    this.gmlFormat_ = options.gmlFormat\n      ? options.gmlFormat\n      : new GML_FORMATS[this.version_]();\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.schemaLocation_ = options.schemaLocation\n      ? options.schemaLocation\n      : SCHEMA_LOCATIONS[this.version_];\n  }\n\n  /**\n   * @return {Array<string>|string|undefined} featureType\n   */\n  getFeatureType() {\n    return this.featureType_;\n  }\n\n  /**\n   * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.\n   */\n  setFeatureType(featureType) {\n    this.featureType_ = featureType;\n  }\n\n  /**\n   * @protected\n   * @param {Element} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, opt_options) {\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    assign(context, {\n      'featureType': this.featureType_,\n      'featureNS': this.featureNS_,\n    });\n\n    assign(context, this.getReadOptions(node, opt_options ? opt_options : {}));\n    const objectStack = [context];\n    let featuresNS;\n    if (this.version_ === '2.0.0') {\n      featuresNS = FEATURE_COLLECTION_PARSERS;\n    } else {\n      featuresNS = this.gmlFormat_.FEATURE_COLLECTION_PARSERS;\n    }\n    let features = pushParseAndPop(\n      [],\n      featuresNS,\n      node,\n      objectStack,\n      this.gmlFormat_\n    );\n    if (!features) {\n      features = [];\n    }\n    return features;\n  }\n\n  /**\n   * Read transaction response of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {TransactionResponse|undefined} Transaction response.\n   * @api\n   */\n  readTransactionResponse(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readTransactionResponseFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readTransactionResponseFromDocument(\n        /** @type {Document} */ (source)\n      );\n    } else {\n      return this.readTransactionResponseFromNode(\n        /** @type {Element} */ (source)\n      );\n    }\n  }\n\n  /**\n   * Read feature collection metadata of the source.\n   *\n   * @param {Document|Element|Object|string} source Source.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   * @api\n   */\n  readFeatureCollectionMetadata(source) {\n    if (!source) {\n      return undefined;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureCollectionMetadataFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readFeatureCollectionMetadataFromDocument(\n        /** @type {Document} */ (source)\n      );\n    } else {\n      return this.readFeatureCollectionMetadataFromNode(\n        /** @type {Element} */ (source)\n      );\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFeatureCollectionMetadataFromNode(\n          /** @type {Element} */ (n)\n        );\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {FeatureCollectionMetadata|undefined}\n   *     FeatureCollection metadata.\n   */\n  readFeatureCollectionMetadataFromNode(node) {\n    const result = {};\n    const value = readNonNegativeIntegerString(\n      node.getAttribute('numberOfFeatures')\n    );\n    result['numberOfFeatures'] = value;\n    return pushParseAndPop(\n      /** @type {FeatureCollectionMetadata} */ (result),\n      FEATURE_COLLECTION_PARSERS,\n      node,\n      [],\n      this.gmlFormat_\n    );\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromDocument(doc) {\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readTransactionResponseFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {TransactionResponse|undefined} Transaction response.\n   */\n  readTransactionResponseFromNode(node) {\n    return pushParseAndPop(\n      /** @type {TransactionResponse} */ ({}),\n      TRANSACTION_RESPONSE_PARSERS,\n      node,\n      []\n    );\n  }\n\n  /**\n   * Encode format as WFS `GetFeature` and return the Node.\n   *\n   * @param {WriteGetFeatureOptions} options Options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeGetFeature(options) {\n    const node = createElementNS(WFSNS[this.version_], 'GetFeature');\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', this.version_);\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', String(options.maxFeatures));\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', String(options.startIndex));\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', String(options.count));\n    }\n    if (options.viewParams !== undefined) {\n      node.setAttribute('viewParams', options.viewParams);\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      this.schemaLocation_\n    );\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    const context = {\n      node,\n    };\n    assign(context, {\n      'version': this.version_,\n      'srsName': options.srsName,\n      'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n      'featurePrefix': options.featurePrefix,\n      'propertyNames': options.propertyNames ? options.propertyNames : [],\n    });\n    assert(Array.isArray(options.featureTypes), 11); // `options.featureTypes` must be an Array\n    if (typeof options.featureTypes[0] === 'string') {\n      let filter = options.filter;\n      if (options.bbox) {\n        assert(options.geometryName, 12); // `options.geometryName` must also be provided when `options.bbox` is set\n        filter = this.combineBboxAndFilter(\n          options.geometryName,\n          options.bbox,\n          options.srsName,\n          filter\n        );\n      }\n      assign(context, {\n        'geometryName': options.geometryName,\n        'filter': filter,\n      });\n      writeGetFeature(\n        node,\n        /** @type {!Array<string>} */ (options.featureTypes),\n        [context]\n      );\n    } else {\n      // Write one query node per element in featuresType.\n      options.featureTypes.forEach((/** @type {FeatureType} */ featureType) => {\n        const completeFilter = this.combineBboxAndFilter(\n          featureType.geometryName,\n          featureType.bbox,\n          options.srsName,\n          options.filter\n        );\n        assign(context, {\n          'geometryName': featureType.geometryName,\n          'filter': completeFilter,\n        });\n        writeGetFeature(node, [featureType.name], [context]);\n      });\n    }\n    return node;\n  }\n\n  /**\n   * Create a bbox filter and combine it with another optional filter.\n   *\n   * @param {!string} geometryName Geometry name to use.\n   * @param {!import(\"../extent.js\").Extent} extent Extent.\n   * @param {string} [opt_srsName] SRS name. No srsName attribute will be\n   *    set on geometries when this is not provided.\n   * @param {import(\"./filter/Filter.js\").default} [opt_filter] Filter condition.\n   * @return {import(\"./filter/Filter.js\").default} The filter.\n   */\n  combineBboxAndFilter(geometryName, extent, opt_srsName, opt_filter) {\n    const bboxFilter = bboxFilterFn(geometryName, extent, opt_srsName);\n    if (opt_filter) {\n      // if bbox and filter are both set, combine the two into a single filter\n      return andFilterFn(opt_filter, bboxFilter);\n    }\n    return bboxFilter;\n  }\n\n  /**\n   * Encode format as WFS `Transaction` and return the Node.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} inserts The features to insert.\n   * @param {Array<import(\"../Feature.js\").default>} updates The features to update.\n   * @param {Array<import(\"../Feature.js\").default>} deletes The features to delete.\n   * @param {WriteTransactionOptions} options Write options.\n   * @return {Node} Result.\n   * @api\n   */\n  writeTransaction(inserts, updates, deletes, options) {\n    const objectStack = [];\n    const version = options.version ? options.version : this.version_;\n    const node = createElementNS(WFSNS[version], 'Transaction');\n\n    node.setAttribute('service', 'WFS');\n    node.setAttribute('version', version);\n    let baseObj;\n    /** @type {import(\"../xml.js\").NodeStackItem} */\n    if (options) {\n      baseObj = options.gmlOptions ? options.gmlOptions : {};\n      if (options.handle) {\n        node.setAttribute('handle', options.handle);\n      }\n    }\n    node.setAttributeNS(\n      XML_SCHEMA_INSTANCE_URI,\n      'xsi:schemaLocation',\n      SCHEMA_LOCATIONS[version]\n    );\n\n    const request = createTransactionRequest(node, baseObj, version, options);\n    if (inserts) {\n      serializeTransactionRequest('Insert', inserts, objectStack, request);\n    }\n    if (updates) {\n      serializeTransactionRequest('Update', updates, objectStack, request);\n    }\n    if (deletes) {\n      serializeTransactionRequest('Delete', deletes, objectStack, request);\n    }\n    if (options.nativeElements) {\n      serializeTransactionRequest(\n        'Native',\n        options.nativeElements,\n        objectStack,\n        request\n      );\n    }\n    return node;\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromDocument(doc) {\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readProjectionFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromNode(node) {\n    if (node.firstElementChild && node.firstElementChild.firstElementChild) {\n      node = node.firstElementChild.firstElementChild;\n      for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n        if (\n          !(\n            n.childNodes.length === 0 ||\n            (n.childNodes.length === 1 && n.firstChild.nodeType === 3)\n          )\n        ) {\n          const objectStack = [{}];\n          this.gmlFormat_.readGeometryElement(n, objectStack);\n          return getProjection(objectStack.pop().srsName);\n        }\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {*} baseObj Base object.\n * @param {string} version Version.\n * @param {WriteTransactionOptions} options Options.\n * @return {Object} Request object.\n */\nfunction createTransactionRequest(node, baseObj, version, options) {\n  const featurePrefix = options.featurePrefix\n    ? options.featurePrefix\n    : FEATURE_PREFIX;\n  let gmlVersion;\n  if (version === '1.0.0') {\n    gmlVersion = 2;\n  } else if (version === '1.1.0') {\n    gmlVersion = 3;\n  } else if (version === '2.0.0') {\n    gmlVersion = 3.2;\n  }\n  const obj = assign(\n    {node},\n    {\n      version,\n      'featureNS': options.featureNS,\n      'featureType': options.featureType,\n      'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion,\n      'hasZ': options.hasZ,\n      'srsName': options.srsName,\n    },\n    baseObj\n  );\n  return obj;\n}\n\n/**\n * @param {string} type Request type.\n * @param {Array<import(\"../Feature.js\").default>} features Features.\n * @param {Array<*>} objectStack Object stack.\n * @param {Element} request Transaction Request.\n */\nfunction serializeTransactionRequest(type, features, objectStack, request) {\n  pushSerializeAndPop(\n    request,\n    TRANSACTION_SERIALIZERS,\n    makeSimpleNodeFactory(type),\n    features,\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n */\nfunction readTransactionSummary(node, objectStack) {\n  return pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst OGC_FID_PARSERS = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n  'http://www.opengis.net/ogc/1.1': {\n    'FeatureId': makeArrayPusher(function (node, objectStack) {\n      return node.getAttribute('fid');\n    }),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n */\nfunction fidParser(node, objectStack) {\n  parseNode(OGC_FID_PARSERS, node, objectStack);\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\nconst INSERT_RESULTS_PARSERS = {\n  'http://www.opengis.net/wfs': {\n    'Feature': fidParser,\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Feature': fidParser,\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Array<string>|undefined} Insert results.\n */\nfunction readInsertResults(node, objectStack) {\n  return pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFeature(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else if (gmlVersion === 3) {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML32.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeOgcFidFilter(node, fid, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = OGCNS[version];\n  const filter = createElementNS(ns, 'Filter');\n  const child = createElementNS(ns, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', /** @type {string} */ (fid));\n  node.appendChild(filter);\n}\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @return {string} The value of the typeName property.\n */\nfunction getTypeName(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.indexOf(prefix) === 0) {\n    return featureType;\n  } else {\n    return prefix + featureType;\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDelete(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeUpdate(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const version = context['version'];\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = getTypeName(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (\n          value &&\n          typeof (/** @type {?} */ (value).getSimplifiedGeometry) === 'function'\n        ) {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    pushSerializeAndPop(\n      /** @type {import(\"../xml.js\").NodeStackItem} */ ({\n        version,\n        'gmlVersion': context['gmlVersion'],\n        node,\n        'hasZ': context['hasZ'],\n        'srsName': context['srsName'],\n      }),\n      TRANSACTION_SERIALIZERS,\n      makeSimpleNodeFactory('Property'),\n      values,\n      objectStack\n    );\n    writeOgcFidFilter(node, fid, objectStack);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeProperty(node, pair, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const version = context['version'];\n  const ns = WFSNS[version];\n  const name = createElementNS(ns, 'Name');\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = createElementNS(ns, 'Value');\n    node.appendChild(value);\n    if (\n      pair.value &&\n      typeof (/** @type {?} */ (pair.value).getSimplifiedGeometry) ===\n        'function'\n    ) {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else if (gmlVersion === 3) {\n        GML3.prototype.writeGeometryElement(value, pair.value, objectStack);\n      } else {\n        GML32.prototype.writeGeometryElement(value, pair.value, objectStack);\n      }\n    } else {\n      writeStringTextNode(value, pair.value);\n    }\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNative(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));\n  }\n  if (nativeElement.value !== undefined) {\n    writeStringTextNode(node, nativeElement.value);\n  }\n}\n\n/**\n * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\n */\nconst GETFEATURE_SERIALIZERS = {\n  'http://www.opengis.net/wfs': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/wfs/2.0': {\n    'Query': makeChildAppender(writeQuery),\n  },\n  'http://www.opengis.net/ogc': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n  'http://www.opengis.net/fes/2.0': {\n    'During': makeChildAppender(writeDuringFilter),\n    'And': makeChildAppender(writeLogicalFilter),\n    'Or': makeChildAppender(writeLogicalFilter),\n    'Not': makeChildAppender(writeNotFilter),\n    'BBOX': makeChildAppender(writeBboxFilter),\n    'Contains': makeChildAppender(writeSpatialFilter),\n    'Disjoint': makeChildAppender(writeSpatialFilter),\n    'Intersects': makeChildAppender(writeSpatialFilter),\n    'ResourceId': makeChildAppender(writeResourceIdFilter),\n    'Within': makeChildAppender(writeSpatialFilter),\n    'DWithin': makeChildAppender(writeDWithinFilter),\n    'PropertyIsEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNotEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsLessThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThan': makeChildAppender(writeComparisonFilter),\n    'PropertyIsGreaterThanOrEqualTo': makeChildAppender(writeComparisonFilter),\n    'PropertyIsNull': makeChildAppender(writeIsNullFilter),\n    'PropertyIsBetween': makeChildAppender(writeIsBetweenFilter),\n    'PropertyIsLike': makeChildAppender(writeIsLikeFilter),\n  },\n};\n\n/**\n * @param {Element} node Node.\n * @param {string} featureType Feature type.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeQuery(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const version = context['version'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = getTypeName(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  let typeNameAttr;\n  if (version === '2.0.0') {\n    typeNameAttr = 'typeNames';\n  } else {\n    typeNameAttr = 'typeName';\n  }\n  node.setAttribute(typeNameAttr, typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);\n  }\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    QUERY_SERIALIZERS,\n    makeSimpleNodeFactory('PropertyName'),\n    propertyNames,\n    objectStack\n  );\n  const filter = context['filter'];\n  if (filter) {\n    const child = createElementNS(getFilterNS(version), 'Filter');\n    node.appendChild(child);\n    writeFilterCondition(child, filter, objectStack);\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeFilterCondition(node, filter, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  assign(item, {context});\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(filter.getTagName()),\n    [filter],\n    objectStack\n  );\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Bbox.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeBboxFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.extent, objectStack);\n}\n\n/**\n * @param {Element} node Element.\n * @param {import(\"./filter/ResourceId.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeResourceIdFilter(node, filter, objectStack) {\n  node.setAttribute('rid', /** @type {string} */ (filter.rid));\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/Spatial.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeSpatialFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  parent['srsName'] = filter.srsName;\n  const format = GML_FORMATS[version];\n\n  writePropertyName(version, node, filter.geometryName);\n  format.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/DWithin.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDWithinFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writeSpatialFilter(node, filter, objectStack);\n  const distance = createElementNS(getFilterNS(version), 'Distance');\n  writeStringTextNode(distance, filter.distance.toString());\n  if (version === '2.0.0') {\n    distance.setAttribute('uom', filter.unit);\n  } else {\n    distance.setAttribute('units', filter.unit);\n  }\n  node.appendChild(distance);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/During.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeDuringFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n\n  writeExpression(FESNS[version], 'ValueReference', node, filter.propertyName);\n  const timePeriod = createElementNS(GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = createElementNS(GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  writeTimeInstant(begin, filter.begin);\n\n  const end = createElementNS(GMLNS, 'end');\n  timePeriod.appendChild(end);\n  writeTimeInstant(end, filter.end);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/LogicalNary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeLogicalFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  assign(item, {context});\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    pushSerializeAndPop(\n      item,\n      GETFEATURE_SERIALIZERS,\n      makeSimpleNodeFactory(condition.getTagName()),\n      [condition],\n      objectStack\n    );\n  }\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/Not.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeNotFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  /** @type {import(\"../xml.js\").NodeStackItem} */\n  const item = {node};\n  assign(item, {context});\n  const condition = filter.condition;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory(condition.getTagName()),\n    [condition],\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/ComparisonBinary.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeComparisonFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.expression);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsNull.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsNullFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  writePropertyName(version, node, filter.propertyName);\n}\n\n/**\n * @param {Node} node Node.\n * @param {import(\"./filter/IsBetween.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsBetweenFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  const ns = getFilterNS(version);\n\n  writePropertyName(version, node, filter.propertyName);\n\n  const lowerBoundary = createElementNS(ns, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  writeLiteral(version, lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = createElementNS(ns, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  writeLiteral(version, upperBoundary, '' + filter.upperBoundary);\n}\n\n/**\n * @param {Element} node Node.\n * @param {import(\"./filter/IsLike.js\").default} filter Filter.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeIsLikeFilter(node, filter, objectStack) {\n  const parent = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const context = parent['context'];\n  const version = context['version'];\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  writePropertyName(version, node, filter.propertyName);\n  writeLiteral(version, node, '' + filter.pattern);\n}\n\n/**\n * @param {string} ns Namespace.\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n */\nfunction writeExpression(ns, tagName, node, value) {\n  const property = createElementNS(ns, tagName);\n  writeStringTextNode(property, value);\n  node.appendChild(property);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writeLiteral(version, node, value) {\n  writeExpression(getFilterNS(version), 'Literal', node, value);\n}\n\n/**\n * @param {string} version Version.\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n */\nfunction writePropertyName(version, node, value) {\n  if (version === '2.0.0') {\n    writeExpression(FESNS[version], 'ValueReference', node, value);\n  } else {\n    writeExpression(OGCNS[version], 'PropertyName', node, value);\n  }\n}\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n */\nfunction writeTimeInstant(node, time) {\n  const timeInstant = createElementNS(GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = createElementNS(GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  writeStringTextNode(timePosition, time);\n}\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {import(\"./filter/Filter.js\").default} filter Filter.\n * @param {string} opt_version WFS version. If not provided defaults to '1.1.0'\n * @return {Node} Result.\n * @api\n */\nexport function writeFilter(filter, opt_version) {\n  const version = opt_version || '1.1.0';\n  const child = createElementNS(getFilterNS(version), 'Filter');\n  const context = {\n    node: child,\n  };\n  assign(context, {\n    'version': version,\n    'filter': filter,\n  });\n  writeFilterCondition(child, filter, [context]);\n  return child;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<string>} featureTypes Feature types.\n * @param {Array<*>} objectStack Node stack.\n */\nfunction writeGetFeature(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {import(\"../xml.js\").NodeStackItem} */ (\n    assign({}, context)\n  );\n  item.node = node;\n  pushSerializeAndPop(\n    item,\n    GETFEATURE_SERIALIZERS,\n    makeSimpleNodeFactory('Query'),\n    featureTypes,\n    objectStack\n  );\n}\n\nfunction getFilterNS(version) {\n  let ns;\n  if (version === '2.0.0') {\n    ns = FESNS[version];\n  } else {\n    ns = OGCNS[version];\n  }\n  return ns;\n}\n\nexport default WFS;\n","import Map from '../src/ol/Map.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport XYZ from '../src/ol/source/XYZ.js';\nimport {GeoJSON, WFS} from '../src/ol/format.js';\nimport {Stroke, Style} from '../src/ol/style.js';\nimport {Tile as TileLayer, Vector as VectorLayer} from '../src/ol/layer.js';\nimport {\n  and as andFilter,\n  equalTo as equalToFilter,\n  like as likeFilter,\n} from '../src/ol/format/filter.js';\n\nconst vectorSource = new VectorSource();\nconst vector = new VectorLayer({\n  source: vectorSource,\n  style: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 255, 1.0)',\n      width: 2,\n    }),\n  }),\n});\n\nconst key = 'get_your_own_D6rA4zTHduk6KOKTXzGB';\nconst attributions =\n  '<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>';\n\nconst raster = new TileLayer({\n  source: new XYZ({\n    attributions: attributions,\n    url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,\n    maxZoom: 20,\n  }),\n});\n\nconst map = new Map({\n  layers: [raster, vector],\n  target: document.getElementById('map'),\n  view: new View({\n    center: [-8908887.277395891, 5381918.072437216],\n    maxZoom: 19,\n    zoom: 12,\n  }),\n});\n\n// generate a GetFeature request\nconst featureRequest = new WFS().writeGetFeature({\n  srsName: 'EPSG:3857',\n  featureNS: 'http://openstreemap.org',\n  featurePrefix: 'osm',\n  featureTypes: ['water_areas'],\n  outputFormat: 'application/json',\n  filter: andFilter(\n    likeFilter('name', 'Mississippi*'),\n    equalToFilter('waterway', 'riverbank')\n  ),\n});\n\n// then post the request and add the received features to a layer\nfetch('https://ahocevar.com/geoserver/wfs', {\n  method: 'POST',\n  body: new XMLSerializer().serializeToString(featureRequest),\n})\n  .then(function (response) {\n    return response.json();\n  })\n  .then(function (json) {\n    const features = new GeoJSON().readFeatures(json);\n    vectorSource.addFeatures(features);\n    map.getView().fit(vectorSource.getExtent());\n  });\n"],"names":["schemaLocation","GMLNS","MULTIGEOMETRY_TO_MEMBER_NODENAME","GML3","GMLBase","constructor","opt_options","options","super","this","surface_","undefined","surface","curve_","curve","multiCurve_","multiCurve","multiSurface_","multiSurface","hasZ","readMultiCurve","node","objectStack","lineStrings","pushParseAndPop","MULTICURVE_PARSERS","MultiLineString","readFlatCurveRing","flatCoordinates","i","ii","length","extend","getFlatCoordinates","readMultiSurface","polygons","MULTISURFACE_PARSERS","MultiPolygon","curveMemberParser","parseNode","CURVEMEMBER_PARSERS","surfaceMemberParser","SURFACEMEMBER_PARSERS","readPatch","PATCHES_PARSERS","readSegment","SEGMENTS_PARSERS","readPolygonPatch","FLAT_LINEAR_RINGS_PARSERS","readLineStringSegment","GEOMETRY_FLAT_COORDINATES_PARSERS","interiorParser","flatLinearRing","RING_PARSERS","push","exteriorParser","readSurface","flatLinearRings","SURFACE_PARSERS","ends","Polygon","readCurve","CURVE_PARSERS","LineString","readEnvelope","ENVELOPE_PARSERS","createOrUpdate","readFlatPos","s","getAllTextContent","re","m","exec","parseFloat","substr","containerSrs","axisOrientation","getProjection","getAxisOrientation","y","x","len","readFlatPosList","replace","context","contextDimension","coords","split","z","dim","getAttribute","readNonNegativeIntegerString","parentNode","writePos_","value","srsDimension","setAttribute","srsName","point","getCoordinates","writeStringTextNode","getCoords_","opt_srsName","opt_hasZ","writePosList_","points","parts","Array","join","writePoint","geometry","pos","createElementNS","namespaceURI","appendChild","writeEnvelope","extent","values","pushSerializeAndPop","ENVELOPE_SERIALIZERS","OBJECT_PROPERTY_NODE_FACTORY","writeLinearRing","posList","RING_NODE_FACTORY_","opt_nodeName","exteriorWritten","writeSurfaceOrPolygon","nodeName","rings","getLinearRings","RING_SERIALIZERS","patches","writeSurfacePatches_","writeCurveOrLineString","segments","writeCurveSegments_","writeMultiSurfaceOrPolygon","getPolygons","SURFACEORPOLYGONMEMBER_SERIALIZERS","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writeMultiPoint","getPoints","POINTMEMBER_SERIALIZERS","makeSimpleNodeFactory","writeMultiCurveOrLineString","lines","getLineStrings","LINESTRINGORCURVEMEMBER_SERIALIZERS","writeRing","ring","linearRing","writeSurfaceOrPolygonMember","polygon","child","GEOMETRY_NODE_FACTORY_","writePointMember","writeLineStringOrCurveMember","line","writeGeometryElement","item","assign","isArray","transformExtentWithOptions","transformGeometryWithOptions","GEOMETRY_SERIALIZERS","writeFeatureElement","feature","fid","getId","featureNS","geometryName","getGeometryName","serializers","keys","hasProperties","properties","getProperties","key","getSimplifiedGeometry","makeChildAppender","writeFeatureMembers_","features","featureType","namespace","getType","writeGeometryNode","adaptOptions","geom","writeFeaturesNode","setAttributeNS","XML_SCHEMA_INSTANCE_URI","prototype","makeReplacer","GML2","GEOMETRY_PARSERS","makeArrayPusher","makeArrayExtender","writeFeatures","GML32","MULTIPOINT_PARSERS","MULTILINESTRING_PARSERS","MULTIPOLYGON_PARSERS","POINTMEMBER_PARSERS","LINESTRINGMEMBER_PARSERS","POLYGONMEMBER_PARSERS","tagName","tagName_","getTagName","Filter","conditions","assert","LogicalNary","slice","call","arguments","Error","propertyName","Comparison","expression","opt_matchCase","matchCase","ComparisonBinary","pattern","opt_wildCard","opt_singleChar","opt_escapeChar","wildCard","singleChar","escapeChar","and","params","concat","Function","bind","apply","And","FEATURE_COLLECTION_PARSERS","makeObjectPropertySetter","TRANSACTION_SUMMARY_PARSERS","readPositiveInteger","TRANSACTION_RESPONSE_PARSERS","readTransactionSummary","readInsertResults","QUERY_SERIALIZERS","TRANSACTION_SERIALIZERS","writeFeature","writeUpdate","writeDelete","writeProperty","writeNative","FEATURE_PREFIX","XMLNS","OGCNS","WFSNS","FESNS","SCHEMA_LOCATIONS","GML_FORMATS","WFS","XMLFeature","version_","version","featureType_","featureNS_","gmlFormat_","gmlFormat","schemaLocation_","getFeatureType","setFeatureType","readFeaturesFromNode","getReadOptions","featuresNS","readTransactionResponse","source","doc","parse","readTransactionResponseFromDocument","isDocument","readTransactionResponseFromNode","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","n","firstChild","nextSibling","nodeType","Node","ELEMENT_NODE","result","writeGetFeature","handle","outputFormat","maxFeatures","String","resultType","startIndex","count","viewParams","featurePrefix","propertyNames","featureTypes","filter","bbox","combineBboxAndFilter","forEach","completeFilter","name","opt_filter","bboxFilter","Bbox","bboxFilterFn","andFilterFn","writeTransaction","inserts","updates","deletes","baseObj","gmlOptions","request","gmlVersion","createTransactionRequest","serializeTransactionRequest","nativeElements","readProjectionFromDocument","readProjectionFromNode","firstElementChild","nextElementSibling","childNodes","readGeometryElement","pop","type","OGC_FID_PARSERS","fidParser","INSERT_RESULTS_PARSERS","writeOgcFidFilter","ns","getTypeName","prefix","indexOf","typeName","getKeys","get","pair","nativeElement","vendorId","safeToIgnore","GETFEATURE_SERIALIZERS","writeQuery","writeDuringFilter","writeLogicalFilter","writeNotFilter","writeBboxFilter","writeSpatialFilter","writeDWithinFilter","writeComparisonFilter","writeIsNullFilter","writeIsBetweenFilter","writeIsLikeFilter","rid","typeNameAttr","getFilterNS","writeFilterCondition","parent","format","writePropertyName","distance","toString","unit","writeExpression","timePeriod","begin","writeTimeInstant","end","condition","writeLiteral","lowerBoundary","upperBoundary","property","time","timeInstant","timePosition","vectorSource","VectorSource","vector","VectorLayer","style","Style","stroke","Stroke","color","width","raster","TileLayer","XYZ","attributions","url","maxZoom","map","Map","layers","target","document","getElementById","view","View","center","zoom","featureRequest","andFilter","IsLike","EqualTo","equalToFilter","fetch","method","body","XMLSerializer","serializeToString","then","response","json","GeoJSON","readFeatures","addFeatures","getView","fit","getExtent"],"sourceRoot":""}