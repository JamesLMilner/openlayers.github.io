{"version":3,"file":"export-map.js","mappings":"wLAWA,MAAMA,EAAQ,IAAIC,EAAAA,GAAM,CACtBC,KAAM,IAAIC,EAAAA,EAAK,CACbC,MAAO,cAILC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQ,CACN,IAAIC,EAAAA,EAAY,CACdC,OAAQ,IAAIC,EAAAA,EAAa,CACvBC,IAAK,qDACLC,OAAQ,IAAIC,EAAAA,IAEdC,WAAY,QACZd,MAAO,SAAUe,GACf,MAAMX,GAAQY,EAAAA,EAAAA,IAAQD,EAAQE,IAAI,cAAgB,WAGlD,OAFAb,EAAM,GAAK,IACXJ,EAAMkB,UAAUC,SAASf,GAClBJ,CACR,IAEH,IAAIoB,EAAAA,EAAa,CACfX,OAAQ,IAAIC,EAAAA,EAAa,CACvBC,IAAK,oCACLC,OAAQ,IAAIC,EAAAA,IAEdQ,OAAQ,SAAUN,GAChB,OAAOA,EAAQE,IAAI,cAAgB,GACpC,EACDK,OAAQ,GACRC,KAAM,GACNC,QAAS,OAGbC,OAAQ,MACRC,KAAM,IAAIC,EAAAA,GAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVC,SAASC,eAAe,cAAcC,iBAAiB,SAAS,WAC9D3B,EAAI4B,KAAK,kBAAkB,WACzB,MAAMC,EAAYJ,SAASK,cAAc,UACnCC,EAAO/B,EAAIgC,UACjBH,EAAUI,MAAQF,EAAK,GACvBF,EAAUK,OAASH,EAAK,GACxB,MAAMI,EAAaN,EAAUO,WAAW,MACxCC,MAAMC,UAAUC,QAAQC,KACtBxC,EAAIyC,cAAcC,iBAAiB,sCACnC,SAAUC,GACR,GAAIA,EAAOV,MAAQ,EAAG,CACpB,MAAMd,EACJwB,EAAOC,WAAWjD,MAAMwB,SAAWwB,EAAOhD,MAAMwB,QAElD,IAAI0B,EADJV,EAAWW,YAA0B,KAAZ3B,EAAiB,EAAI4B,OAAO5B,GAErD,MAAM6B,EAAYL,EAAOhD,MAAMqD,UAG7BH,EAFEG,EAEOA,EACNC,MAAM,wBAAwB,GAC9BC,MAAM,KACNlD,IAAI+C,QAEE,CACPI,WAAWR,EAAOhD,MAAMsC,OAASU,EAAOV,MACxC,EACA,EACAkB,WAAWR,EAAOhD,MAAMuC,QAAUS,EAAOT,OACzC,EACA,GAIJkB,yBAAyBd,UAAUe,aAAaC,MAC9CnB,EACAU,GAEF,MAAMU,EAAkBZ,EAAOC,WAAWjD,MAAM4D,gBAC5CA,IACFpB,EAAWqB,UAAYD,EACvBpB,EAAWsB,SAAS,EAAG,EAAGd,EAAOV,MAAOU,EAAOT,SAEjDC,EAAWuB,UAAUf,EAAQ,EAAG,EACjC,CACF,IAEHR,EAAWW,YAAc,EACzBX,EAAWkB,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GACvC,MAAMM,EAAOlC,SAASC,eAAe,kBACrCiC,EAAKC,KAAO/B,EAAUgC,YACtBF,EAAKG,OACN,IACD9D,EAAI+D,YACL,G","sources":["webpack:///./export-map.js"],"sourcesContent":["import GeoJSON from '../src/ol/format/GeoJSON.js';\nimport Map from '../src/ol/Map.js';\nimport VectorSource from '../src/ol/source/Vector.js';\nimport View from '../src/ol/View.js';\nimport {Fill, Style} from '../src/ol/style.js';\nimport {\n  Heatmap as HeatmapLayer,\n  Vector as VectorLayer,\n} from '../src/ol/layer.js';\nimport {asArray} from '../src/ol/color.js';\n\nconst style = new Style({\n  fill: new Fill({\n    color: '#eeeeee',\n  }),\n});\n\nconst map = new Map({\n  layers: [\n    new VectorLayer({\n      source: new VectorSource({\n        url: 'https://openlayers.org/data/vector/ecoregions.json',\n        format: new GeoJSON(),\n      }),\n      background: 'white',\n      style: function (feature) {\n        const color = asArray(feature.get('COLOR_NNH') || '#eeeeee');\n        color[3] = 0.75;\n        style.getFill().setColor(color);\n        return style;\n      },\n    }),\n    new HeatmapLayer({\n      source: new VectorSource({\n        url: 'data/geojson/world-cities.geojson',\n        format: new GeoJSON(),\n      }),\n      weight: function (feature) {\n        return feature.get('population') / 1e7;\n      },\n      radius: 15,\n      blur: 15,\n      opacity: 0.75,\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\ndocument.getElementById('export-png').addEventListener('click', function () {\n  map.once('rendercomplete', function () {\n    const mapCanvas = document.createElement('canvas');\n    const size = map.getSize();\n    mapCanvas.width = size[0];\n    mapCanvas.height = size[1];\n    const mapContext = mapCanvas.getContext('2d');\n    Array.prototype.forEach.call(\n      map.getViewport().querySelectorAll('.ol-layer canvas, canvas.ol-layer'),\n      function (canvas) {\n        if (canvas.width > 0) {\n          const opacity =\n            canvas.parentNode.style.opacity || canvas.style.opacity;\n          mapContext.globalAlpha = opacity === '' ? 1 : Number(opacity);\n          let matrix;\n          const transform = canvas.style.transform;\n          if (transform) {\n            // Get the transform parameters from the style's transform matrix\n            matrix = transform\n              .match(/^matrix\\(([^\\(]*)\\)$/)[1]\n              .split(',')\n              .map(Number);\n          } else {\n            matrix = [\n              parseFloat(canvas.style.width) / canvas.width,\n              0,\n              0,\n              parseFloat(canvas.style.height) / canvas.height,\n              0,\n              0,\n            ];\n          }\n          // Apply the transform to the export map context\n          CanvasRenderingContext2D.prototype.setTransform.apply(\n            mapContext,\n            matrix\n          );\n          const backgroundColor = canvas.parentNode.style.backgroundColor;\n          if (backgroundColor) {\n            mapContext.fillStyle = backgroundColor;\n            mapContext.fillRect(0, 0, canvas.width, canvas.height);\n          }\n          mapContext.drawImage(canvas, 0, 0);\n        }\n      }\n    );\n    mapContext.globalAlpha = 1;\n    mapContext.setTransform(1, 0, 0, 1, 0, 0);\n    const link = document.getElementById('image-download');\n    link.href = mapCanvas.toDataURL();\n    link.click();\n  });\n  map.renderSync();\n});\n"],"names":["style","Style","fill","Fill","color","map","Map","layers","VectorLayer","source","VectorSource","url","format","GeoJSON","background","feature","asArray","get","getFill","setColor","HeatmapLayer","weight","radius","blur","opacity","target","view","View","center","zoom","document","getElementById","addEventListener","once","mapCanvas","createElement","size","getSize","width","height","mapContext","getContext","Array","prototype","forEach","call","getViewport","querySelectorAll","canvas","parentNode","matrix","globalAlpha","Number","transform","match","split","parseFloat","CanvasRenderingContext2D","setTransform","apply","backgroundColor","fillStyle","fillRect","drawImage","link","href","toDataURL","click","renderSync"],"sourceRoot":""}