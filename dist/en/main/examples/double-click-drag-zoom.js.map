{"version":3,"file":"double-click-drag-zoom.js","mappings":"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","sources":["webpack:///../src/ol/interaction/DblClickDragZoom.js","webpack:///./double-click-drag-zoom.js"],"sourcesContent":["/**\n * @module ol/interaction/DblClickDragZoom\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds. *\n * @property {number} [delta=1] The zoom delta applied on move of one pixel. *\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by double tap/clik then drag up/down\n * with one finger/left mouse.\n * @api\n */\nclass DblClickDragZoom extends Interaction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super(\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options)\n    );\n\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.scaleDeltaByPixel_ = options.delta ? options.delta : 0.01;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.handlingDownUpSequence_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.handlingDoubleDownSequence_ = false;\n\n    /**\n     * @type {!Object<string, PointerEvent>}\n     * @private\n     */\n    this.trackedPointers_ = {};\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    this.targetPointers = [];\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent  map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence_) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n        // prevent page scrolling during dragging\n        mapBrowserEvent.originalEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence_ = handledUp;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        if (this.handlingDoubleDownSequence_) {\n          this.handlingDoubleDownSequence_ = false;\n          const handled = this.handleDownEvent(mapBrowserEvent);\n          this.handlingDownUpSequence_ = handled;\n          stopEvent = this.stopDown(handled);\n        } else {\n          stopEvent = this.stopDown(false);\n          this.waitForDblTap();\n        }\n      }\n    }\n    return !stopEvent;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let scaleDelta = 1.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.down_.originalEvent;\n    const distance = touch0.clientY - touch1.clientY;\n\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta =\n        1 - (this.lastDistance_ - distance) * this.scaleDeltaByPixel_;\n    }\n    this.lastDistance_ = distance;\n\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    }\n\n    // scale, bypass the resolution constraint\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    map.render();\n    view.adjustResolutionInternal(scaleDelta);\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length == 1) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n      this.down_ = mapBrowserEvent;\n      if (!this.handlingDownUpSequence_) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Handle pointer up events zooming out.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length == 0) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      const direction = this.lastScaleDelta_ > 1 ? 1 : -1;\n      view.endInteraction(this.duration_, direction);\n      this.handlingDownUpSequence_ = false;\n      this.handlingDoubleDownSequence_ = false;\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  stopDown(handled) {\n    return handled;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\n      const event = mapBrowserEvent.originalEvent;\n\n      const id = event.pointerId.toString();\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        delete this.trackedPointers_[id];\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        this.trackedPointers_[id] = event;\n      } else if (id in this.trackedPointers_) {\n        // update only when there was a pointerdown event for this pointer\n        this.trackedPointers_[id] = event;\n      }\n      this.targetPointers = Object.values(this.trackedPointers_);\n    }\n  }\n\n  /**\n   * Wait the second double finger tap.\n   */\n  waitForDblTap() {\n    if (this.doubleTapTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.doubleTapTimeoutId_);\n      this.doubleTapTimeoutId_ = undefined;\n    } else {\n      this.handlingDoubleDownSequence_ = true;\n      this.doubleTapTimeoutId_ = setTimeout(\n        this.endInteraction.bind(this),\n        250\n      );\n    }\n  }\n\n  /**\n   * @private\n   */\n  endInteraction() {\n    this.handlingDoubleDownSequence_ = false;\n    this.doubleTapTimeoutId_ = undefined;\n  }\n}\n\n/**\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n */\nfunction isPointerDraggingEvent(mapBrowserEvent) {\n  const type = mapBrowserEvent.type;\n  return (\n    type === MapBrowserEventType.POINTERDOWN ||\n    type === MapBrowserEventType.POINTERDRAG ||\n    type === MapBrowserEventType.POINTERUP\n  );\n}\n\nexport default DblClickDragZoom;\n","import Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport {\n  DblClickDragZoom,\n  defaults as defaultInteractions,\n} from '../src/ol/interaction.js';\n\nconst map = new Map({\n  interactions: defaultInteractions().extend([new DblClickDragZoom()]),\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n  ],\n  target: 'map',\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n"],"names":["DblClickDragZoom","Interaction","constructor","opt_options","options","super","stopDown","this","scaleDeltaByPixel_","delta","duration_","undefined","duration","handlingDownUpSequence_","handlingDoubleDownSequence_","trackedPointers_","targetPointers","handleEvent","mapBrowserEvent","originalEvent","stopEvent","updateTrackedPointers_","type","MapBrowserEventType","POINTERDRAG","handleDragEvent","preventDefault","POINTERUP","handledUp","handleUpEvent","POINTERDOWN","handled","handleDownEvent","waitForDblTap","scaleDelta","touch0","touch1","down_","distance","clientY","lastDistance_","lastScaleDelta_","map","view","getView","render","adjustResolutionInternal","length","anchor_","beginInteraction","direction","endInteraction","isPointerDraggingEvent","event","id","pointerId","toString","Object","values","doubleTapTimeoutId_","clearTimeout","setTimeout","bind","Map","interactions","extend","layers","Tile","source","OSM","target","View","center","zoom"],"sourceRoot":""}