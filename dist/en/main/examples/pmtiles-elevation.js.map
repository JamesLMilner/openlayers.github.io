{"version":3,"file":"pmtiles-elevation.js","mappings":"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","sources":["webpack:///./pmtiles-elevation.js"],"sourcesContent":["/* global pmtiles */\nimport DataTile from '../src/ol/source/DataTile.js';\nimport Map from '../src/ol/Map.js';\nimport TileLayer from '../src/ol/layer/WebGLTile.js';\nimport View from '../src/ol/View.js';\nimport {useGeographic} from '../src/ol/proj.js';\n\nuseGeographic();\n\nconst tiles = new pmtiles.PMTiles(\n  'https://pub-9288c68512ed46eca46ddcade307709b.r2.dev/protomaps-sample-datasets/terrarium_z9.pmtiles'\n);\n\nfunction loadImage(src) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.addEventListener('load', () => resolve(img));\n    img.addEventListener('error', () => reject(new Error('load failed')));\n    img.src = src;\n  });\n}\n\nconst size = 256;\nconst canvas = document.createElement('canvas');\ncanvas.width = size;\ncanvas.height = size;\nconst context = canvas.getContext('2d', {willReadFrequently: true});\n\nasync function loader(z, x, y) {\n  const response = await tiles.getZxy(z, x, y);\n  const blob = new Blob([response.data]);\n  const src = URL.createObjectURL(blob);\n  const img = await loadImage(src);\n  context.drawImage(img, 0, 0);\n  URL.revokeObjectURL(src);\n  return context.getImageData(0, 0, size, size).data;\n}\n\n// The method used to extract elevations from the DEM.\nfunction elevation(xOffset, yOffset) {\n  const red = ['band', 1, xOffset, yOffset];\n  const green = ['band', 2, xOffset, yOffset];\n  const blue = ['band', 3, xOffset, yOffset];\n  return ['-', ['+', ['*', 256 * 256, red], ['*', 256, green], blue], 32768];\n}\n\n// Generates a shaded relief image given elevation data.  Uses a 3x3\n// neighborhood for determining slope and aspect.\nconst dp = ['*', 2, ['resolution']];\nconst z0x = ['*', ['var', 'vert'], elevation(-1, 0)];\nconst z1x = ['*', ['var', 'vert'], elevation(1, 0)];\nconst dzdx = ['/', ['-', z1x, z0x], dp];\nconst z0y = ['*', ['var', 'vert'], elevation(0, -1)];\nconst z1y = ['*', ['var', 'vert'], elevation(0, 1)];\nconst dzdy = ['/', ['-', z1y, z0y], dp];\nconst slope = ['atan', ['^', ['+', ['^', dzdx, 2], ['^', dzdy, 2]], 0.5]];\nconst aspect = ['clamp', ['atan', ['-', 0, dzdx], dzdy], -Math.PI, Math.PI];\nconst sunEl = ['*', Math.PI / 180, ['var', 'sunEl']];\nconst sunAz = ['*', Math.PI / 180, ['var', 'sunAz']];\n\nconst incidence = [\n  '+',\n  ['*', ['sin', sunEl], ['cos', slope]],\n  ['*', ['*', ['cos', sunEl], ['sin', slope]], ['cos', ['-', sunAz, aspect]]],\n];\n\nconst variables = {};\n\nconst layer = new TileLayer({\n  source: new DataTile({\n    loader,\n    wrapX: true,\n    maxZoom: 9,\n    attributions:\n      \"<a href='https://github.com/tilezen/joerd/blob/master/docs/attribution.md#attribution'>Tilezen Jörð</a>\",\n  }),\n  style: {\n    variables: variables,\n    color: ['array', incidence, incidence, incidence, 1],\n  },\n});\n\nconst controlIds = ['vert', 'sunEl', 'sunAz'];\ncontrolIds.forEach(function (id) {\n  const control = document.getElementById(id);\n  const output = document.getElementById(id + 'Out');\n  function updateValues() {\n    output.innerText = control.value;\n    variables[id] = Number(control.value);\n  }\n  updateValues();\n  control.addEventListener('input', function () {\n    updateValues();\n    layer.updateStyleVariables(variables);\n  });\n});\n\nconst map = new Map({\n  target: 'map',\n  layers: [layer],\n  view: new View({\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n\nfunction getElevation(data) {\n  const red = data[0];\n  const green = data[1];\n  const blue = data[2];\n  return red * 256 + green + blue / 256 - 32768;\n}\n\nfunction formatLocation([lon, lat]) {\n  const NS = lat < 0 ? 'S' : 'N';\n  const EW = lon < 0 ? 'W' : 'E';\n  return `${Math.abs(lat).toFixed(1)}° ${NS}, ${Math.abs(lon).toFixed(\n    1\n  )}° ${EW}`;\n}\n\nconst elevationOut = document.getElementById('elevationOut');\nconst locationOut = document.getElementById('locationOut');\nfunction displayPixelValue(event) {\n  const data = layer.getData(event.pixel);\n  if (!data) {\n    return;\n  }\n  elevationOut.innerText = getElevation(data).toLocaleString() + ' m';\n  locationOut.innerText = formatLocation(event.coordinate);\n}\nmap.on(['pointermove', 'click'], displayPixelValue);\n"],"names":["tiles","pmtiles","PMTiles","size","canvas","document","createElement","width","height","context","getContext","willReadFrequently","elevation","xOffset","yOffset","dp","z0x","dzdx","z0y","dzdy","slope","aspect","Math","PI","sunEl","incidence","variables","layer","source","loader","async","z","x","y","response","getZxy","blob","Blob","data","src","URL","createObjectURL","img","Promise","resolve","reject","Image","addEventListener","Error","loadImage","drawImage","revokeObjectURL","getImageData","wrapX","maxZoom","attributions","style","color","forEach","id","control","getElementById","output","updateValues","innerText","value","Number","updateStyleVariables","map","target","layers","view","center","zoom","elevationOut","locationOut","on","event","getData","pixel","getElevation","toLocaleString","lon","lat","NS","EW","abs","toFixed","formatLocation","coordinate"],"sourceRoot":""}