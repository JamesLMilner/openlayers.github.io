{"version":3,"file":"google.js","mappings":"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","sources":["webpack:///../src/ol/source/Google.js","webpack:///./google.js"],"sourcesContent":["/**\n * @module ol/source/Google\n */\n\nimport TileImage from './TileImage.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\n\nconst defaultAttribution =\n  'Google Maps' +\n  '<a class=\"ol-attribution-google-tos\" href=\"https://cloud.google.com/maps-platform/terms/\" target=\"_blank\">Terms of Use</a>' +\n  ' and ' +\n  '<a class=\"ol-attribution-google-tos\" href=\"https://policies.google.com/privacy\" target=\"_blank\">Privacy Policy</a>';\n\nconst createSessionUrl = 'https://tile.googleapis.com/v1/createSession';\nconst tileUrl = 'https://tile.googleapis.com/v1/2dtiles';\nconst maxZoom = 22;\n\n/**\n * @typedef {Object} Options\n * @property {string} key Google Map Tiles API key. Get yours at https://developers.google.com/maps/documentation/tile/get-api-key.\n * @property {string} [mapType='roadmap'] The type of [base map](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields).\n * @property {string} [language='en-US'] An [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) for information displayed on the tiles.\n * @property {string} [region='US'] A [Common Locale Data Repository](https://cldr.unicode.org/) (CLDR) region identifier that represents the user location.\n * @property {string} [imageFormat] The image format used for the map tiles (e.g. `'jpeg'`, or `'png'`).\n * @property {string} [scale] Scale for map elements (`'scaleFactor1x'`, `'scaleFactor2x'`, or `'scaleFactor4x'`).\n * @property {boolean} [highDpi=false] Use high-resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types added to the map (e.g. `'layerRoadmap'`, `'layerStreetview'`, or `'layerTraffic'`).\n * @property {boolean} [overlay=false] Display only the `layerTypes` and not the underlying `mapType` (only works if `layerTypes` is provided).\n * @property {Array<Object>} [styles] [Custom styles](https://developers.google.com/maps/documentation/tile/style-reference) applied to the map.\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @typedef {Object} SessionTokenRequest\n * @property {string} mapType The map type.\n * @property {string} language The language.\n * @property {string} region The region.\n * @property {string} [imageFormat] The image format.\n * @property {string} [scale] The scale.\n * @property {boolean} [highDpi] Use high resolution tiles.\n * @property {Array<string>} [layerTypes] The layer types.\n * @property {boolean} [overlay] The overlay.\n * @property {Array<Object>} [styles] The styles.\n */\n\n/**\n * @typedef {Object} SessionTokenResponse\n * @property {string} session The session token.\n * @property {string} expiry The session token expiry (seconds since the epoch as a string).\n * @property {number} tileWidth The tile width.\n * @property {number} tileHeight The tile height.\n * @property {string} imageFormat The image format.\n */\n\n/**\n * @classdesc\n * A tile layer source that renders tiles from the Google [Map Tiles API](https://developers.google.com/maps/documentation/tile/overview).\n * The constructor takes options that are passed to the request to create a session token.  Refer to the\n * [documentation](https://developers.google.com/maps/documentation/tile/session_tokens#required_fields)\n * for additional details.\n * @api\n */\nclass Google extends TileImage {\n  /**\n   * @param {Options} options Google Maps options.\n   */\n  constructor(options) {\n    const highDpi = !!options.highDpi;\n    const opaque = !(options.overlay === true);\n    const attributions = options.attributions || [defaultAttribution];\n\n    super({\n      attributions: attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      interpolate: options.interpolate,\n      opaque: opaque,\n      projection: 'EPSG:3857',\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: 'loading',\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: highDpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @type {Error|null}\n     */\n    this.error_ = null;\n\n    /**\n     * @type {SessionTokenRequest}\n     */\n    const sessionTokenRequest = {\n      mapType: options.mapType || 'roadmap',\n      language: options.language || 'en-US',\n      region: options.region || 'US',\n    };\n    if (options.imageFormat) {\n      sessionTokenRequest.imageFormat = options.imageFormat;\n    }\n    if (options.scale) {\n      sessionTokenRequest.scale = options.scale;\n    }\n    if (highDpi) {\n      sessionTokenRequest.highDpi = true;\n    }\n    if (options.layerTypes) {\n      sessionTokenRequest.layerTypes = options.layerTypes;\n    }\n    if (options.styles) {\n      sessionTokenRequest.styles = options.styles;\n    }\n    if (options.overlay === true) {\n      sessionTokenRequest.overlay = true;\n    }\n\n    /**\n     * @type {SessionTokenRequest}\n     * @private\n     */\n    this.sessionTokenRequest_ = sessionTokenRequest;\n\n    /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */\n    this.sessionRefreshId_;\n\n    this.createSession_();\n  }\n\n  /**\n   * @return {Error|null} A source loading error. When the source state is `error`, use this function\n   * to get more information about the error. To debug a faulty configuration, you may want to use\n   * a listener like\n   * ```js\n   * source.on('change', () => {\n   *   if (source.getState() === 'error') {\n   *     console.error(source.getError());\n   *   }\n   * });\n   * ```\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Exposed here so it can be overridden in the tests.\n   * @param {string} url The URL.\n   * @param {RequestInit} config The config.\n   * @return {Promise<Response>} A promise that resolves with the response.\n   */\n  fetchSessionToken(url, config) {\n    return fetch(url, config);\n  }\n\n  /**\n   * Get or renew a session token for use with tile requests.\n   * @private\n   */\n  async createSession_() {\n    const url = createSessionUrl + '?key=' + this.apiKey_;\n    const config = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.sessionTokenRequest_),\n    };\n\n    const response = await this.fetchSessionToken(url, config);\n    if (!response.ok) {\n      try {\n        const body = await response.json();\n        this.error_ = new Error(body.error.message);\n      } catch {\n        this.error_ = new Error('Error fetching session token');\n      }\n      this.setState('error');\n      return;\n    }\n\n    /**\n     * @type {SessionTokenResponse}\n     */\n    const sessionTokenResponse = await response.json();\n\n    const tilePixelRatio = this.getTilePixelRatio(1);\n    const tileSize = [\n      sessionTokenResponse.tileWidth / tilePixelRatio,\n      sessionTokenResponse.tileHeight / tilePixelRatio,\n    ];\n\n    this.tileGrid = createXYZ({\n      extent: extentFromProjection(this.getProjection()),\n      maxZoom: maxZoom,\n      tileSize: tileSize,\n    });\n\n    const session = sessionTokenResponse.session;\n    const key = this.apiKey_;\n    this.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      const z = tileCoord[0];\n      const x = tileCoord[1];\n      const y = tileCoord[2];\n      const url = `${tileUrl}/${z}/${x}/${y}?session=${session}&key=${key}`;\n      return url;\n    };\n\n    const expiry = parseInt(sessionTokenResponse.expiry, 10) * 1000;\n    const timeout = Math.max(expiry - Date.now() - 60 * 1000, 1);\n    this.sessionRefreshId_ = setTimeout(() => this.createSession_(), timeout);\n\n    // even if the state is already ready, we want the change event\n    this.setState('ready');\n  }\n\n  disposeInternal() {\n    clearTimeout(this.sessionRefreshId_);\n    super.disposeInternal();\n  }\n}\n\nexport default Google;\n","import Google from '../src/ol/source/Google.js';\nimport Layer from '../src/ol/layer/WebGLTile.js';\nimport Map from '../src/ol/Map.js';\nimport View from '../src/ol/View.js';\n\nfunction showMap(key) {\n  const source = new Google({\n    key,\n    scale: 'scaleFactor2x',\n    highDpi: true,\n  });\n\n  source.on('change', () => {\n    if (source.getState() === 'error') {\n      alert(source.getError());\n    }\n  });\n\n  const map = new Map({\n    layers: [new Layer({source})],\n    target: 'map',\n    view: new View({\n      center: [0, 0],\n      zoom: 2,\n    }),\n  });\n}\n\ndocument.getElementById('key-form').addEventListener('submit', (event) => {\n  showMap(event.target.elements['key'].value);\n});\n"],"names":["Google","TileImage","constructor","options","highDpi","opaque","overlay","super","attributions","cacheSize","crossOrigin","interpolate","projection","reprojectionErrorThreshold","state","tileLoadFunction","tilePixelRatio","wrapX","undefined","transition","zDirection","this","apiKey_","key","error_","sessionTokenRequest","mapType","language","region","imageFormat","scale","layerTypes","styles","sessionTokenRequest_","sessionRefreshId_","createSession_","getError","fetchSessionToken","url","config","fetch","createSessionUrl","method","headers","body","JSON","stringify","response","ok","json","Error","error","message","setState","sessionTokenResponse","getTilePixelRatio","tileSize","tileWidth","tileHeight","tileGrid","extent","getProjection","maxZoom","session","tileUrlFunction","tileCoord","pixelRatio","expiry","parseInt","timeout","Math","max","Date","now","setTimeout","disposeInternal","clearTimeout","document","getElementById","addEventListener","event","source","on","getState","alert","Map","layers","target","view","View","center","zoom","showMap","elements","value"],"sourceRoot":""}